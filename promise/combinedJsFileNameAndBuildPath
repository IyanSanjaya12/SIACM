'use strict';

/* Controllers */

angular
    .module('naut')
    .controller('ecatalogDetailCtrl', ['$scope', 'RequestService', '$state', '$stateParams', 'ModalService', 'ROLE_USER', '$modal', '$rootScope', function ($scope, RequestService, $state, $stateParams, ModalService, ROLE_USER, $modal, $rootScope) {

        if ($stateParams.dataCatalog != undefined) {
            $scope.catalog = $stateParams.dataCatalog;
            $rootScope.dataVendor = $stateParams.dataCatalog;
            var thisRoleUser = RequestService.getRoleUser().nama;
            
            $scope.isVendor =  false;
            if(thisRoleUser == 'VENDOR') {
            	$scope.isVendor = true;
            }
            
            $scope.commentSize = 0;
            $scope.jumlahTerjual = 0;
            $scope.okForComment = false;
            if (thisRoleUser == ROLE_USER['SATU'] || thisRoleUser == ROLE_USER['DUA']) { // Lihat Constant.js
                $scope.okForComment = true;
            }
        }
        
        $scope.backToCatalogList = function () {
    		$state.go('app.promise.procurement-ecatalog2');
    	}


        var emptyComment = function () {
            $scope.dataRating = {
                rating: 0,
                ratingComment: '',
                catalogId: $scope.catalog.id,
                userId: RequestService.getUserLogin().user.id
            }
        }

        $scope.hitungLamaBerdiri = function (tgl) {
            var date = new Date(tgl);
            var ageDifMs = Date.now() - date.getTime();
            var ageDate = new Date(ageDifMs);
            return Math.abs(ageDate.getUTCFullYear() - 1970);
        }

        $scope.catalogCommentList = [];
        var catalogCommentList = function () {
            var params = {
                catalogId: $scope.catalog.id
            }
            RequestService.doPOST('/procurement/catalog/CatalogServices/findCatalogCommentByCatalog', params)
                .then(function (data) {
                    var dataCC = data.data;
                    if (dataCC != undefined) {
                        $scope.catalogCommentList = dataCC;
                        $scope.commentSize = dataCC.length;
                    }
                });
        }

        $scope.imagesForGallery = [];
        $scope.setApproot = function (appRoot) {
            //only change when needed.
            if ($scope.approot && appRoot === $scope.approot) {
                return;
            }
            $scope.approot = appRoot;
            console.log(appRoot);
            if ($scope.catalog.catalogImageList != undefined && $scope.catalog.catalogImageList[0] != undefined) {
            	var imagesFile;
            	if($scope.catalog.catalogImageList[0].imagesRealName == null) {
            		imagesFile = $scope.catalog.catalogImageList[0].imagesFileName;
            	} else {
            		imagesFile = RequestService.loadURL($scope.catalog.catalogImageList[0].imagesRealName);
            	}

                var dataImage = {
                    thumb: imagesFile,
                    small: imagesFile,
                    large: imagesFile
                };
                $scope.imagesForGallery.push(dataImage);
            }
            if ($scope.catalog.catalogImageList != undefined && $scope.catalog.catalogImageList[1] != undefined) {
	
            	var imagesFile1;
            	if($scope.catalog.catalogImageList[1].imagesRealName == null) {
            		imagesFile1 = $scope.catalog.catalogImageList[1].imagesFileName;
            	} else {
            		imagesFile1 = RequestService.loadURL($scope.catalog.catalogImageList[1].imagesRealName);
            	}
            	
                var dataImage = {
                    thumb: imagesFile1,
                    small: imagesFile1,
                    large: imagesFile1
                };
                $scope.imagesForGallery.push(dataImage);
            }
            if ($scope.catalog.catalogImageList != undefined && $scope.catalog.catalogImageList[2] != undefined) {
            	
            	var imagesFile2;
            	if($scope.catalog.catalogImageList[2].imagesRealName == null) {
            		imagesFile2 = $scope.catalog.catalogImageList[2].imagesFileName;
            	} else {
            		imagesFile2 = RequestService.loadURL($scope.catalog.catalogImageList[2].imagesRealName);
            	}
            	
                var dataImage = {
                    thumb: imagesFile2,
                    small: imagesFile2,
                    large: imagesFile2
                };
                $scope.imagesForGallery.push(dataImage);
            }
            //console.log($scope.imagesForGallery);

            angular.forEach($scope.catalog.catalogKontrakList, function (ck) {
                $scope.jumlahTerjual = +ck.stock;
            })

            $scope.zoomModelGallery01 = $scope.imagesForGallery[0];
            catalogList($scope.catalog.vendor.id);
            catalogCommentList();
            emptyComment();
        };


        $scope.defaultImgProduct = './app/img/default_product.png';
        var catalogList = function (id) {
            var catalogVendor = {
                pageSize: 10,
                currentPage: 1,
                attributeGroup: $scope.catalog.attributeGroup
            };

            RequestService.doPOSTJSON('/procurement/catalog/CatalogServices/findECatalog', catalogVendor)
                .then(function (data) {
                    $scope.catalogList = [];
                    $scope.panjangData = 5;
                    angular.forEach(data.catalogList, function (hasil) {
                        if (hasil.id != $scope.catalog.id) {
                            $scope.catalogList.push(hasil);
                        }
                    })
                    $scope.totalList = data.totalList;

                    angular.forEach($scope.catalogList, function (catalog) {
                        if (typeof catalog.catalogImageList !== 'undefined' && catalog.catalogImageList != null) {
                            if (typeof catalog.catalogImageList[0] !== 'undefined' && catalog.catalogImageList[0] != null) {
                            	if(catalog.catalogImageList[0].imagesRealName == null || catalog.catalogImageList[0].imagesRealName == 'undefined') {
                            		 catalog.catalogImageList[0].loadFile = catalog.catalogImageList[0].imagesFileName;
                            	} else {
                            		 catalog.catalogImageList[0].loadFile = RequestService.loadURL(catalog.catalogImageList[0].imagesRealName) + '?_ts=' + new Date().getTime();
                            	}

                            } else {
                                catalog.catalogImageList[0].loadFile = $scope.defaultImgProduct;
                            }
                        } else {
                            catalog.catalogImageList = [
                                {
                                    loadFile : $scope.defaultImgProduct
                                }
                            ];
                        }
                    });
                    $scope.angularGridOptions = {
                        gridWidth: 500,
                        refreshOnImgLoad: true
                    }

                    if ($scope.catalogList.length > 0) {
                        if ($scope.catalogList.length < 5) {
                            $scope.panjangData = $scope.catalogList.length;
                        }
                    }
                });
        }

        //default
        $scope.setApproot('');

        $scope.zoomOptions = {
            lensShape: 'round',
            cursor: 'crosshair',
            galleryActiveClass: "active",
            loadingIcon: true
        };

        $scope.setActiveImageInGallery = function (prop, img) {
            $scope[prop] = img;
        };

        $scope.saveRating = function (dataRating) {
            RequestService.doPOST('/procurement/catalog/CatalogServices/simpanCatalogComment', dataRating)
                .then(function (dataCC) {
                    if (dataCC != undefined) {
                        RequestService.doPOST('/procurement/catalog/CatalogServices/simpanRating', dataRating)
                            .then(function (data) {
                                if (data.data != undefined) {
                                    var catalog = data.data;
                                    ModalService.showModalInformation('Rating telah tersimpan dengan Baik');
                                    setelahSimpan(catalog);
                                }
                            });
                    }
                });
        }

        $scope.tulisComment = function () {
            $scope.writeComment = true;
        }

        var setelahSimpan = function (catalog) {
            if (catalog.catalogImageList != undefined && catalog.catalogImageList[0] != undefined) {
                catalog.catalogImageList[0].loadFile = RequestService.loadURL(catalog.catalogImageList[0].imagesRealName) + '?_ts=' + new Date().getTime();
            }
            if (catalog.catalogImageList != undefined && catalog.catalogImageList[1] != undefined) {
                catalog.catalogImageList[1].loadFile = RequestService.loadURL(catalog.catalogImageList[1].imagesRealName) + '?_ts=' + new Date().getTime();
            }

            $state.go('app.promise.procurement-ecatalog-Detail', {
                dataCatalog: catalog
            });
        }

        $scope.mailTo = function (email) {
            var mailmodalinstance = $modal.open({
                templateUrl: '/mail.compose.html',
                controller: 'mailComposeModalController',
                resolve: {
                    email: function () {
                        return email;
                    }
                }
            });
            //    	$state.go('app.promise.mailbox', {email: email});
        }
}]);

angular.module('naut')
    .controller('mailComposeModalController', ['$rootScope', '$scope', '$modalInstance', 'email', 'RequestService', 'ModalService', function ($rootScope, $scope, $modalInstance, email, RequestService, ModalService) {
        $scope.emailTujuan = email;
        $scope.emailIsiError = false;
        $scope.mailCC = false;
        $scope.emailIsi = "<p></p><p></p><br/><p>Regards,</p>" +
            "<p><br/>" + RequestService.getUserLogin().user.namaPengguna + " <br/>" +
            "<i><u>" + RequestService.getUserLogin().user.email + "</u></i></p>";

        $scope.btnKirim = function () {
            if ($scope.emailIsi == undefined || $scope.emailIsi == "") {
                $scope.emailIsiError = true;
                document.getElementsByName("emailIsi")[0].focus();
            }

            if (!$scope.emailIsiError) {
                var params = {
                    emailTujuan: $scope.emailTujuan,
                    emailSubject: $scope.emailSubject,
                    emailIsi: $scope.emailIsi,
                    emailFrom: RequestService.getUserLogin().user.email
                }

                if ($scope.emailCC) {
                    params.emailCC = $scope.emailCC;
                }

                RequestService.doPOST('/procurement/catalog/CatalogServices/sendingEmail', params)
                    .then(function (data) {
                        console.info(data);
                        if (data.statusText == "OK") {
                            ModalService.showModalInformation('Email dalam pengiriman');
                            $scope.btnBatal();
                        } else {
                            ModalService.showModalInformation('Gagal mengirim Email, alamat Tujuan SALAH!');
                        }
                    });
            }
        }

        $scope.btnBatal = function () {
            $modalInstance.dismiss('cancel');
        }
    }]);;
(function () {
    'use strict';
    angular.module('naut').controller('ecatalogCartCtrl', ecatalogCartCtrl);

    function ecatalogCartCtrl($rootScope, $scope, RequestService, $state, $stateParams, $location, $modal, ModalService, $http) {
    	if($rootScope.userRole.nama == 'VENDOR') {
    		$location.path('/appvendor/promise/dashboard');
    	}
    	
		$rootScope.grandTotal = 0;
		$rootScope.grandTotalCurrency = 'IDR';

		if ($stateParams.catalogList != undefined) {
			$scope.catalogList = $stateParams.catalogList;
			angular.forEach($scope.catalogList, function (value, index) {
//				if(value.catalogLocationList != undefined) {
//					if(value.catalogLocationList[0].supplyAbility != undefined) {
						value.qtyCartItem = 1;
						$rootScope.grandTotal = $rootScope.grandTotal + (value.qtyCartItem * value.harga);
						$rootScope.grandTotalCurrency = value.mataUang.kode;
//					} else {
//						ModalService.showModalInformation('Item - '+value.kodeProduk+' melebihi Supply Ability');
//						value.qtyCartItem = 1;
//					}
//				} else {
//					ModalService.showModalInformation('Item - '+value.kodeProduk+' Tidak memiliki Stock');
//					$state.go('app.promise.procurement-ecatalog2');
//				}
			});
		}

		$scope.onChangeItemQty = function () {
			if ($scope.catalogList.length > 0) {
				$rootScope.grandTotal = 0;
				angular.forEach($scope.catalogList, function (value, index) {
//					if(value.qtyCartItem <= value.catalogLocationList[0].supplyAbility) {
						$rootScope.grandTotal = $rootScope.grandTotal + (value.qtyCartItem * value.harga);
						$rootScope.grandTotalCurrency = value.mataUang.kode;
//					} else {
//						ModalService.showModalInformation('Item - '+value.kodeProduk+' melebihi Supply Ability');
//						value.qtyCartItem = value.catalogLocationList[0].supplyAbility;
//					}
				});
			} else {
				$rootScope.grandTotal = 0;
			}
		}
		
		$scope.removeItem = function(index){
			RequestService.modalConfirmation('Anda yakin ingin menghapus Item "'+$scope.catalogList[index].namaIND+'"?')
				.then(function(){
				$scope.catalogList.splice(index, 1);
				$scope.onChangeItemQty();
				$rootScope.removeCart($scope.catalogList[index]);
			})
		}

		$scope.btnCatalogList = function () {
			$state.go('app.promise.procurement-ecatalog2');
		}
		
		$scope.btnAddPR = function () {
			
			$rootScope.materialList = [];
			$rootScope.itemPRList = [];
			
			// Tambah Item ke dalam List
			angular.forEach($scope.catalogList, function (item, indexItem) {
				var itemObj = {
	                    material: item,
	                    kode: item.kodeProduk,
	                    nama: item.namaIND,
	                    deskripsi: item.deskripsiIND,
	                    vendor: item.vendor.nama,
	                    quantity: item.qtyCartItem,
	                    price: item.harga,
	                    unit: item.satuan.nama,
	                    matauangId: item.mataUang.id,
	                    matauang: item.mataUang.kode,
	                    vendor: item.vendor.nama,
	                    vendorId: item.vendor.id,
	                    specification: item.deskripsi,
	                    costcenteritem: $rootScope.nomorDraft
	                };
				
				$rootScope.itemPRList.push(itemObj);
			});
			$rootScope.fromCart = true;
			$location.path('/app/promise/procurement/purchaserequest/add');
		}
		
		
		//========================generate BO=======================//
		$scope.showFormCreateSo = false;
		
		$scope.loading = false;
		$scope.btnCreateSO = function (){
			
			$scope.showFormCreateSo = true;
			
	    	 var salesorderList =[];
	    	
	    	 angular.forEach($scope.catalogList , function(val, index) {
	    		 var isNew = true;
	    		 angular.forEach(salesorderList , function(valId, index) {
	    			 if(valId.vendor.id == val.vendor.id){
		    			 var listcat = valId.listCatalog;
		    			 listcat.push(val);
		    			 valId.listCatalog = listcat;
		    			 	    			 
		    			 isNew = false;
	    			 }
	    		 })
	    		 
	    		 if(isNew){
	    			 var data = {};
	    			 var listcat = [];
	    			 data.vendor = val.vendor;
	    			 data.soNumber = "";
	    			 data.errorSoNumber = "";
	    			 listcat.push(val);
	    			 
	    			 data.listCatalog = listcat;
	    			 
	    			 salesorderList.push(data);
	    		 }
	    		 
	    	 })
	    	 
	    	 $scope.salesOrderList = salesorderList;
	    	 
	    	 
			
        };
        
        $http.get($rootScope.backendAddress+'/procurement/master/AfcoServices/getAfcoByToken')
        .success(function(data){
       	// get company Address
			$rootScope.companyAddresslist = [];
			var params = {
				afcoId : data[0].id
			}
			RequestService.requestServer('/procurement/master/AddressBookServices/getAddressBookListByAfco',params).then(function(data, status, headers, config) {
				$rootScope.companyAddresslist = data;
				var companyAddress = {
					addressLabel : 'Alamat Baru',
					isNew : true
				};
				$rootScope.companyAddresslist
						.push(companyAddress);
			})
            
        })
    
		/////get bill addres
        $rootScope.billToAddress = {};
		$scope.setBillToAddress = function(index, companyAddressSelected) {
			
		$rootScope.billToAddress = companyAddressSelected;
		
		if (companyAddressSelected.isNew != true) {
			$rootScope.disabledbillto = true;
			$scope.namaBillTo = companyAddressSelected.fullName;
			$scope.telpBillTo = companyAddressSelected.telephone1;
			$scope.alamatBillTo = companyAddressSelected.addressLabel
					+ ', '
					+ companyAddressSelected.streetAddress
					+ ', '
					+ companyAddressSelected.city
					+ ', '
					+ (companyAddressSelected.country != null ? companyAddressSelected.country : '')
			
		} else {
			$rootScope.disabledbillto = false;
			$scope.namaBillTo = '';
			$scope.telpBillTo = '';
			$scope.alamatBillTo = '';
		}
	};
		
		// get ship address
	$rootScope.shipToAddress = {};
	$scope.setShipToAddress = function(index, companyAddressSelected) {
		$rootScope.shipToAddress = companyAddressSelected;
		
		if (companyAddressSelected.isNew != true) {
			$rootScope.disabledshipto = true;
			$scope.namaShipTo = companyAddressSelected.fullName;
			$scope.tlpShipTo = companyAddressSelected.telephone1;
			$scope.alamatShipTo  = companyAddressSelected.addressLabel
					+ ', '
					+ companyAddressSelected.streetAddress
					+ ', '
					+ companyAddressSelected.city
					+ ', '
					+ (companyAddressSelected.country != null ? companyAddressSelected.country : '')
			
		} else {
			$rootScope.disabledshipto = false;
			$scope.namaShipTo = '';
			$scope.tlpShipTo = '';
			$scope.alamatShipTo = '';
		}
		
	};
	
        
        $scope.btnGenerateNumber = function(valIndex) {
        	$http.get($rootScope.backendAddress + '/procurement/salesorder/SalesOrderServices/getCoNumber')
			.success(function(data, status, headers, config) {
	        	 angular.forEach($scope.salesOrderList , function(val, index) {
	        		 if(index==valIndex){
	        			 val.soNumber = data.co;
	        		 }
	        	 });
			})
			
		};
		
		 $scope.validateForm = function () {
	        	var isValid = true;
	        	if (typeof $scope.soNumber === 'undefined' || $scope.soNumber.length == 0 || $scope.soNumber == "" ) {
	    			isValid = false;
	    			$scope.errormessageFieldSO = 'CO Number harus diisi!';
	    		}else{
	    			isValid = true;
	    			$scope.errormessageFieldSO = '';
	    		}
	        	
	        	if (typeof $scope.namaBillTo === 'undefined') {
	    			isValid = false;
	    			$scope.errormessageFieldNmBill = 'Nama Bill To harus diisi!';
	    		}else{
	    			isValid = true;
	    			$scope.errormessageFieldNmBill = '';
	    		}
	        	
	        	if (typeof $scope.alamatBillTo === 'undefined') {
	    			isValid = false;
	    			$scope.errormessageFieldALBill = 'Alamat Bill To harus diisi!';
	    		}else{
	    			isValid = true;
	    			$scope.errormessageFieldALBill = '';
	    		}
	        	
	        	if (typeof $scope.telpBillTo === 'undefined') {
	    			isValid = false;
	    			$scope.errormessageFieldTlpBill = 'Telpon Bill To harus diisi!';
	    		}else{
	    			isValid = true;
	    			$scope.errormessageFieldTlpBill = '';
	    		}
	        	
	        	if (typeof $scope.namaShipTo === 'undefined') {
	    			isValid = false;
	    			$scope.errormessageFieldNmShip = 'Nama Ship To harus diisi!';
	    		}else{
	    			isValid = true;
	    			$scope.errormessageFieldNmShip = '';
	    		}
	        	
	        	if (typeof $scope.alamatShipTo === 'undefined') {
	    			isValid = false;
	    			$scope.errormessageFieldALShip = 'Alamat Ship To harus diisi!';
	    		}else{
	    			isValid = true;
	    			$scope.errormessageFieldALShip = '';
	    		}
	        	
	        	if (typeof $scope.tlpShipTo === 'undefined') {
	    			isValid = false;
	    			$scope.errormessageFieldtlpShip = 'Tlp Ship To harus diisi!';
	    		}else{
	    			isValid = true;
	    			$scope.errormessageFieldtlpShip = '';
	    		}
	        	
	        	// cek BO NUMBER
	        	 angular.forEach($scope.salesOrderList , function(val, index) {
	        		 if(val.soNumber == "" || val.soNumber.length == 0){
	        			 isValid = false;
	        			 val.errorSoNumber ="Bo Number harus Diisi";
	        		 }else{
	        			 val.errorSoNumber ="";
	        		 }
	        	 });
	        	 
	        	
	        	return isValid;
	        	
	        }
		 
		 
		 $scope.btnGenerateSO = function () {
	        	
	        	$rootScope.soNumber = $scope.soNumber;
	        	
	        	$rootScope.billToAddress.billToName = $scope.namaBillTo;
	    		$rootScope.billToAddress.billToAddress = $scope.alamatBillTo;
	    		$rootScope.billToAddress.billToTelp =$scope.telpBillTo;
	    		$rootScope.shipToAddress.shipToName = $scope.namaShipTo;
	    		$rootScope.shipToAddress.shipToAddress =$scope.alamatShipTo;
	    		$rootScope.shipToAddress.shipToTelp =$scope.tlpShipTo;
	    		
	    		var isvalid = $scope.validateForm();
	    		if(isvalid){
	    			$scope.save();
	    		}
	        	
	        };
	        
		 
		 $scope.save = function () {
		    	
		    	RequestService.modalConfirmation().then(function (result) {
		    		$scope.loading = true;
		    		var data = {};
		    		
		    		data.salesOrder = {
		        		billToName :$rootScope.billToAddress.billToName,
		        		billToAddress : $rootScope.billToAddress.billToAddress,
		        		billToTelp : $rootScope.billToAddress.billToTelp,
		        		shipToName : $rootScope.shipToAddress.shipToName,
		        		shipToAddress : $rootScope.shipToAddress.shipToAddress,
		        		shipToTelp : $rootScope.shipToAddress.shipToTelp,
		        		status : 0
		        		
		        	}
		    		
		    		var salesorderList = [];
		    		
		    		    		
		    		angular.forEach($scope.salesOrderList, function(val, index) {
		    			
		    			angular.forEach(val.listCatalog, function(value, index) {
		    				console.log($scope.salesOrderList);
		        			var salesOrderItem = {
		        					catId : value.id,
		        	        		qty : value.qtyCartItem,
		        	        		soNumber : val.soNumber
		        	        	}
		        			
		        			salesorderList.push(salesOrderItem);
		    			})
	        			
		    		})
		    			
		    		data.salesOrderItemList = salesorderList;
		    		
		    		RequestService.doPOSTJSON('/procurement/salesorder/SalesOrderServices/create', data)
					.then(function successCallback(data) {
						
							$scope.sendEmail();
						 //ModalService.closeModalInformation();
				}, function errorCallback(response) {				 
						ModalService.closeModalInformation();
						ModalService.showModalInformation('Terjadi kesalahan pada system!');
					});
	    		});
		    };
		    
		    
		    $scope.sendEmail = function (){
		    	
		    	 var data = {};
		    	 
		    	 data.salesOrder = {};
		    	 
		    	 var salesorderList =[];
		    	 angular.forEach($scope.salesOrderList , function(val, index) {
		    		var isAdd = true;
		    		 
		    		 angular.forEach(salesorderList , function(valId, index) {		    		
		    			 
		    			 if(valId.venId == val.vendor.id){
		    				 isAdd = false;
		    			 }
		    		 })
		    		 
		    		 if(isAdd){
		    			 var salesOrderItem = {
		        					venId : val.vendor.id,
		        					soNumber :val.soNumber
		        	        	}
		        			
		    			 salesorderList.push(salesOrderItem);
		    		 }
		    		 
		    	 })
		    	 
		    		    	 
		    	 data.salesOrderItemList = salesorderList;
		    	 
		    	RequestService.doPOSTJSON('/procurement/salesorder/SalesOrderServices/insertNotificationCo', data)
					.then(function successCallback(data) {
						

						 $state.go('app.promise.procurement-sales-order');
						 RequestService.informSaveSuccess();
						 //ModalService.closeModalInformation();
						 $scope.loading = false;
				}, function errorCallback(response) {				 
						ModalService.closeModalInformation();
						ModalService.showModalInformation('Terjadi kesalahan pada system!');
					});
	           
		    }
		    
		    
		    
		
		/*$scope.btnCreateSO = function (){
			
			console.log($scope.catalogList);
			$rootScope.catalogListForCreateSo = $scope.catalogList;
			var modalInstance = $modal.open({
                templateUrl: 'createSo.html',
                controller: modalInstanceCreateSoController,
                size : 'lg'
            });
		} 
		
		var modalInstanceCreateSoController = function ($scope, $http, $modalInstance, $resource, $rootScope, catalogList) {
			
			$rootScope.disabledbillto = true;
			$rootScope.disabledshipto = true;
			
			console.log($rootScope.userLogin);
			
			$scope.btnGenerateNumber = function() {
				
				$http.get($rootScope.backendAddress + '/procurement/salesorder/SalesOrderServices/getCoNumber')
				.success(function(data, status, headers, config) {
					$scope.soNumber = data.pr;
				})
			};
			
			
			 $http.get($rootScope.backendAddress+'/procurement/master/AfcoServices/getAfcoByToken')
             .success(function(data){
            	// get company Address
     			$rootScope.companyAddresslist = [];
     			var params = {
     				afcoId : data[0].id
     			}
     			RequestService.requestServer('/procurement/master/AddressBookServices/getAddressBookListByAfco',params).then(function(data, status, headers, config) {
     				$rootScope.companyAddresslist = data;
     				var companyAddress = {
     					addressLabel : 'Alamat Baru',
     					isNew : true
     				};
     				$rootScope.companyAddresslist
     						.push(companyAddress);
     			})
	             
	         })
         
			/////get bill addres
	         $rootScope.billToAddress = {};
			$scope.setBillToAddress = function(index, companyAddressSelected) {
				
			$rootScope.billToAddress = companyAddressSelected;
			
			console.log(companyAddressSelected);
			if (companyAddressSelected.isNew != true) {
				$rootScope.disabledbillto = true;
				$scope.namaBillTo = companyAddressSelected.fullName;
				$scope.telpBillTo = companyAddressSelected.telephone1;
				$scope.alamatBillTo = companyAddressSelected.addressLabel
						+ ', '
						+ companyAddressSelected.streetAddress
						+ ', '
						+ companyAddressSelected.city
						+ ', '
						+ (companyAddressSelected.country != null ? companyAddressSelected.country : '')
				
			} else {
				$rootScope.disabledbillto = false;
				$scope.namaBillTo = '';
				$scope.telpBillTo = '';
				$scope.alamatBillTo = '';
			}
		};
			
			// get ship address
		$rootScope.shipToAddress = {};
		$scope.setShipToAddress = function(index, companyAddressSelected) {
			$rootScope.shipToAddress = companyAddressSelected;
			
			if (companyAddressSelected.isNew != true) {
				$rootScope.disabledshipto = true;
				$scope.namaShipTo = companyAddressSelected.fullName;
				$scope.tlpShipTo = companyAddressSelected.telephone1;
				$scope.alamatShipTo  = companyAddressSelected.addressLabel
						+ ', '
						+ companyAddressSelected.streetAddress
						+ ', '
						+ companyAddressSelected.city
						+ ', '
						+ (companyAddressSelected.country != null ? companyAddressSelected.country : '')
				
			} else {
				$rootScope.disabledshipto = false;
				$scope.namaShipTo = '';
				$scope.tlpShipTo = '';
				$scope.alamatShipTo = '';
			}
			
		};

        $scope.btnGenerateSO = function () {
        	
        	$rootScope.soNumber = $scope.soNumber;
        	
        	$rootScope.billToAddress.billToName = $scope.namaBillTo;
    		$rootScope.billToAddress.billToAddress = $scope.alamatBillTo;
    		$rootScope.billToAddress.billToTelp =$scope.telpBillTo;
    		$rootScope.shipToAddress.shipToName = $scope.namaShipTo;
    		$rootScope.shipToAddress.shipToAddress =$scope.alamatShipTo;
    		$rootScope.shipToAddress.shipToTelp =$scope.tlpShipTo;
    		
    		var isvalid = $scope.validateForm();
    		if(isvalid){
    			$rootScope.generateSO();
    		}
        	
        };
        
        $scope.validateForm = function () {
        	var isValid = true;
        	if (typeof $scope.soNumber === 'undefined' || $scope.soNumber.length == 0 || $scope.soNumber == "" ) {
    			isValid = false;
    			$scope.errormessageFieldSO = 'CO Number harus diisi!';
    		}else{
    			isValid = true;
    			$scope.errormessageFieldSO = '';
    		}
        	
        	if (typeof $scope.namaBillTo === 'undefined') {
    			isValid = false;
    			$scope.errormessageFieldNmBill = 'Nama Bill To harus diisi!';
    		}else{
    			isValid = true;
    			$scope.errormessageFieldNmBill = '';
    		}
        	
        	if (typeof $scope.alamatBillTo === 'undefined') {
    			isValid = false;
    			$scope.errormessageFieldALBill = 'Alamat Bill To harus diisi!';
    		}else{
    			isValid = true;
    			$scope.errormessageFieldALBill = '';
    		}
        	
        	if (typeof $scope.telpBillTo === 'undefined') {
    			isValid = false;
    			$scope.errormessageFieldTlpBill = 'Telpon Bill To harus diisi!';
    		}else{
    			isValid = true;
    			$scope.errormessageFieldTlpBill = '';
    		}
        	
        	if (typeof $scope.namaShipTo === 'undefined') {
    			isValid = false;
    			$scope.errormessageFieldNmShip = 'Nama Ship To harus diisi!';
    		}else{
    			isValid = true;
    			$scope.errormessageFieldNmShip = '';
    		}
        	
        	if (typeof $scope.alamatShipTo === 'undefined') {
    			isValid = false;
    			$scope.errormessageFieldALShip = 'Alamat Ship To harus diisi!';
    		}else{
    			isValid = true;
    			$scope.errormessageFieldALShip = '';
    		}
        	
        	if (typeof $scope.tlpShipTo === 'undefined') {
    			isValid = false;
    			$scope.errormessageFieldtlpShip = 'Tlp Ship To harus diisi!';
    		}else{
    			isValid = true;
    			$scope.errormessageFieldtlpShip = '';
    		}
        	
        	return isValid;
        	
        }
        
        

        $rootScope.cancel1 = function () {
            $modalInstance.dismiss('cancel');
        };
    }
	modalInstanceCreateSoController.$inject = ['$scope', '$http', '$modalInstance', '$resource', '$rootScope'];
	
	
	//modal generate SO to preview 
	
	$rootScope.generateSO = function (){
		var modalInstance = $modal.open({
            templateUrl: 'generateSo.html',
            controller: modalInstanceGenerateSoController,
            size : 'lg'
        });
	}
	
	var modalInstanceGenerateSoController = function ($scope, $http, $modalInstance, $resource, $rootScope, catalogList, $log, $location,ModalService) {
		
		$scope.catalogList = $rootScope.catalogListForCreateSo;
		
		$scope.loading = false;
		
	    $scope.btnPrintSaveGenerateSo = function () {
	    	$scope.save(true);
	    	
	    };
	    
	    $scope.printReport = function (id) {
			  $http.get($rootScope.backendAddress+'/procurement/report/salesorder/print/'+id, {
                  responseType: 'arraybuffer'
              })
              .success(function (data) {
                  //$log.info('typeof data = ' + typeof data);

                  VALID
                  if (typeof data == 'object') {

                  }
                  posibilty error
                  else if (typeof data == 'undefined') {
                      get error code
                      $http.get(url)
                          .success(function (data) {
                              var errorCode = data.substr(data.indexOf("PRMS-ERR"), 12);
                              $location.path('/page/errorPage/' + errorCode);
                          });
                      return;
                  }
                  var file = new Blob([data], {
                      type: 'application/vnd.ms-excel'
                  });
                  var fileURL = URL.createObjectURL(file);
                  window.open(fileURL, 'C-Sharpcorner');
                  
                  
                  $modalInstance.close('closed');
				  $rootScope.cancel1();
				  $state.go('app.promise.procurement-ecatalog2');
				  RequestService.informSaveSuccess();
				  $scope.loading = false;
                  
              });
	    }
	    
	    $scope.saveGeneratorSO = function (){
	    	$scope.save(false);
	    }
	    
	    $scope.save = function (isPrint) {
	    	
	    	
	    	RequestService.modalConfirmation().then(function (result) {
	    		$scope.loading = true;
	    		var data = {};
	    		data.salesOrder = {
	        		soNumber : $rootScope.soNumber,
	        		billToName :$rootScope.billToAddress.billToName,
	        		billToAddress : $rootScope.billToAddress.billToAddress,
	        		billToTelp : $rootScope.billToAddress.billToTelp,
	        		shipToName : $rootScope.shipToAddress.shipToName,
	        		shipToAddress : $rootScope.shipToAddress.shipToAddress,
	        		shipToTelp : $rootScope.shipToAddress.shipToTelp,
	        		status : 1
	        		
	        	}
	    		
	    		var salesorderList = [];
	    		angular.forEach($rootScope.catalogListForCreateSo, function(val, index) {
        			var salesOrderItem = {
        					catId : val.id,
        	        		qty : val.qtyCartItem
        	        		
        	        	}
        			
        			salesorderList.push(salesOrderItem);
	    		})
	    			
	    		data.salesOrderItemList = salesorderList;
	    		
	    		 
	    		
				RequestService.doPOSTJSON('/procurement/salesorder/SalesOrderServices/create', data)
				.then(function successCallback(data) {
					
					if(isPrint){
						$scope.printReport(data.id);
						$scope.sendEmail();
					}else{
						$scope.sendEmail();
					}		
						  $rootScope.soNumber = "";
						  $modalInstance.close('closed');
						  $rootScope.cancel1();
						  $state.go('app.promise.procurement-ecatalog2');
						  RequestService.informSaveSuccess();
						  $scope.loading = false;
					 //ModalService.closeModalInformation();
			}, function errorCallback(response) {				 
					ModalService.closeModalInformation();
					ModalService.showModalInformation('Terjadi kesalahan pada system!');
				});
    		});
	    };
	    
	    
	    $scope.sendEmail = function (){
	    	
	    	 var data = {};
	    	 
	    	 data.salesOrder = {
	    			 soNumber : $rootScope.soNumber,
	    	 }
	    	 
	    	 var salesorderList =[];
	    	 angular.forEach($scope.catalogList , function(val, index) {
	    		var isAdd = true;
	    		 
	    		 angular.forEach(salesorderList , function(valId, index) {
	    			 console.log(valId);
	    			 
	    			 if(valId.venId == val.vendor.id){
	    				 isAdd = false;
	    			 }
	    		 })
	    		 
	    		 if(isAdd){
	    			 var salesOrderItem = {
	        					venId : val.vendor.id,
	        	        	}
	        			
	    			 salesorderList.push(salesOrderItem);
	    		 }
	    		 
	    	 })
	    	 
	    		    	 
	    	 data.salesOrderItemList = salesorderList;
	    	 
	    	 RequestService.doPOSTJSON('/procurement/salesorder/SalesOrderServices/insertNotificationCo', data)
				.then(function successCallback(data) {
					$rootScope.soNumber = "";
					 $state.go('app.promise.procurement-ecatalog2');
					 //ModalService.closeModalInformation();
					 
			}, function errorCallback(response) {				 
					ModalService.closeModalInformation();
					ModalService.showModalInformation('Terjadi kesalahan pada system!');
				});
           
	    }
	    
	    
	    $scope.btnPrintSaveSo = function () {
	        $modalInstance.close('closed');
	    };
	    
	    $scope.cancelSaveSo = function () {
	        $modalInstance.close('closed');
	    };
	
	    $scope.cancel = function () {
	        $modalInstance.dismiss('cancel');
	    };
	}
	modalInstanceGenerateSoController.$inject = ['$scope', '$http', '$modalInstance', '$resource', '$rootScope','$log', '$location','ModalService'];*/
}

ecatalogCartCtrl.$inject = ['$rootScope', '$scope', 'RequestService', '$state', '$stateParams', '$location', '$modal', 'ModalService', '$http'];

})();;
/* Controllers */

angular
    .module('naut')
    .controller('catalogPortalCtrl', ['$scope', 'RequestService', '$state', 'ROLE_USER', '$timeout','$rootScope', function ($scope, RequestService, $state, ROLE_USER, $timeout, $rootScope ) {

        var vm = this;
        
        console.log('Masuk sini');
        

        //Get Role User
        /*RequestService.doGET('/catalog/AttributeGroupPortalServices/findAll')
        .then(function (data) {
            if (data.length > 0) {
                $scope.attGrpList = data
            }
        });*/
        /*RequestService.getRoleUsers(RequestService.getUserLogin().user.id).then(function (data) {
            $scope.roleUser = data;
        });*/

        $scope.lihat = false;
        $scope.okForECatalog = false;

        $scope.catalogVendor = {
            pageSize: 10,
            currentPage: 1
        };

       /* var thisRoleUser = RequestService.getRoleUser().nama;
        if (thisRoleUser == ROLE_USER['SATU'] || thisRoleUser == ROLE_USER['DUA']) { // Lihat Constant.js
*/            $scope.okForECatalog = true;
       // }

        //untuk menampilkan tombol cart
        $scope.isCartOk = true;
       /* if (thisRoleUser == ROLE_USER['DUA'])
            $scope.isCartOk = true;*/

        function attSearchInitAll(dataCategory) {
       
            if (dataCategory != undefined) {
                RequestService.doPOSTJSON('/catalog/AttributeGroupPortalServices/findByCategory', $scope.catalogVendor)
                    .then(function (data) {
                        if (data.length > 0) {
                            $scope.attGrpList = data
                        }
                    })
            } else {
                RequestService.doGET('/catalog/AttributeGroupPortalServices/findAll')
                    .then(function (data) {
                        if (data.length > 0) {
                            $scope.attGrpList = data
                        }
                    });
            }

        }

        RequestService.doPOSTJSON('/catalog/CategoryPortalServices/findAllWithTree', {})
            .then(function (data) {
                $scope.categoryList = data;
            });

        $scope.angularGridOptions = {
            gridWidth: 500,
            scrollContainer: '#prodwrap',
            refreshOnImgLoad: true
        }

        $scope.stateView = 'list';
        $scope.swap = function (div) {
            if (div == 'list') {
                $('#grid-view').removeClass('selected');
                $('#list-view').addClass('selected');
                $('.product-layout').removeClass('product-grid');
                $('.product-layout').addClass('product-list');
                $scope.angularGridOptions = {
                    gridWidth: 500
                }
            } else {
                $('#grid-view').addClass('selected');
                $('#list-view').removeClass('selected');
                $('.product-layout').removeClass('product-list');
                $('.product-layout').addClass('product-grid');
                $scope.angularGridOptions = {
                    gridWidth: 250
                }
            }
            $scope.stateView = div;
        }

        $scope.resetData = function () {
        	console.log($scope.catalogVendor);
            $scope.loading = true;
            $scope.attGrpList = [];
            $scope.catalogList = [];
            //console.info($scope.catalogVendor);
            RequestService.doPOSTJSON('/procurement/catalog/CatalogServices/findECatalog', $scope.catalogVendor)
                .then(function (data) {
                    $scope.catalogList = data.catalogList;
                    console.log($scope.catalogList);
                    $scope.totalList = data.totalList;
                    angular.forEach($scope.catalogList, function (catalog, catalogIndex) {
                    	$scope.gambarDefault = './app/img/default_product.png';
                        if (typeof catalog.catalogImageList === 'undefined' || catalog.catalogImageList == null) {
                            $scope.catalogList[catalogIndex].catalogImageList = [
                                {
                                    imagesRealName: '',
                                    loadFile: $scope.gambarDefault
                                },
                                {
                                    imagesRealName: '',
                                    loadFile: $scope.gambarDefault
                                }
                            ];
                        } else {
                            //untuk menampilkan katalog butuh 2 image
                            if (catalog.catalogImageList.length == 0) {
                                $scope.catalogList[catalogIndex].catalogImageList = [
                                    {
                                        imagesRealName: '',
                                        loadFile: $scope.gambarDefault
                                    },
                                    {
                                        imagesRealName: '',
                                        loadFile: $scope.gambarDefault
                                    }
                                ];
                            } else if (catalog.catalogImageList.length == 1) {
                                
                            	if($scope.catalogList[catalogIndex].catalogImageList[0].imagesRealName == null) {
                            		$scope.catalogList[catalogIndex].catalogImageList[0].loadFile = catalog.catalogImageList[0].imagesFileName;
                            	} else {
                            		$scope.catalogList[catalogIndex].catalogImageList[0].loadFile = RequestService.loadURL(catalog.catalogImageList[0].imagesRealName) + '?_ts=' + new Date().getTime();
                            	}
                            	
                                $scope.catalogList[catalogIndex].catalogImageList[1] = {
                                    imagesRealName: '',
                                    loadFile: $scope.gambarDefault
                                };
                                
                                var temp = $scope.catalogList[catalogIndex].catalogImageList[1];
                                $scope.catalogList[catalogIndex].catalogImageList[1] = $scope.catalogList[catalogIndex].catalogImageList[0];
                                $scope.catalogList[catalogIndex].catalogImageList[0] = temp;

                            } else {
                            	
                            	if($scope.catalogList[catalogIndex].catalogImageList[0].imagesRealName == null) {
                            		$scope.catalogList[catalogIndex].catalogImageList[0].loadFile = catalog.catalogImageList[0].imagesFileName;
                            	} else {
                            		$scope.catalogList[catalogIndex].catalogImageList[0].loadFile = RequestService.loadURL(catalog.catalogImageList[0].imagesRealName) + '?_ts=' + new Date().getTime();
                            	}
                            	
                            	if($scope.catalogList[catalogIndex].catalogImageList[1].imagesRealName == null) {
                            		$scope.catalogList[catalogIndex].catalogImageList[1].loadFile = catalog.catalogImageList[0].imagesFileName;
                            	} else {
                            		$scope.catalogList[catalogIndex].catalogImageList[1].loadFile = RequestService.loadURL(catalog.catalogImageList[0].imagesRealName) + '?_ts=' + new Date().getTime();
                            	}
                            	
                                //$scope.catalogList[catalogIndex].catalogImageList[0].loadFile = RequestService.loadURL(catalog.catalogImageList[0].imagesRealName) + '?_ts=' + new Date().getTime();
                                //$scope.catalogList[catalogIndex].catalogImageList[1].loadFile = RequestService.loadURL(catalog.catalogImageList[1].imagesRealName) + '?_ts=' + new Date().getTime();
                            }
                        }
                        //console.log("cek image : " + JSON.stringify(catalog.catalogImageList));
                    });

                    $scope.angularGridOptions = {
                        gridWidth: 500,
                        refreshOnImgLoad: true
                    }
                    $scope.swap($scope.stateView);

                    $scope.loading = false;

                }, function (err) {
                    console.err(err);
                });

            attSearchInitAll($scope.catalogVendor.category);
        }
        $timeout(function () {
        	
        	if (typeof $rootScope.subcategory !== 'undefined' || $rootScope.subcategory != null) {
                vm.sbText = $rootScope.subcategory.description;
            } else {
                vm.sbText = null;
            }
            $scope.catalogVendor.category = $rootScope.subcategory;
            $scope.catalogVendor.pageSize = 10;
            $scope.catalogVendor.currentPage = 1;
            
            $scope.resetData();
        }, 500);
        
         

        
        $scope.changeCategoryPortal = function(sub1category){
        	$rootScope.subcategory = sub1category;
            $state.go('appportal.catalog');
             
        }
        
        $scope.changeCategory = function (category) {
            if (typeof category !== 'undefined' || category != null) {
                vm.sbText = category.description;
            } else {
                vm.sbText = null;
            }
            $scope.catalogVendor.category = category;
            $scope.catalogVendor.pageSize = 10;
            $scope.catalogVendor.currentPage = 1;
            $scope.resetData();
        }

        $scope.changeAttributeGroup = function () {
            $scope.catalogVendor.attributeGroup = $scope.dataAttGrp;
            $scope.catalogVendor.pageSize = 10;
            $scope.catalogVendor.currentPage = 1;
            $scope.resetData();
        }

        $scope.searchTxt = function () {
            $scope.catalogVendor.pageSize = 10;
            $scope.catalogVendor.currentPage = 1;
            $scope.resetData();
        }

        $scope.checkContract = function () {
            $scope.catalogVendor.pageSize = 10;
            $scope.catalogVendor.currentPage = 1;

            $scope.resetData();
        }

        $scope.checkECatalog = function () {
            console.log($scope.catalogVendor.eCatalog);
            if ($scope.catalogVendor.eCatalog == true) {
                $scope.catalogVendor.userId = RequestService.getUserLogin().user.id;
                $('#prodwrap').addClass("auto-h");
            } else {
                $scope.catalogVendor.userId = undefined;
                $('#prodwrap').removeClass("auto-h");
            }
            $scope.catalogVendor.pageSize = 10;
            $scope.catalogVendor.currentPage = 1;

            $scope.resetData();
        }

        $scope.clickCurrentPage = function (page) {
            $scope.catalogVendor.pageSize = 10;
            $scope.catalogVendor.currentPage = page;
            $scope.resetData();
        };

        $scope.pageSizeChanged = function (jmlData) {
            $scope.catalogVendor.currentPage = 1;
            $scope.catalogVendor.pageSize = jmlData;
            $scope.resetData();
        };

        $scope.changeSort = function () {
            $scope.catalogVendor.pageSize = 10;
            $scope.catalogVendor.currentPage = 1;
            $scope.resetData();
        };



        $scope.findProductCode = function (productCode) {
            var vCatalog = {};
            vCatalog.kodeProduk = productCode + "%";
            RequestService.doPOSTJSON('/catalog/CategoryPortalServices/findAllWithTree', vCatalog)
                .then(function (data) {
                    $scope.catalogByProductCodeList = data;
                });
        }

        $scope.cariAttGrp = function (data) {
            $scope.dataAttGrp = [];
            $scope.lihat = true;

            angular.forEach($scope.attGrpList, function (attGrp) {
                if (attGrp.id == data) {
                    $scope.dataAttGrp = attGrp;
                }
            });
        }

}]);;
'use strict';

/* Controllers */

angular.module('naut').controller('MyCarousel', ['$scope', function($scope) {
    $scope.myInterval = 5000;
    var slides = $scope.slides = [];
    var slideLength = (slides.length)+1;
    $scope.addSlide = function() {
        slides.push({
            image: 'app/img/banner/bg-banner-' + slideLength + '.jpg',
            text: ['Carousel text #0','Carousel text #1','Carousel text #2','Carousel text #3'][slides.length % 4]
        });
    };
    for (var i=1; i<3; i++) {
        $scope.addSlide();
    }
}]);

angular.module('naut').controller('HeaderPageController', ['$scope', '$translate', '$state', function($scope, $translate, $state) {
    $scope.openMenu = function(div) {
        var countShow = $('.pop-up-item[style="display: block;"]').length;
        $('.pop-up-item').not('[id="'+div+'"]').removeAttr('style');
        $('#'+div).toggle(500);
    };
    
    
    
    $scope.country = {};
      $scope.countries = [ // Taken from https://gist.github.com/unceus/6501985
        {name: 'Afghanistan', code: 'AF'},
        {name: 'Åland Islands', code: 'AX'},
        {name: 'Albania', code: 'AL'},
        {name: 'Algeria', code: 'DZ'},
        {name: 'American Samoa', code: 'AS'},
        {name: 'Andorra', code: 'AD'},
        {name: 'Angola', code: 'AO'},
        {name: 'Anguilla', code: 'AI'},
        {name: 'Antarctica', code: 'AQ'},
        {name: 'Antigua and Barbuda', code: 'AG'},
        {name: 'Argentina', code: 'AR'},
        {name: 'Armenia', code: 'AM'},
        {name: 'Aruba', code: 'AW'},
        {name: 'Australia', code: 'AU'},
        {name: 'Austria', code: 'AT'},
        {name: 'Azerbaijan', code: 'AZ'},
        {name: 'Bahamas', code: 'BS'},
        {name: 'Bahrain', code: 'BH'},
        {name: 'Bangladesh', code: 'BD'},
        {name: 'Barbados', code: 'BB'},
        {name: 'Belarus', code: 'BY'},
        {name: 'Belgium', code: 'BE'},
        {name: 'Belize', code: 'BZ'},
        {name: 'Benin', code: 'BJ'},
        {name: 'Bermuda', code: 'BM'},
        {name: 'Bhutan', code: 'BT'},
        {name: 'Bolivia', code: 'BO'},
        {name: 'Bosnia and Herzegovina', code: 'BA'},
        {name: 'Botswana', code: 'BW'},
        {name: 'Bouvet Island', code: 'BV'},
        {name: 'Brazil', code: 'BR'},
        {name: 'British Indian Ocean Territory', code: 'IO'},
        {name: 'Brunei Darussalam', code: 'BN'},
        {name: 'Bulgaria', code: 'BG'},
        {name: 'Burkina Faso', code: 'BF'},
        {name: 'Burundi', code: 'BI'},
        {name: 'Cambodia', code: 'KH'},
        {name: 'Cameroon', code: 'CM'},
        {name: 'Canada', code: 'CA'},
        {name: 'Cape Verde', code: 'CV'},
        {name: 'Cayman Islands', code: 'KY'},
        {name: 'Central African Republic', code: 'CF'},
        {name: 'Chad', code: 'TD'},
        {name: 'Chile', code: 'CL'},
        {name: 'China', code: 'CN'},
        {name: 'Christmas Island', code: 'CX'},
        {name: 'Cocos (Keeling) Islands', code: 'CC'},
        {name: 'Colombia', code: 'CO'},
        {name: 'Comoros', code: 'KM'},
        {name: 'Congo', code: 'CG'},
        {name: 'Congo, The Democratic Republic of the', code: 'CD'},
        {name: 'Cook Islands', code: 'CK'},
        {name: 'Costa Rica', code: 'CR'},
        {name: 'Cote D\'Ivoire', code: 'CI'},
        {name: 'Croatia', code: 'HR'},
        {name: 'Cuba', code: 'CU'},
        {name: 'Cyprus', code: 'CY'},
        {name: 'Czech Republic', code: 'CZ'},
        {name: 'Denmark', code: 'DK'},
        {name: 'Djibouti', code: 'DJ'},
        {name: 'Dominica', code: 'DM'},
        {name: 'Dominican Republic', code: 'DO'},
        {name: 'Ecuador', code: 'EC'},
        {name: 'Egypt', code: 'EG'},
        {name: 'El Salvador', code: 'SV'},
        {name: 'Equatorial Guinea', code: 'GQ'},
        {name: 'Eritrea', code: 'ER'},
        {name: 'Estonia', code: 'EE'},
        {name: 'Ethiopia', code: 'ET'},
        {name: 'Falkland Islands (Malvinas)', code: 'FK'},
        {name: 'Faroe Islands', code: 'FO'},
        {name: 'Fiji', code: 'FJ'},
        {name: 'Finland', code: 'FI'},
        {name: 'France', code: 'FR'},
        {name: 'French Guiana', code: 'GF'},
        {name: 'French Polynesia', code: 'PF'},
        {name: 'French Southern Territories', code: 'TF'},
        {name: 'Gabon', code: 'GA'},
        {name: 'Gambia', code: 'GM'},
        {name: 'Georgia', code: 'GE'},
        {name: 'Germany', code: 'DE'},
        {name: 'Ghana', code: 'GH'},
        {name: 'Gibraltar', code: 'GI'},
        {name: 'Greece', code: 'GR'},
        {name: 'Greenland', code: 'GL'},
        {name: 'Grenada', code: 'GD'},
        {name: 'Guadeloupe', code: 'GP'},
        {name: 'Guam', code: 'GU'},
        {name: 'Guatemala', code: 'GT'},
        {name: 'Guernsey', code: 'GG'},
        {name: 'Guinea', code: 'GN'},
        {name: 'Guinea-Bissau', code: 'GW'},
        {name: 'Guyana', code: 'GY'},
        {name: 'Haiti', code: 'HT'},
        {name: 'Heard Island and Mcdonald Islands', code: 'HM'},
        {name: 'Holy See (Vatican City State)', code: 'VA'},
        {name: 'Honduras', code: 'HN'},
        {name: 'Hong Kong', code: 'HK'},
        {name: 'Hungary', code: 'HU'},
        {name: 'Iceland', code: 'IS'},
        {name: 'India', code: 'IN'},
        {name: 'Indonesia', code: 'ID'},
        {name: 'Iran, Islamic Republic Of', code: 'IR'},
        {name: 'Iraq', code: 'IQ'},
        {name: 'Ireland', code: 'IE'},
        {name: 'Isle of Man', code: 'IM'},
        {name: 'Israel', code: 'IL'},
        {name: 'Italy', code: 'IT'},
        {name: 'Jamaica', code: 'JM'},
        {name: 'Japan', code: 'JP'},
        {name: 'Jersey', code: 'JE'},
        {name: 'Jordan', code: 'JO'},
        {name: 'Kazakhstan', code: 'KZ'},
        {name: 'Kenya', code: 'KE'},
        {name: 'Kiribati', code: 'KI'},
        {name: 'Korea, Democratic People\'s Republic of', code: 'KP'},
        {name: 'Korea, Republic of', code: 'KR'},
        {name: 'Kuwait', code: 'KW'},
        {name: 'Kyrgyzstan', code: 'KG'},
        {name: 'Lao People\'s Democratic Republic', code: 'LA'},
        {name: 'Latvia', code: 'LV'},
        {name: 'Lebanon', code: 'LB'},
        {name: 'Lesotho', code: 'LS'},
        {name: 'Liberia', code: 'LR'},
        {name: 'Libyan Arab Jamahiriya', code: 'LY'},
        {name: 'Liechtenstein', code: 'LI'},
        {name: 'Lithuania', code: 'LT'},
        {name: 'Luxembourg', code: 'LU'},
        {name: 'Macao', code: 'MO'},
        {name: 'Macedonia, The Former Yugoslav Republic of', code: 'MK'},
        {name: 'Madagascar', code: 'MG'},
        {name: 'Malawi', code: 'MW'},
        {name: 'Malaysia', code: 'MY'},
        {name: 'Maldives', code: 'MV'},
        {name: 'Mali', code: 'ML'},
        {name: 'Malta', code: 'MT'},
        {name: 'Marshall Islands', code: 'MH'},
        {name: 'Martinique', code: 'MQ'},
        {name: 'Mauritania', code: 'MR'},
        {name: 'Mauritius', code: 'MU'},
        {name: 'Mayotte', code: 'YT'},
        {name: 'Mexico', code: 'MX'},
        {name: 'Micronesia, Federated States of', code: 'FM'},
        {name: 'Moldova, Republic of', code: 'MD'},
        {name: 'Monaco', code: 'MC'},
        {name: 'Mongolia', code: 'MN'},
        {name: 'Montserrat', code: 'MS'},
        {name: 'Morocco', code: 'MA'},
        {name: 'Mozambique', code: 'MZ'},
        {name: 'Myanmar', code: 'MM'},
        {name: 'Namibia', code: 'NA'},
        {name: 'Nauru', code: 'NR'},
        {name: 'Nepal', code: 'NP'},
        {name: 'Netherlands', code: 'NL'},
        {name: 'Netherlands Antilles', code: 'AN'},
        {name: 'New Caledonia', code: 'NC'},
        {name: 'New Zealand', code: 'NZ'},
        {name: 'Nicaragua', code: 'NI'},
        {name: 'Niger', code: 'NE'},
        {name: 'Nigeria', code: 'NG'},
        {name: 'Niue', code: 'NU'},
        {name: 'Norfolk Island', code: 'NF'},
        {name: 'Northern Mariana Islands', code: 'MP'},
        {name: 'Norway', code: 'NO'},
        {name: 'Oman', code: 'OM'},
        {name: 'Pakistan', code: 'PK'},
        {name: 'Palau', code: 'PW'},
        {name: 'Palestinian Territory, Occupied', code: 'PS'},
        {name: 'Panama', code: 'PA'},
        {name: 'Papua New Guinea', code: 'PG'},
        {name: 'Paraguay', code: 'PY'},
        {name: 'Peru', code: 'PE'},
        {name: 'Philippines', code: 'PH'},
        {name: 'Pitcairn', code: 'PN'},
        {name: 'Poland', code: 'PL'},
        {name: 'Portugal', code: 'PT'},
        {name: 'Puerto Rico', code: 'PR'},
        {name: 'Qatar', code: 'QA'},
        {name: 'Reunion', code: 'RE'},
        {name: 'Romania', code: 'RO'},
        {name: 'Russian Federation', code: 'RU'},
        {name: 'Rwanda', code: 'RW'},
        {name: 'Saint Helena', code: 'SH'},
        {name: 'Saint Kitts and Nevis', code: 'KN'},
        {name: 'Saint Lucia', code: 'LC'},
        {name: 'Saint Pierre and Miquelon', code: 'PM'},
        {name: 'Saint Vincent and the Grenadines', code: 'VC'},
        {name: 'Samoa', code: 'WS'},
        {name: 'San Marino', code: 'SM'},
        {name: 'Sao Tome and Principe', code: 'ST'},
        {name: 'Saudi Arabia', code: 'SA'},
        {name: 'Senegal', code: 'SN'},
        {name: 'Serbia and Montenegro', code: 'CS'},
        {name: 'Seychelles', code: 'SC'},
        {name: 'Sierra Leone', code: 'SL'},
        {name: 'Singapore', code: 'SG'},
        {name: 'Slovakia', code: 'SK'},
        {name: 'Slovenia', code: 'SI'},
        {name: 'Solomon Islands', code: 'SB'},
        {name: 'Somalia', code: 'SO'},
        {name: 'South Africa', code: 'ZA'},
        {name: 'South Georgia and the South Sandwich Islands', code: 'GS'},
        {name: 'Spain', code: 'ES'},
        {name: 'Sri Lanka', code: 'LK'},
        {name: 'Sudan', code: 'SD'},
        {name: 'Suriname', code: 'SR'},
        {name: 'Svalbard and Jan Mayen', code: 'SJ'},
        {name: 'Swaziland', code: 'SZ'},
        {name: 'Sweden', code: 'SE'},
        {name: 'Switzerland', code: 'CH'},
        {name: 'Syrian Arab Republic', code: 'SY'},
        {name: 'Taiwan, Province of China', code: 'TW'},
        {name: 'Tajikistan', code: 'TJ'},
        {name: 'Tanzania, United Republic of', code: 'TZ'},
        {name: 'Thailand', code: 'TH'},
        {name: 'Timor-Leste', code: 'TL'},
        {name: 'Togo', code: 'TG'},
        {name: 'Tokelau', code: 'TK'},
        {name: 'Tonga', code: 'TO'},
        {name: 'Trinidad and Tobago', code: 'TT'},
        {name: 'Tunisia', code: 'TN'},
        {name: 'Turkey', code: 'TR'},
        {name: 'Turkmenistan', code: 'TM'},
        {name: 'Turks and Caicos Islands', code: 'TC'},
        {name: 'Tuvalu', code: 'TV'},
        {name: 'Uganda', code: 'UG'},
        {name: 'Ukraine', code: 'UA'},
        {name: 'United Arab Emirates', code: 'AE'},
        {name: 'United Kingdom', code: 'GB'},
        {name: 'United States', code: 'US'},
        {name: 'United States Minor Outlying Islands', code: 'UM'},
        {name: 'Uruguay', code: 'UY'},
        {name: 'Uzbekistan', code: 'UZ'},
        {name: 'Vanuatu', code: 'VU'},
        {name: 'Venezuela', code: 'VE'},
        {name: 'Vietnam', code: 'VN'},
        {name: 'Virgin Islands, British', code: 'VG'},
        {name: 'Virgin Islands, U.S.', code: 'VI'},
        {name: 'Wallis and Futuna', code: 'WF'},
        {name: 'Western Sahara', code: 'EH'},
        {name: 'Yemen', code: 'YE'},
        {name: 'Zambia', code: 'ZM'},
        {name: 'Zimbabwe', code: 'ZW'}
      ];

    // angular translate
    $scope.lang = { isopen: false };
    $scope.langs = {en:'English', id:'Bahasa Indonesia'};
    $scope.selectLang = $scope.langs[$translate.proposedLanguage()] || "English";
    $scope.setLang = function(langKey, $event) {
            // set the current lang
            $scope.selectLang = $scope.langs[langKey];
            // You can change the language during runtime
            $translate.use(langKey);
            $scope.lang.isopen = !$scope.lang.isopen;
    };
    
    
    $scope.companyType = {};
    $scope.companyTypeList = [
        { id: 1, text: "PT" },
        { id: 2, text: "CV" },
        { id: 3, text: "UD" }
    ];
    
}]);


//    var swapViews = angular.module('grid-list', ['angularGrid']);
angular.module('naut').controller('swapView', ['$scope', '$http', function($scope, $http) {
    $scope.angularGridOptions = {
        gridWidth : 500,
        refreshOnImgLoad : false
    }
    $scope.searchTxt = function(){
        console.log($scope.searchBox);
    }

    $http({
        method:'GET',
        url:'server/company.json'
    }).success(function(data){
        $scope.pics = data;
    });
    
    $scope.swap = function(div) {
        if(div == 'list'){
            $('#grid-view').removeClass('selected');
            $('#list-view').addClass('selected');
            $('.product-layout').removeClass('product-grid');
            $('.product-layout').addClass('product-list');
            $scope.angularGridOptions = {
                gridWidth : 500
            }
        }
        else{
            $('#grid-view').addClass('selected');
            $('#list-view').removeClass('selected');
            $('.product-layout').removeClass('product-list');
            $('.product-layout').addClass('product-grid');
            $scope.angularGridOptions = {
                gridWidth : 250
            }
        }

    }


    $scope.totalItems = 64;
    $scope.currentPage = 4;

    $scope.setPage = function (pageNo) {
      $scope.currentPage = pageNo;
    };

    $scope.pageChanged = function() {
      $log.info('Page changed to: ' + $scope.currentPage);
    };

    $scope.maxSize = 5;
    $scope.bigTotalItems = 175;
    $scope.bigCurrentPage = 1;
}]);

angular.module('naut').controller('HeaderNavController', ['$scope', '$modal', function($scope, $modal){

    $scope.ConfirmAlert = function () {
        var modalInstance = $modal.open({
            templateUrl: 'loginform.html',
            controller: 'LoginController as form',
            resolve: {
                items: function () {

                }
            }
        });

        modalInstance.result.then(function () {
//            $scope.panelDashboard[isShow].isShow = true;
        });

    };
       
    $scope.headerMenuCollapsed = true;

    $scope.toggleHeaderMenu = function () {
            $scope.headerMenuCollapsed = !$scope.headerMenuCollapsed;
    };
    

}]);

angular.module('naut').controller('ModalInstanceCtrl', ['$scope', '$modalInstance', 'items', function($scope, $modalInstance, items) {

    $scope.ok = function () {
        $modalInstance.close();
    };

    $scope.cancel = function () {
        $modalInstance.dismiss('cancel');
    };
}]);


angular.module('naut').controller('MyRating', ['$scope', function($scope) {
    $scope.rate = 1;
    $scope.max = 5;
    $scope.isReadonly = false;

    $scope.hoveringOver = function(value) {
      $scope.overStar = value;
      $scope.percent = 100 * (value / $scope.max);
    };
}]);


angular.module('naut').controller('DatepickerDemoCtrl', ['$scope', function($scope) {
    $scope.today = function() {
      $scope.dt = new Date();
    };
    $scope.today();

    $scope.clear = function () {
      $scope.dt = null;
    };

    // Disable weekend selection
    $scope.disabled = function(date, mode) {
      return ( mode === 'day' && ( date.getDay() === 0 || date.getDay() === 6 ) );
    };

    $scope.toggleMin = function() {
      $scope.minDate = $scope.minDate ? null : new Date();
    };
    $scope.toggleMin();

    $scope.open = function($event) {
      $event.preventDefault();
      $event.stopPropagation();

      $scope.opened = true;
    };

    $scope.dateOptions = {
      formatYear: 'yy',
      startingDay: 1,
      class: 'datepicker'
    };

    $scope.initDate = new Date('2016-15-20');
    $scope.formats = ['dd-MMMM-yyyy', 'yyyy/MM/dd', 'dd.MM.yyyy', 'shortDate'];
    $scope.format = $scope.formats[0];
}]);

angular.module('naut').controller('TimepickerDemoCtrl', ['$scope', function($scope) {
    $scope.mytime = new Date();

    $scope.hstep = 1;
    $scope.mstep = 15;

    $scope.options = {
      hstep: [1, 2, 3],
      mstep: [1, 5, 10, 15, 25, 30]
    };

    $scope.ismeridian = true;
    $scope.toggleMode = function() {
      $scope.ismeridian = ! $scope.ismeridian;
    };

    $scope.update = function() {
      var d = new Date();
      d.setHours( 14 );
      d.setMinutes( 0 );
      $scope.mytime = d;
    };

    $scope.changed = function () {
      //console.log('Time changed to: ' + $scope.mytime);
    };

    $scope.clear = function() {
      $scope.mytime = null;
    };
}]);
angular.module('naut').controller('delCtrl', ['$scope', '$modal', function($scope, $modal) {
    $scope.ConfirmAlert = function () {
        var modalInstance = $modal.open({
            templateUrl: 'delConfirm.html',
            controller: 'ModalInstanceCtrl',
            resolve: {
                items: function () {

                }
            }
        });

        modalInstance.result.then(function () {
//            $scope.panelDashboard[isShow].isShow = true;
        });

    };
}]);

angular.module('naut').controller('ConfirmationDialogController', ['$scope', '$modalInstance', function($scope, $modalInstance) {
    $scope.ok = function () {
        $modalInstance.close();
    };

    $scope.cancel = function () {
        $modalInstance.dismiss('cancel');
    };
}]);

angular.module('naut').controller('TabPengumumanController', ['$scope', 'RequestService', function($scope, RequestService) {
      var targetURL = "/Services/Process/PengumumanPengadaanServices/getPengumumanPengadaanList";
      RequestService.requestServerNew(targetURL, {})
      .then(function(data){
          $scope.pengumumanList = data.data;
      });
}]);

angular.module('naut').controller('chartCtrl', ['$scope', function($scope) {
    $scope.items = [
        { label: "Jasa", data: 45 },
        { label: "Peralatan & Suku Cadang", data: 25 },
        { label: "Bahan Baku", data: 10 },
        { label: "Hasil Pengelolaan", data: 20 }
    ];
}]);

angular.module('naut').controller('ImgZoomCtrl', ['$scope', '$location', function ($scope, $location) {
    $scope.imagesForGallery = [];
    $scope.setApproot = function(appRoot) {
        //only change when needed.
        if ($scope.approot && appRoot === $scope.approot) {
            return;
        }
        $scope.approot = appRoot;
        $scope.imagesForGallery = [
            {
                thumb: 'app/img/product/garing-garuda.jpg',
                small: 'app/img/product/garing-garuda.jpg',
                large: 'app/img/product/garing-garuda.jpg'
            },
            {
                thumb: 'app/img/product/garuda-roasted-flavored.png',
                small: 'app/img/product/garuda-roasted-flavored.png',
                large: 'app/img/product/garuda-roasted-flavored.png'
            },
            {
                thumb: 'app/img/product/kacang-kulit.jpg',
                small: 'app/img/product/kacang-kulit.jpg',
                large: 'app/img/product/kacang-kulit.jpg'
            }
        ];


        $scope.zoomModelGallery01 = $scope.imagesForGallery[0];
    };

    //default
    $scope.setApproot('');

    $scope.zoomOptions = {
        lensShape: 'round',

        cursor: 'crosshair',
        galleryActiveClass: "active",
        loadingIcon: true
    };

    $scope.setActiveImageInGallery = function (prop, img) {
        $scope[prop] = img;
    };
}]);

angular.module('naut').controller('RangeSliderCtrl', ['$scope', function($scope) {
   //START RANGE SLIDER CTRL//
        $scope.scopes = [];
        $scope.value = 0;
        $scope.values = {
            low: 0,
            high: 999999
        };

        $scope.scale = function (value) {
            return Math.pow(value, 3);
        };
        $scope.inverseScale = function (value) {
            var sign = value == 0 ? 1 : (value / Math.abs(value));
            return sign * Math.pow(Math.abs(value), 1 / 3);
        };


        $scope.translate = function (value) {
            return value;
        };

        $scope.translateCombined = function (low, high) {
            return $scope.translate(low.toFixed($scope.precision)) + " *** " + $scope.translate(high.toFixed($scope.precision));
        };

        $scope.translateRange = function (low, high) {
            return $scope.translate((high - low).toFixed($scope.precision));
        };

        $scope.$broadcast('refreshSlider');
        //END RANGE SLIDER CTRL//
}]);


angular.module('naut').controller('sidebarselectcategoriesCtrl', ['$scope', '$state', function($scope, $state) {
    $scope.categories = 0;
    $scope.changeCategories = function(selected){
        if (selected == 2) {
            $state.go('app.categoryMain');
        };
    };
}]);

angular.module('naut').controller('footerCtrl', ['$scope', '$state', function($scope, $state){
    $scope.compareWin = false;
//    $scope.openCompare = function(){
//        $scope.compareWin = true;
//    }
}]);;
//product_controller.js

'use strict';

/* Controllers */

angular
    .module('naut')
    .controller('productCtrl', ['$scope', 'RequestService', '$state', '$stateParams', 'ModalService', 'ROLE_USER', '$modal', '$rootScope', '$timeout', function ($scope, RequestService, $state, $stateParams, ModalService, ROLE_USER, $modal, $rootScope, $timeout) {
    	
    	if ($stateParams.dataCatalog != undefined) {
            $scope.catalog = $stateParams.dataCatalog;
            $rootScope.dataVendor = $stateParams.dataCatalog;
            //var thisRoleUser = RequestService.getRoleUser().nama;
            $scope.commentSize = 0;
            $scope.jumlahTerjual = 0;
            $scope.okForComment = false;
            /*if (thisRoleUser == ROLE_USER['SATU'] || thisRoleUser == ROLE_USER['DUA']) { // Lihat Constant.js
                $scope.okForComment = true;
            }*/
        }
    	
    	$scope.backToCatalogList = function () {
    		$state.go('appportal.catalog');
    	}


        var emptyComment = function () {
            $scope.dataRating = {
                rating: 0,
                ratingComment: '',
                catalogId: $scope.catalog.id,
              //  userId: RequestService.getUserLogin().user.id
            }
        }

        $scope.hitungLamaBerdiri = function (tgl) {
            var date = new Date(tgl);
            var ageDifMs = Date.now() - date.getTime();
            var ageDate = new Date(ageDifMs);
            return Math.abs(ageDate.getUTCFullYear() - 1970);
        }

        $scope.catalogCommentList = [];
        var catalogCommentList = function () {
            var params = {
                catalogId: $scope.catalog.id
            }
            RequestService.doPOST('/catalog/CatalogServices/findCatalogCommentByCatalog', params)
                .then(function (data) {
                    var dataCC = data.data;
                    if (dataCC != undefined) {
                        $scope.catalogCommentList = dataCC;
                        $scope.commentSize = dataCC.length;
                    }
                });
        }

        $scope.imagesForGallery = [];
        $scope.setApproot = function (appRoot) {
            //only change when needed.
            if ($scope.approot && appRoot === $scope.approot) {
                return;
            }
            $scope.approot = appRoot;
            console.log(appRoot);
            if ($scope.catalog.catalogImageList != undefined && $scope.catalog.catalogImageList[0] != undefined) {
            	var imagesFile;
            	if($scope.catalog.catalogImageList[0].imagesRealName == null) {
            		imagesFile = $scope.catalog.catalogImageList[0].imagesFileName;
            	} else {
            		imagesFile = RequestService.loadURL($scope.catalog.catalogImageList[0].imagesRealName);
            	}

                var dataImage = {
                    thumb: imagesFile,
                    small: imagesFile,
                    large: imagesFile
                };
                $scope.imagesForGallery.push(dataImage);
            }
            if ($scope.catalog.catalogImageList != undefined && $scope.catalog.catalogImageList[1] != undefined) {
	
            	var imagesFile1;
            	if($scope.catalog.catalogImageList[1].imagesRealName == null) {
            		imagesFile1 = $scope.catalog.catalogImageList[1].imagesFileName;
            	} else {
            		imagesFile1 = RequestService.loadURL($scope.catalog.catalogImageList[1].imagesRealName);
            	}
            	
                var dataImage = {
                    thumb: imagesFile1,
                    small: imagesFile1,
                    large: imagesFile1
                };
                $scope.imagesForGallery.push(dataImage);
            }
            if ($scope.catalog.catalogImageList != undefined && $scope.catalog.catalogImageList[2] != undefined) {
            	
            	var imagesFile2;
            	if($scope.catalog.catalogImageList[2].imagesRealName == null) {
            		imagesFile2 = $scope.catalog.catalogImageList[2].imagesFileName;
            	} else {
            		imagesFile2 = RequestService.loadURL($scope.catalog.catalogImageList[2].imagesRealName);
            	}
            	
                var dataImage = {
                    thumb: imagesFile2,
                    small: imagesFile2,
                    large: imagesFile2
                };
                $scope.imagesForGallery.push(dataImage);
            }
            //console.log($scope.imagesForGallery);

            angular.forEach($scope.catalog.catalogKontrakList, function (ck) {
                $scope.jumlahTerjual = +ck.stock;
            })

            $scope.zoomModelGallery01 = $scope.imagesForGallery[0];
            catalogList($scope.catalog.vendor.id);
            catalogCommentList();
            emptyComment();
        };


        $scope.defaultImgProduct = './app/img/default_product.png';
        var catalogList = function (id) {
            var catalogVendor = {
                pageSize: 10,
                currentPage: 1,
                attributeGroup: $scope.catalog.attributeGroup
            };

            RequestService.doPOSTJSON('/catalog/CatalogServices/findECatalog', catalogVendor)
                .then(function (data) {
                    $scope.catalogList = [];
                    $scope.panjangData = 5;
                    angular.forEach(data.catalogList, function (hasil) {
                        if (hasil.id != $scope.catalog.id) {
                            $scope.catalogList.push(hasil);
                        }
                    })
                    $scope.totalList = data.totalList;

                    angular.forEach($scope.catalogList, function (catalog) {
                        if (typeof catalog.catalogImageList !== 'undefined' && catalog.catalogImageList != null) {
                            if (typeof catalog.catalogImageList[0] !== 'undefined' && catalog.catalogImageList[0] != null) {
                            	if(catalog.catalogImageList[0].imagesRealName == null || catalog.catalogImageList[0].imagesRealName == 'undefined') {
                            		 catalog.catalogImageList[0].loadFile = catalog.catalogImageList[0].imagesFileName;
                            	} else {
                            		 catalog.catalogImageList[0].loadFile = RequestService.loadURL(catalog.catalogImageList[0].imagesRealName) + '?_ts=' + new Date().getTime();
                            	}

                            } else {
                                catalog.catalogImageList[0].loadFile = $scope.defaultImgProduct;
                            }
                        } else {
                            catalog.catalogImageList = [
                                {
                                    loadFile : $scope.defaultImgProduct
                                }
                            ];
                        }
                    });
                    $scope.angularGridOptions = {
                        gridWidth: 500,
                        refreshOnImgLoad: true
                    }

                    if ($scope.catalogList.length > 0) {
                        if ($scope.catalogList.length < 5) {
                            $scope.panjangData = $scope.catalogList.length;
                        }
                    }
                });
        }

        //default
        $scope.setApproot('');

        $scope.zoomOptions = {
            lensShape: 'round',
            cursor: 'crosshair',
            galleryActiveClass: "active",
            loadingIcon: true
        };

        $scope.setActiveImageInGallery = function (prop, img) {
            $scope[prop] = img;
        };

        $scope.saveRating = function (dataRating) {
            RequestService.doPOST('/catalog/CatalogServices/simpanCatalogComment', dataRating)
                .then(function (dataCC) {
                    if (dataCC != undefined) {
                        RequestService.doPOST('/catalog/CatalogServices/simpanRating', dataRating)
                            .then(function (data) {
                                if (data.data != undefined) {
                                    var catalog = data.data;
                                    ModalService.showModalInformation('Rating telah tersimpan dengan Baik');
                                    setelahSimpan(catalog);
                                }
                            });
                    }
                });
        }   
        
        $scope.tulisComment = function () {
        	console.log('masuk sini');
            $scope.writeComment = true;
        }

        var setelahSimpan = function (catalog) {
            if (catalog.catalogImageList != undefined && catalog.catalogImageList[0] != undefined) {
                catalog.catalogImageList[0].loadFile = RequestService.loadURL(catalog.catalogImageList[0].imagesRealName) + '?_ts=' + new Date().getTime();
            }
            if (catalog.catalogImageList != undefined && catalog.catalogImageList[1] != undefined) {
                catalog.catalogImageList[1].loadFile = RequestService.loadURL(catalog.catalogImageList[1].imagesRealName) + '?_ts=' + new Date().getTime();
            }

            $state.go('appportal.productDetail', {
                dataCatalog: catalog
            });
        }

       /* $scope.mailTo = function (email) {
            var mailmodalinstance = $modal.open({
                templateUrl: '/mail.compose.html',
                controller: 'mailComposeModalController',
                resolve: {
                    email: function () {
                        return email;
                    }
                }
            });
            //    	$state.go('app.promise.mailbox', {email: email});
        }*/
}]);

angular.module('naut')
    .controller('mailComposeModalController', ['$rootScope', '$scope', '$modalInstance', 'email', 'RequestService', 'ModalService', function ($rootScope, $scope, $modalInstance, email, RequestService, ModalService) {
        $scope.emailTujuan = email;
        $scope.emailIsiError = false;
        $scope.mailCC = false;
        $scope.emailIsi = "<p></p><p></p><br/><p>Regards,</p>" +
            "<p><br/>" + RequestService.getUserLogin().user.namaPengguna + " <br/>" +
            "<i><u>" + RequestService.getUserLogin().user.email + "</u></i></p>";

        $scope.btnKirim = function () {
            if ($scope.emailIsi == undefined || $scope.emailIsi == "") {
                $scope.emailIsiError = true;
                document.getElementsByName("emailIsi")[0].focus();
            }

            if (!$scope.emailIsiError) {
                var params = {
                    emailTujuan: $scope.emailTujuan,
                    emailSubject: $scope.emailSubject,
                    emailIsi: $scope.emailIsi,
                    emailFrom: RequestService.getUserLogin().user.email
                }

                if ($scope.emailCC) {
                    params.emailCC = $scope.emailCC;
                }

                RequestService.doPOST('/catalog/CatalogServices/sendingEmail', params)
                    .then(function (data) {
                        console.info(data);
                        if (data.statusText == "OK") {
                            ModalService.showModalInformation('Email dalam pengiriman');
                            $scope.btnBatal();
                        } else {
                            ModalService.showModalInformation('Gagal mengirim Email, alamat Tujuan SALAH!');
                        }
                    });
            }
        }

        $scope.btnBatal = function () {
            $modalInstance.dismiss('cancel');
        }
    }]);;
/**=========================================================
 * Module: MailboxController.js
 * Mailbox APP controllers
 =========================================================*/
/*jshint -W069*/
(function() {
    'use strict';

    angular
        .module('naut')
        .controller('MailboxController', MailboxController)
        .controller('MailboxFolderController', MailboxFolderController)
        .controller('MailboxViewController', MailboxViewController)
    	.controller('MailboxCompaseController', MailboxCompaseController);
    
    function MailboxController($rootScope, $scope, $state, $stateParams) {
    
      $scope.email = $stateParams.email;
      // For mail compose
      $scope.mail = {
        cc: false,
        bcc: false
      };

      $scope.folderName = '';
      // Mailbox editr initial content
      $scope.content = '<p>Type something..</p>';
      
      // Manage collapsed folders nav
      $scope.mailboxMenuCollapsed = true;
      $scope.$on('$stateChangeStart',
        function(event, toState, toParams, fromState, fromParams){
          closeFolderNav();
        });

      $scope.$on('closeFolderNav', closeFolderNav);

      function closeFolderNav() {
        $scope.mailboxMenuCollapsed = true;
      }

      $scope.mailboxFolders = [
        { name: 'inbox',  count: 3,  icon: 'fa-inbox' },
        { name: 'sent',   count: 8,  icon: 'fa-paper-plane-o' },
        { name: 'draft',  count: 1,  icon: 'fa-edit' },
        { name: 'trash',  count: 12, icon: 'fa-trash-o' }
      ];

      // Define mails at parent scope to use as cache for mail request
      $scope.mails = [];
      
      $scope.composeMail = function() {
    	  $state.go('app.promise.mailbox.compose', {email: $scope.email});
      }

    }
    MailboxController.$inject = ['$rootScope', '$scope', '$state', '$stateParams'];

    function MailboxFolderController($scope, $stateParams, $state, MEDIA_QUERY, $window, $timeout) {

      var $win = angular.element($window);
      
      $scope.mailPanelOpened = false;

      // Load mails in folder
      // ----------------------------------- 

      // store the current folder
      $scope.folder = $stateParams.folder || 'inbox';
      $scope.$parent.$parent.folderName = $scope.folder;
      
      // If folder wasn't loaded yet, request mails using api
      if( ! $scope.mails[$scope.folder] ) {
        
        // Replace this code with a request to your mails API
        // It expects to receive the following object format

        // only populate inbox for demo
        $scope.mails['inbox'] = [
          {
            id: 0,
            subject: 'Morbi dapibus sollicitudin',
            excerpt: 'Nunc et magna in metus pharetra ultricies ac sit amet justo. ',
            time: '09:30 am',
            from: {
              name: 'Sass Rose',
              email: 'mail@example.com',
              avatar: 'app/img/user/01.jpg'
            },
            unread: false
          }
        ];
        // Generate some random user mails
        var azarnames = ['Floyd Kennedy','Brent Woods', 'June Simpson', 'Wanda Ward', 'Travis Hunt'];
        var azarnsubj = ['Nam sodales sollicitudin adipiscing. ','Cras fermentum posuere quam, sed iaculis justo rutrum at. ', 'Vivamus tempus vehicula facilisis. '];
        for(var i =0; i < 10; i++) {
          var m = angular.copy($scope.mails['inbox'][0]);
          m.from.name = azarnames[(Math.floor((Math.random() * (azarnames.length) )))];
          m.from.email = m.from.name.toLowerCase().replace(' ', '') + '@example.com';
          m.subject = azarnsubj[(Math.floor((Math.random() * (azarnsubj.length) )))];
          m.from.avatar = 'app/img/user/0'+(Math.floor((Math.random() * 8))+1)+'.jpg';
          m.time = moment().subtract(i,'hours').format('hh:mm a');
          m.id = i + 1;
          $scope.mails['inbox'].push(m);
        }
        $scope.mails['inbox'][0].unread=true;
        $scope.mails['inbox'][1].unread=true;
        $scope.mails['inbox'][2].unread=true;
        // end random mail generation
        
        $scope.mails['sent'] = [];
        $scope.mails['sent'].push(angular.copy($scope.mails['inbox'][0]));
        $scope.mails['sent'].push(angular.copy($scope.mails['inbox'][1]));
        $scope.mails['sent'].push(angular.copy($scope.mails['inbox'][2]));
        $scope.mails['sent'].push(angular.copy($scope.mails['inbox'][3]));
      }

      // requested folder mails to display in the view
      $scope.mailList = $scope.mails[$scope.folder];

      // Show and hide mail content
      // ----------------------------------- 
      $scope.openMail = function(id) {
        // toggle mail open state
        toggleMailPanel(true);
        // load the mail into the view
        $state.go('app.promise.mailbox.folder.list.view', {id: id});
        // close the folder (when collapsed)
        $scope.$emit('closeFolderNav');
        // mark mail as read
        $timeout(function() {
          $scope.mailList[id].unread = false;
        }, 1000);
      };

      $scope.backToFolder = function() {
        toggleMailPanel(false);
        $scope.$emit('closeFolderNav');
      };

      // enable the open state to slide the mails panel 
      // when on table devices and below
      function toggleMailPanel(state) {
        if ( $win.width() < MEDIA_QUERY['desktopLG'] )
          $scope.mailPanelOpened = state;
      }

    }
    MailboxFolderController.$inject = ['$scope', '$stateParams', '$state', 'MEDIA_QUERY', '$window', '$timeout'];

    function MailboxViewController($scope, $stateParams, $state) {

      // move the current viewing mail data to the inner view scope
      $scope.viewMail = $scope.mailList[$stateParams.id];

    }
    MailboxViewController.$inject = ['$scope', '$stateParams', '$state'];
    
    function MailboxCompaseController($rootScope, $scope, $state, $stateParams) {
    	$scope.emailTujuan = $stateParams.email;
    }
    MailboxCompaseController.$inject = ['$scope', '$stateParams', '$state'];
     
})();
;
/**
 * ========================================================= Module:
 * PortalController Author: Reinhard
 * =========================================================
 */
/*(function() {*/
	'use strict';
    
	angular.module('naut')

	.controller('PortalController', [ '$scope', '$http', 'colors', '$rootScope','$resource', '$location', 'DTOptionsBuilder', 'DTColumnDefBuilder', '$sce',

	function ($scope, $http, colors, $rootScope, $resource, $location, DTOptionsBuilder, DTColumnDefBuilder, $sce) {
		var form = this;
		form.loading = true;
        form.currentPage = "home";
    	
        form.transInCss = "pt-page-current pt-page-flipInBottom pt-page-delay300";
        form.transOutCss = "pt-page-current pt-page-flipOutTop";
        
		// Datepicker
		form.formats = [ 'dd-MMMM-yyyy', 'yyyy/MM/dd', 'dd.MM.yyyy','shortDate', 'dd-MM-yyyy' ];
		form.format = form.formats[4];
		form.dtOptions = DTOptionsBuilder.newOptions().withOption('bFilter',false).withOption('bLengthChange', false);
		form.dtBeritaOptions = DTOptionsBuilder.newOptions().withOption('bFilter',false).withOption('bLengthChange', false);

		
		// Pengumuman list
		form.pengumumanList = [ {}, {}, {}, {} ];

		// Pengadaan Form
		form.pengadaanKeyword = null;
		form.pengadaanTanggalFrom = null;
		form.pengadaanTanggalTo = null;
		form.pengadaanOrganisasi = {"id":0};

		form.pengadaanTanggalFromOpen = function($event) {
			$event.preventDefault();
			$event.stopPropagation();
			form.pengadaanTanggalFromOpened = true;
			form.pengadaanTanggalToOpened = false;
			form.beritaTanggalToOpened = false;
		};

		form.pengadaanTanggalToOpen = function($event) {
			$event.preventDefault();
			$event.stopPropagation();
			form.pengadaanTanggalToOpened = true;
			form.pengadaanTanggalFromOpened = false;
			form.beritaTanggalToOpened = false;
		};

		$scope.pengadaanSearch = function() {
			search(1, form.pengadaanOrganisasi, form.pengadaanTanggalFrom, form.pengadaanTanggalTo, form.pengadaanKeyword);
		}

		// Hasil Pengadaan Form
		form.hasilPengadaanKeyword = null;
		form.hasilPengadaanTanggalFrom = null;
		form.hasilPengadaanTanggalTo = null;
		form.hasilPengadaanOrganisasi = {"id":0};

		form.hasilPengadaanTanggalFromOpen = function($event) {
			$event.preventDefault();
			$event.stopPropagation();
			form.hasilPengadaanTanggalFromOpened = true;
		};

		form.hasilPengadaanTanggalToOpen = function($event) {
			$event.preventDefault();
			$event.stopPropagation();
			form.hasilPengadaanTanggalToOpened = true;
		};
		
		$scope.hasilPengadaanSearch = function() {
			search(2, form.hasilPengadaanOrganisasi, form.hasilPengadaanTanggalFrom, form.hasilPengadaanTanggalTo, form.hasilPengadaanKeyword);
		}
		
		// Berita Form
		form.beritaKeyword = null;
		form.beritaTanggalFrom = null;
		form.beritaTanggalTo = null;
		form.beritaOrganisasi = {"id":0};

		form.beritaTanggalFromOpen = function($event) {
			$event.preventDefault();
			$event.stopPropagation();
			form.beritaTanggalFromOpened = true;
			form.beritaTanggalToOpened = false;
			form.pengadaanTanggalFromOpened = false;
			form.pengadaanTanggalToOpened = false;
		};

		form.beritaTanggalToOpen = function($event) {
			$event.preventDefault();
			$event.stopPropagation();
			form.beritaTanggalToOpened = true;
			form.pengadaanTanggalFromOpened = false;
			form.pengadaanTanggalToOpened = false;
			form.beritaTanggalFromOpened = false;
		};
	
		$scope.beritaSearch = function() {
			search(3, form.beritaOrganisasi, form.beritaTanggalFrom, form.beritaTanggalTo, form.beritaKeyword);
		}
		
		//------------------------------------- ACTION BUTTON ------------------
		
		$scope.gotoHome = function() {
			if (form.currentPage != "home")
				{
				    form.homeCss = form.transInCss;
					if (form.currentPage == "about")
						{
							form.aboutCss = form.transOutCss;
						}
					else if (form.currentPage == "contact")
						{
						
							form.contactCss = form.transOutCss;
						}
					form.currentPage = "home";
				}
			
		}
		
		$scope.gotoAbout = function() {
			if (form.currentPage != "about")
			{
			    form.aboutCss = form.transInCss;
				if (form.currentPage == "home")
					{
						form.homeCss = form.transOutCss;
					}
				else if (form.currentPage == "contact")
					{
					
						form.contactCss = form.transOutCss;
					}
				form.currentPage = "about";
			}
		}
		
		$scope.gotoContact = function() {
			if (form.currentPage != "contact")
			{
			    form.contactCss = form.transInCss;
				if (form.currentPage == "home")
					{
						form.homeCss = form.transOutCss;
					}
				else if (form.currentPage == "about")
					{
					
						form.aboutCss = form.transOutCss;
					}
				form.currentPage = "contact";
			}
		}
		
		$scope.gotoLogin = function() {
			  $location.path('/page/promiselogin');
		}
		
		$scope.detilPengadaan = function(obj) {
			
			showDetil(1, obj);
		}
		
		$scope.detilHasil = function(obj) {
			showDetil(2, obj);
		}
		
		$scope.detilBerita = function(obj) {
			
			showDetil(3, obj);
		}
		
		$scope.closeDetil = function() {
			
			form.showDetil = false;
		}
		
		function showDetil(tipe, obj)
		{
			
			form.detil = obj;
			form.detilTipe = tipe;
			
		   	if (tipe == 1)
		   		{
		   		  form.detilTitle="Pengumuman Pengadaan";
		   		}
		   	else if ( tipe == 2 )
		   		{
		   		  form.detilTitle="Pengumuman Hasil Pengadaan";
		   		}
		   	else if ( tipe == 3 )
	   		{
		   		form.htmlBerita =  $sce.trustAsHtml(form.detil.isiPengumuman);
		   		form.detilTitle="Berita";
	   		}
	   	
		   	form.showDetil = true;
		}
	
		
		// --------------------------------------------- BEGIN --------------------------------------------- 
		
		$http.get($rootScope.backendAddress+ '/procurement/master/OrganisasiServices/getOrganisasiListByParentId/0',
						{
							/*ignoreLoadingBar : true*/
						}).success(
						function(data, status, headers, config) {
							form.organisasiList = [{"id":0, "nama": "Semua Unit"}]
							form.organisasiList = form.organisasiList.concat(data);
							
			            	search(1, form.hasilPengadaanOrganisasi, form.hasilPengadaanTanggalFrom, form.hasilPengadaanTanggalTo, form.hasilPengadaanKeyword);
			            	search(2, form.hasilPengadaanOrganisasi, form.hasilPengadaanTanggalFrom, form.hasilPengadaanTanggalTo, form.hasilPengadaanKeyword);
			            	search(3, form.hasilPengadaanOrganisasi, form.hasilPengadaanTanggalFrom, form.hasilPengadaanTanggalTo, form.hasilPengadaanKeyword);
						
						}).error(function(data, status, headers, config) {

				});
		
		// --------------------------------------------- END --------------------------------------------- 

		
		
		
		function search(tipeId, organisasi, tglMulai, tglSelesai, keyword) {

			var postData = {
				"tipeId" : tipeId,
			}

			if (organisasi != null && organisasi.id != 0 ) {
				postData.organisasiId = organisasi.id;
			}

			if (tglMulai != null) {
				var d = new Date(tglMulai);
				var year = d.getFullYear();
				var month = d.getMonth() + 1; // beware: January = 0; February
				// = 1, etc.
				var day = d.getDate();
				postData.tglMulai = day + '-' + month + '-' + year;
			}

			if (tglSelesai != null) {
				var d = new Date(tglSelesai);
				var year = d.getFullYear();
				var month = d.getMonth() + 1; // beware: January = 0; February
				// = 1, etc.
				var day = d.getDate();
				postData.tglSelesai = day + '-' + month + '-' + year;
			}

			if (keyword != null) {
				postData.keyword = keyword.trim();
			}

			$http( {
						method : 'POST',
						url : $rootScope.backendAddress	+ '/procurement/inisialisasi/PengumumanPengadaanServices/getPengumumanPengadaanListForSearch',
						headers : {
							'Content-Type' : 'application/x-www-form-urlencoded'
						},
						transformRequest : function(obj) {
							var str = [];
							for ( var p in obj)
								str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
							return str.join("&");
						},
						data : postData
					}).success(function(data, status, headers, config) {

				form.pengumumanList[tipeId] = data;
				form.loading = false;
			})
		//}
		
	}

	//PortalController.$inject = [ '$scope', '$http', 'colors', '$rootScope','$resource', '$location', 'DTOptionsBuilder', 'DTColumnDefBuilder', '$sce'];

//})();
}]);;
/**=========================================================
 * Module: PortalCarouselController
 =========================================================*/
(function() {
    'use strict';

    angular
        .module('naut')
        .controller('PortalCarouselController', PortalCarouselController);
    
    function PortalCarouselController($scope) {

      $scope.myInterval = 5000;
      var slides = $scope.slides = [];

      $scope.addSlide = function(index) {
        var newWidth = 1677 + slides.length;
        index = index || (Math.floor((Math.random() * 2))+1);
        slides.push({
        	image:  'app/img/portal/slide/bg' + index + '.jpg',
            text:   '<h2 class="italic">IPC E-Procurement</h2>\n\
                    <p class="m-t">IPC E-Procurement adalah sistem aplikasi berbasis web yang menyediakan berbagai kemudahan serta informasi \n\
                    dalam kaitannya dengan Proses Pengadaan Barang/Jasa di lingkungan PT Pelabuhan Indonesia II ( Persero ).\n\
                    Sistem aplikasi ini dibangun guna meningkatkan efisiensi dan efektivitas pengadaan.</p>\n\
                    '
        });
      };
      for (var i=1; i<=1; i++) {
        $scope.addSlide(i);
      }
    }
    PortalCarouselController.$inject = ['$scope'];
})();
;

(function() {
	'use strict';

	angular.module('naut').controller('PortalMapController',
			PortalMapController);
	
	function PortalMapController($scope, $timeout) {

		

		var item = {
			/*coordinates : [ -6.2334099, 106.8507507 ]*/
				coordinates : [ 40.6423926, -97.3981926 ]
		};

		var woa = {
			city : 'This is my marker. There are many like it but this one is mine.'
		};

		$scope.mymarker = new google.maps.Marker({
			map : $scope.myMap,
			animation : google.maps.Animation.DROP,
			position : new google.maps.LatLng(item.coordinates[0],item.coordinates[1]),
			title : woa.city
		});

		$scope.myMarkers = [
		new google.maps.Marker({
			map : $scope.myMap,
			animation : google.maps.Animation.DROP,
			position : new google.maps.LatLng(item.coordinates[0],item.coordinates[1]),
			title : woa.city})];
		
			
			
			
		$scope.mapOptions = {
			center : new google.maps.LatLng(40.0000, -98.0000),
			zoom : 15,
			mapTypeId : google.maps.MapTypeId.ROADMAP
		};

		$scope.addMarker = function($event, $params) {
			$scope.myMarkers.push(new google.maps.Marker({
				map : $scope.myMap,
				position : $params[0].latLng
			}));
		};

		$scope.setZoomMessage = function(zoom) {
			$scope.zoomMessage = 'You just zoomed to ' + zoom + '!';
			console.log(zoom, 'zoomed');
		};

		$scope.openMarkerInfo = function(marker) {
			$scope.currentMarker = marker;
			$scope.currentMarkerLat = marker.getPosition().lat();
			$scope.currentMarkerLng = marker.getPosition().lng();
			$scope.myInfoWindow.open($scope.myMap, marker);
		};

		$scope.setMarkerPosition = function(marker, lat, lng) {
			marker.setPosition(new google.maps.LatLng(lat, lng));
		};

		$scope.refreshMap = function() {

			$timeout(function() {
				google.maps.event.trigger($scope.myMap, 'resize');
			}, 100);

		};

	}
	PortalMapController.$inject = [ '$scope', '$timeout' ];
})();
;
(function () {
    'use strict';

    angular
        .module('naut')
        .controller('Test01Controller', Test01Controller);

    function Test01Controller($scope) {
        $scope.testHello = "Hello Coy!";
        $scope.attrs = {

            "caption": "Dashboar Pengadaan Barang/Jasa",
            "subCaption": "Mamat Test",
            "numberprefix": "Rp ",
            "xAxisname": "Bulan",
            "yAxisName": "Keuntungan (In IDR)",
            "plotgradientcolor": "",
            "bgcolor": "FFFFFF",
            "showalternatehgridcolor": "0",
            "divlinecolor": "CCCCCC",
            "showvalues": "0",
            "showcanvasborder": "0",
            "canvasborderalpha": "0",
            "canvasbordercolor": "CCCCCC",
            "canvasborderthickness": "1",
            "yaxismaxvalue": "30000",
            "captionpadding": "30",
            "linethickness": "3",
            "yaxisvaluespadding": "15",
            "legendshadow": "0",
            "legendborderalpha": "0",
            "palettecolors": "#f8bd19,#008ee4,#33bdda,#e44a00,#6baa01,#583e78",
            "showborder": "0"
        };

        $scope.attrs2 = {            
            "caption": "Dashboar Pengadaan Barang/Jasa",
            "subCaption": "Mamat Test",
            "xAxisname": "Bulan",
            "yAxisName": "Keuntungan (In IDR)",
            "numberPrefix": "Rp ",
            "plotFillAlpha": "80",
            "paletteColors": "#0075c2,#1aaf5d",
            "baseFontColor": "#333333",
            "baseFont": "Helvetica Neue,Arial",
            "captionFontSize": "14",
            "subcaptionFontSize": "14",
            "subcaptionFontBold": "0",
            "showBorder": "0",
            "bgColor": "#ffffff",
            "showShadow": "0",
            "canvasBgColor": "#ffffff",
            "canvasBorderAlpha": "0",
            "divlineAlpha": "100",
            "divlineColor": "#999999",
            "divlineThickness": "1",
            "divLineIsDashed": "1",
            "divLineDashLen": "1",
            "divLineGapLen": "1",
            "usePlotGradientColor": "0",
            "showplotborder": "0",
            "valueFontColor": "#ffffff",
            "placeValuesInside": "1",
            "showHoverEffect": "1",
            "rotateValues": "1",
            "showXAxisLine": "1",
            "xAxisLineThickness": "1",
            "xAxisLineColor": "#999999",
            "showAlternateHGridColor": "0",
            "legendBgAlpha": "0",
            "legendBorderAlpha": "0",
            "legendShadow": "0",
            "legendItemFontSize": "10",
            "legendItemFontColor": "#666666"
        };

        $scope.categories = [{
            "category": [{
                "label": "Jan"
    }, {
                "label": "Feb"
    }, {
                "label": "Mar"
    }, {
                "label": "Apr"
    }, {
                "label": "May"
    }, {
                "label": "Jun"
    }, {
                "label": "Jul"
    }, {
                "label": "Aug"
    }, {
                "label": "Sep"
    }, {
                "label": "Oct"
    }, {
                "label": "Nov"
    }, {
                "label": "Dec"
    }]
}];

        $scope.dataset = [{
                "seriesname": "Perencanaan",
                "data": [{
                    "value": "22400"
        }, {
                    "value": "24800"
        }, {
                    "value": "21800"
        }, {
                    "value": "21800"
        }, {
                    "value": "24600"
        }, {
                    "value": "27600"
        }, {
                    "value": "26800"
        }, {
                    "value": "27700"
        }, {
                    "value": "23700"
        }, {
                    "value": "25900"
        }, {
                    "value": "26800"
        }, {
                    "value": "24800"
        }]
    },

            {
                "seriesname": "Pengadaan",
                "data": [{
                    "value": "10000"
        }, {
                    "value": "11500"
        }, {
                    "value": "12500"
        }, {
                    "value": "15000"
        }, {
                    "value": "16000"
        }, {
                    "value": "17600"
        }, {
                    "value": "18800"
        }, {
                    "value": "19700"
        }, {
                    "value": "21700"
        }, {
                    "value": "21900"
        }, {
                    "value": "22900"
        }, {
                    "value": "20800"
        }]
    }
];


    }
    Test01Controller.$inject = ['$scope'];
})();;
(function () {
    'use strict';

    angular
        .module('naut')
        .controller('Test02Controller', Test02Controller);

    function Test02Controller($scope, DTOptionsBuilder, DTColumnDefBuilder, $location, $timeout) {
        
        //pancingan biar datatables tidak error.
        $scope.dtOptions = DTOptionsBuilder.newOptions()
            .withPaginationType('full_numbers')
            .withDisplayLength(2);

        $scope.dtColumnDefs = [
            DTColumnDefBuilder.newColumnDef(0),
            DTColumnDefBuilder.newColumnDef(1)
        ];

        $scope.cacheList = [
            {
                nama: 'cacheList1'
            },
            {
                nama: 'cacheList2'
            },
            {
                nama: 'cacheList3'
            },
            {
                nama: 'cacheList4'
            },
            {
                nama: 'cacheList5'
            },
            {
                nama: 'cacheList6'
            }
        ];

        $timeout(function(){
            $location.path('/page/portal');
        }, 2000);
    }
    Test02Controller.$inject = ['$scope', 'DTOptionsBuilder', 'DTColumnDefBuilder','$location', '$timeout'];
})();;
/**
 * ========================================================= 
 * Module:
 * LoginController.js 
 * =========================================================
 */

(function() {
	'use strict';

	LoginUserService.$inject = ['$q', '$timeout', '$http', '$rootScope'];
	angular.module('naut').factory('LoginUserService', LoginUserService)
			.controller('LoginController', LoginController);

	function LoginController($http, $scope, $rootScope, $resource, $location, $q, LoginUserService, $localStorage, $window, RequestService, $log, $state, $modalInstance, $stateParams) {
		var formLogin = this;
		$scope.loading = false;
			
		$scope.loading = false;
		$scope.messageError = false;

		$scope.go = function(path) {
			$location.path(path);
		};
		
		$scope.closeModal = function(){
			if ($stateParams.catalogList == undefined || $stateParams.catalogList == null){
				$modalInstance.close();
			}
			else{
				$modalInstance.close();
				$location.path('/portal');
			}
		};

		$scope.btnLogin = function() {
			
			$scope.alertMsg = null;
			$scope.loading = true;
			
			if(formLogin.rememberMe == undefined) {
				var rememberMe = false;
			} else {
				rememberMe = true;
			}

			var loginData = {

				username : formLogin.email,
				password : formLogin.password,
				rememberMe : rememberMe,
				firstLogin : true

			}

			RequestService
					.doPOST('/procurement/loginservices/getAuthentification', loginData)
					.success(
							function(data, status, headers, config) {
								if (data.userToken.token == null) {
									$scope.alertMsg = data.message;
									$scope.loading = false;
									console.log('1');
								} else {

									/* Login success! */
									console.log('2');
									//close modal login
									$scope.closeModal();
									var keepGoing = true;

									// check if user has PM Role
									angular.forEach(
													data.roleUserList,
													function(roleUser, indeks) {
														if (roleUser.role.appCode == "PM" && keepGoing) {
															keepGoing = false;
															RequestService.doSignInUserPM( data, roleUser);
															
														}
													})

									angular.forEach(
													data.roleUserList,
													function(roleUser, indeks) {

														if (roleUser.role.appCode == "VM"	&& keepGoing) {
															keepGoing = false;
															RequestService.doSignInUserVM(data,roleUser.role);
															
														}
													})

									if (keepGoing) {
										alert('Error no role kode defined!');
										$state.go('page.portal');
										console.log('3');
									}

								}
							}).error(function(data, status, headers, config) {
						$scope.loading = false;
				});
		};
	}

	LoginController.$inject = [ '$http', '$scope', '$rootScope', '$resource',
			'$location', '$q', 'LoginUserService', '$localStorage', '$window',
			'RequestService', '$log', '$state', '$modalInstance', '$stateParams' ];

	/*
	 * LoginUser diganti jadi LoginUserService karena di register.controller.js
	 * juga ada :(
	 */
	function LoginUserService($q, $timeout, $http, $rootScope) {
		var getRoleAuthentification = function(userId) {
			var defered = $q.defer();
			$timeout(function() {
				$http.get(
						$rootScope.backendAddress	+ '/procurement/user/getRoleUser/' + userId)
						.success(function(data, status, headers, config) {// console.log('info role get : '+data[0].role);
							defered.resolve(data);
						}).error(function(data, status, headers, config) {
							console.log('eror get http');
						});
			}, 500);
			return defered.promise;
		};

		return {
			getRoleAuthentification : getRoleAuthentification
		}
	}

})();;
/**
 * ========================================================= 
 * Module:
 * RecoverController.js 
 * =========================================================
 */

(function () {
    'use strict';
    angular.module('naut')
        .controller('RecoverController', RecoverController);

    function RecoverController($http, $scope, $rootScope, $resource, $location, $q, LoginUserService, $localStorage, $window, RequestService, $log, $state) {
        $scope.emailUser = '';
        $scope.sendingMessage = false;
        $scope.sendingMessageError = false;
        $scope.loading = false;

        $scope.resetPassword = function () {

            $scope.sendingMessage = false;
            $scope.sendingMessageError = false;

            $scope.loading = true;
            var param = {
                email: $scope.emailUser
            }

            RequestService.doPOST('/procurement/user/recover', param)
                .success(
                    function (data) {
                        if (data) {
                            $scope.sendingMessage = true;
                        } else {
                            $scope.sendingMessageError = true;
                        }
                        $scope.loading = false;

                    })
                .error(function (err) {
                    $scope.loading = false;
                });

        }
        
        $scope.back=function(){
        	$location.path('/app/promise/app/portal');
        }
        
        
    }

    RecoverController.$inject = ['$http', '$scope', '$rootScope', '$resource',
			'$location', '$q', 'LoginUserService', '$localStorage', '$window',
			'RequestService', '$log', '$state'];

})();;
/**
 * ========================================================= 
 * Module:
 * RecoverExecuteController.js 
 * =========================================================
 */

(function () {
    'use strict';
    angular.module('naut')
        .controller('RecoverExecuteController', RecoverExecuteController);

    function RecoverExecuteController($http, $scope, $rootScope, $resource, $location, $q, LoginUserService, $localStorage, $window, RequestService, $log, $state, $stateParams, $modal) { 
        var mailHash = $stateParams.mailHash;
        
        $scope.loading = true;
        $scope.sendingMessage = false;
        $scope.sendingMessageError = false;
        
        RequestService.doPOST('/procurement/user/recover/reset', {
            hash : mailHash
        })
        .success(function(resp){
            if(resp){                
                $scope.sendingMessage  = true;
            } else {
                $scope.sendingMessageError = true;
            }
            $scope.loading = false;
        })
        .error(function(err){
            $scope.sendingMessageError = true;
            $scope.loading = false;
        });
        
        $scope.goLogin = function(){
            //$location.path('/page/promiselogin');
        	var modalInstance = $modal.open({
                templateUrl: 'loginform.html',
                controller: 'LoginController as form',
                resolve: {
                    items: function () {

                    }
                }
            });
        }
                
    }

    RecoverExecuteController.$inject = ['$http', '$scope', '$rootScope', '$resource',
			'$location', '$q', 'LoginUserService', '$localStorage', '$window',
			'RequestService', '$log', '$state', '$stateParams','$modal'];

})();;
/**=========================================================
 * Module: RegistrasiController.js
 =========================================================*/
(function () {
	'use strict';

	LoginUser.$inject = ['$q', '$timeout', '$http', '$rootScope'];
	angular
		.module('naut')
		.factory('LoginUser', LoginUser)
		.controller('RegistrasiController', RegistrasiController);

	function RegistrasiController($http, $scope, $rootScope, $resource, $location, $q, LoginUser, $state) {
		var formRegistrasi = this;
		
		$scope.btnRegistrasi = function () {
			$scope.loading = true;
			console.log('hello :' + JSON.stringify(formRegistrasi));
			var isEmailValid = LoginUser.checkEmailIsValid(formRegistrasi.email);
			if (formRegistrasi.passwd1 != formRegistrasi.passwd2) {
				$scope.errorPassword = true;
				$scope.loading = false;
			} else if (isEmailValid==true) {
				$scope.errorEmail = true;
				$scope.loading = false;
			} else {
				console.log('REgister OK');
                $rootScope.formRegistrasi = formRegistrasi;
                $state.go("page.promiseregister"); //Terjadi Perubahan alur pada bisnis proses (BSA)
				/*$http({
					method: 'POST',
					url: $rootScope.backendAddress + '/procurement/vendor/RegistrasiServices/register',
					headers: {
						'Content-Type': 'application/x-www-form-urlencoded'
					},
					transformRequest: function (obj) {
						var str = [];
						for (var p in obj)
							str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
						return str.join("&");
					},
					data: { email : formRegistrasi.email, password : formRegistrasi.passwd1 }
				}).success(function (data, status, headers, config) {
					if(typeof data.id !== 'undefined'){
						console.log('user : '+JSON.stringify(data));
						$scope.btnLogin(formRegistrasi.email, formRegistrasi.passwd1);
					}
				}).error(function (data, status, headers, config) {
					$scope.loading = false;
				});*/
			}
		};
		
		$scope.btnLogin = function (email, password) {
			$scope.loading = true;
			$http({
				method: 'POST',
				url: $rootScope.backendAddress + '/procurement/user/getAuthentification',
				headers: {
					'Content-Type': 'application/x-www-form-urlencoded'
				},
				transformRequest: function (obj) {
					var str = [];
					for (var p in obj)
						str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
					return str.join("&");
				},
				data: { email : email, password : password}
			}).success(function (data, status, headers, config) {
				if (data.length == 0) {
					$scope.messageError = true;
					$scope.loading = false;
				} else {
					$rootScope.userLogin = data;
					//var roleUser = LoginUser.getRoleAuthentification(data.user.id);
					LoginUser.getRoleAuthentification(data.user.id).then(function (roleUser) {
						console.log('your role is : ' + roleUser);
						if (roleUser == 'PANITIA') {
							$rootScope.userRoleName = 'PANITIA';
							$location.path('/app/dashboard');
							$scope.loading = false;
						} else if (roleUser == 'VENDOR') {
							$rootScope.userRoleName = 'VENDOR';
							$location.path('/appvendor/promise/dashboard');
							$scope.loading = false;
						} else {
							$scope.loading = false;
							console.log('No forwarded');
						}
					});

				}
			}).error(function (data, status, headers, config) {
				$scope.loading = false;
			});

		};
	}

	RegistrasiController.$inject = ['$http', '$scope', '$rootScope', '$resource', '$location', '$q' ,  'LoginUser', '$state'];
	function LoginUser($q, $timeout, $http, $rootScope) {
		var getRoleAuthentification = function (userId) {
			var defered = $q.defer();
			$timeout(function () {
				$http.get($rootScope.backendAddress + '/procurement/user/getRoleUser/' + userId)
					.success(function (data, status, headers, config) {
						//console.log('info role get : '+data[0].role.nama);
						defered.resolve(data[0].role.nama);
					})
					.error(function (data, status, headers, config) {
						console.log('eror get http');
					});
			}, 500);
			return defered.promise;
		};
		
		var checkEmailIsValid = function(email){
			var defered = $q.defer();
			$timeout(function() {
			$http.get($rootScope.backendAddress + '/procurement/vendor/RegistrasiServices/getEmailIsValid/' +email)
				.success(function (data, status, headers, config) {
					return data;
				})
				.error(function (data, status, headers, config) {
					console.log('Error get Email');
					return false;
				});	
			}, 500);
			return defered.promise;
		};

		return {
			getRoleAuthentification: getRoleAuthentification,
			checkEmailIsValid : checkEmailIsValid
		}
	}
})();;
/**=========================================================
 * Module: RegistrasiVendorController.js
 * Author: F.H.K
 =========================================================*/
(function () {
	'use strict';

	angular
		.module('naut')
		.controller('RegistrasiVendorController', RegistrasiVendorController);

	function RegistrasiVendorController($http, $scope, $rootScope, $filter, ngTableParams, $modal, $state, FileUploader, toaster, $resource, $timeout) {
		var form = this;
		$scope.titleSelect = [{"title":"Mr"},{"title":"Mrs"},{"title":"Company"}];
		
		var dataRegistrasi = $rootScope.formRegistrasi;

		form.duplikatEmail = [];
		form.penanggungJawabList = [];
		//form.dokumentasiSKDList = [];
		form.dataBankList = [];
		form.userOk = false;
		form.validEmail = false;
		form.isPKS = 0;
		form.isCompany = true;
		$scope.tanpaPengalaman = false
		$scope.bukanPKS = true;
		$scope.downloadFile = $rootScope.viewUploadBackendAddress+'/';

		/* ---------------------------------------------------- DATA LOGIN ----------------------------------------------------- */
		$scope.checkEmailDariDB = function (email) {
			form.userOk = true;
			$http.get($rootScope.backendAddress + '/procurement/registrasivendor/registrasiVendorServices/user/getUserByUserName/' + email, {
				ignoreLoadingBar: true
			}).success(function (data, status, headers, config) {
				if($scope.validasiEmail) {
					if (data.length > 0) {
						toaster.pop('error', 'Kesalahan', 'Email sudah ada yang menggunakan, silahkan ketik yang berbeda!');
						document.getElementsByName("userId")[0].focus();
						return
					} else {
						toaster.pop('sucsess', 'Perhatian', 'Email belum pernah digunakan');
					}
				}
			});
		}

		$scope.validasiEmail = function (email) {
			var regex = /^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]{2,4})$/;
			var lanjut = true;
			if (regex.test(email) == false) {
//				toaster.pop('error', 'Kesalahan', 'Struktur Email anda SALAH (ex.procurement@promise.co.id)');
				lanjut = false;
			}
			return lanjut;
		}

		$scope.validasiPassword = function (password) {
			// Peraturan password:
			// 1. Harus mengandung 1 huruf KECIL dan 1 huruf BESAR
			// 2. Harus mengandung 1 ANGKA 0-9
			// 3. Harus lebih dari 8 karakter
			var strongRegex = new RegExp("^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})");
			var lanjut = true;
			if (strongRegex.test(password) == false) {
				toaster.pop('error', 'Kesalahan', 'Struktur Password anda SALAH, Lihat disclaimer di bawah');
				lanjut = false;
			}

			return lanjut;
		}

		$scope.backToLogin = function () {
			$state.go("page.promiselogin");
		}

		$scope.nextDataPerusahaan = function () {
			var validationTab01 = false;
			form.userIdSucsess = false;


			if (form.namaPengguna == undefined || form.namaPengguna == "") {
				form.namaPenggunaError = true;
				document.getElementsByName("namaPengguna")[0].focus();
			} else {
				form.namaPenggunaError = false;
			}

			if (form.userId == undefined || form.userId == "") {
				form.userIdError = true;
				document.getElementsByName("userId")[0].focus();
			} else {
				form.userIdError = false;
			}

			if (form.password == undefined || form.password == "") {
				form.passwordError = true;
				document.getElementsByName("password")[0].focus();
			} else {
				form.passwordError = false;
			}

			if (form.retypePassword == undefined || form.retypePassword == "") {
				form.retypePasswordError = true;
				document.getElementsByName("retypePassword")[0].focus();
			} else {
				form.retypePasswordError = false;
			}

			if (form.namaPenggunaError == false && form.userIdError == false && form.passwordError == false && form.retypePasswordError == false) {
				if ($scope.validasiEmail(form.userId)) {
					if (!form.userOk) {
						toaster.pop('warning', 'Perhatian', 'Silahkan Periksa User Anda! (Check User Id)');
						document.getElementsByName("userId")[0].focus();
						return
					} else if ($scope.validasiPassword(form.password)) {
						if (form.password != form.retypePassword) {
							toaster.pop('warning', 'Kesalahan', 'Password dan Retype Password Beda!');
							document.getElementsByName("retypePassword")[0].focus();
						} else {
							validationTab01 = true;
						}
					} else {
						document.getElementsByName("password")[0].focus();
						return
					}
				} else {
					document.getElementsByName("userId")[0].focus();
					return
				}
			}

			return validationTab01; 
			//return true; //skip mandatory tab
		}

		/* ---------------------------------------------------- END DATA LOGIN ------------------------------------------------- */


		/* ---------------------------------------------------- DATA PERUSAHAAN ------------------------------------------------ */

		$http.get($rootScope.backendAddress + '/procurement/master/kualifikasi-vendor/get-list')
			.success(function (data, status, headers, config) {
				$scope.kualifikasiVendorList = data;
			});

		// Ambil data Organisasi
		$http.get($rootScope.backendAddress + '/procurement/registrasivendor/registrasiVendorServices/organisasi/getByParentId/1')
			.success(function (data, status, headers, config) {
				$scope.unitTerdaftarList = data;
			});

		form.getBussinessArea = function(parentId){
			$http.get($rootScope.backendAddress + '/procurement/registrasivendor/registrasiVendorServices/organisasi/getByParentId/'+parentId)
			.success(function (data, status, headers, config) {
				$scope.bussinessAreaList = data;
			});
		}
		
		form.labelMandatori = '*)';

		form.pilihPKP = {
			name: '1'
		};

		$scope.pilihPKP = function () {
			if (form.pilihPKP.name == '2') {
				form.disabled = true;
				form.labelMandatori = '';
			} else {
				form.disabled = false;
				form.labelMandatori = '*)';
			}
		}

		$scope.jenisPerusahaanList = [
			{
				id: 1,
				nama: "PT"
                                  },
			{
				id: 2,
				nama: "CV"
                                  }
                                  ];

		// DATA WILAYAH PROPINSI
		$http.get($rootScope.backendAddress + '/procurement/registrasivendor/registrasiVendorServices/wilayah/getPropinsiList')
			.success(function (data, status, headers, config) {
				$scope.provinsiPerusahaanList = data;
			});

		// DATA WILAYAH KABUPATEN/KOTA
		var listWilayahKota = function (kodePropinsi) {
			$http.get($rootScope.backendAddress + '/procurement/registrasivendor/registrasiVendorServices/wilayah/getKotaList/' + kodePropinsi)
				.success(function (data, status, headers, config) {
					$scope.kotaPerusahaanList = data;
				});
		}

		$scope.pilihPropinsi = function () {
			form.kotaPerusahaan = null;
			listWilayahKota(form.provinsiPerusahaan.lokasi_propinsi);
		}


		$http.get($rootScope.backendAddress + '/procurement/registrasivendor/registrasiVendorServices/jabatan/getList')
			.success(function (data, status, headers, config) {
				$scope.jabatanPenanggungJawabList = data;
			});

		$http.get($rootScope.backendAddress + '/procurement/registrasivendor/registrasiVendorServices/matauang/getMataUangList')
			.success(function (data, status, headers, config) {
				$scope.mataUangList = data;
			});

		$http.get($rootScope.backendAddress + '/procurement/registrasivendor/registrasiVendorServices/bidangusaha/getBidangUsahaList')
			.success(function (data, status, headers, config) {
				$scope.bidangUsahaList = data;
			});

		// penanggung jawab in tab data perusahaan

		// add Penanggung jawab
		$scope.addPenanggungJawab = function () {
			$scope.dataInserted = {
				isNew: true
			};
			console.log(form.penanggungJawabList);
			console.log($scope.dataInserted);
			
			form.penanggungJawabList.push($scope.dataInserted);
		};

		$scope.showJabatan = function (pic) {
			var selected = [];
			if (pic.jabatan) {
				selected = $filter('filter')($scope.jabatanPenanggungJawabList, {
					id: pic.jabatan.id
				});
			}
			return selected.length ? selected[0].nama : 'Not set';
		};

		$scope.checkName = function (data, indeks) {
			if (data == undefined || data == null || data.length < 1) {
                return 'silahkan masukkan nama penanggung jawab!';
			}
            if (data.length > 30) {
                return 'input tidak boleh melebihi 30 karakter';
			}
            if (data.match(/^[a-zA-Z ]*$/)) {
                
			}else {
				return 'input harus berisi huruf!';
			}
		}

		$scope.checkEmail = function (data, indeks) {
			if (data == undefined || data == null || data.length < 1) {
                return 'silahkan masukkan email penanggung jawab!';
			}
            if (data.match(/^[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,4}$/)) {
                
			}else {
				return 'format email salah';
			}
		}

		$scope.checkJabatan = function (data, indeks) {
			if (typeof data == 'undefined') {
				return "silahkan pilih jabatan dari penanggung jawab";
			}
		}
		
		$scope.isCompanyCheck = function () {
			console.log('changed');
			if(form.title.title == 'Company'){
				form.isCompany = true;
				console.log('isCompany ='+form.isCompany);
			}else{
				form.isCompany = false;
				console.log('isCompany ='+form.isCompany);
			}
		}

		$scope.changeNonPKP = function () {
			form.nomorPKP = undefined;
		}

		$scope.checkPKP = function (noPKP, flag) {
			if (form.nomorPKP != undefined && form.nomorPKP != null && form.nomorPKP != '') {
				$http.get($rootScope.backendAddress + '/procurement/vendor/VendorProfileServices/getVendorProfileByNoPKP/' + noPKP)
					.success(function (data, status, headers, config) {
						//console.log("PKP = " + JSON.stringify(data));
						if (data.length > 0) {
							toaster.pop('error', 'Kesalahan', 'Nomor PKP sudah pernah ada, Silahkan input yang Baru');
							document.getElementsByName("nomorPKP")[0].focus();
						} else {
							if (flag != 1) {
								toaster.pop('sucsess', 'Perhatian', 'Nomor PKP Baru, silahkan lanjutkan');
							}
						}
					});
			}
		}

		$scope.checkNPWP = function (noNPWP, flag) {
			if (form.NPWPPerusahaan == undefined || form.NPWPPerusahaan == "") {
				form.NPWPPerusahaanError = true;
				document.getElementsByName("NPWPPerusahaan")[0].focus();
			} 
			
			else if (form.NPWPPerusahaan.length<15){
				form.NPWPPerusahaanLengthError = true;
				document.getElementsByName("NPWPPerusahaan")[0].focus();
			}
			
			else {
				form.NPWPPerusahaanError = false;
				$http.get($rootScope.backendAddress + '/procurement/vendor/VendorProfileServices/getVendorProfileByNoNPWP/' + noNPWP)
					.success(function (data, status, headers, config) {
						//console.log("NPWP = " + JSON.stringify(data));
						if (data.length > 0) {
							toaster.pop('error', 'Kesalahan', 'Nomor NPWP sudah pernah ada, Silahkan input yang Baru');
							document.getElementsByName("nomorNPWP")[0].focus();
						} else {
							if (flag != 1) {
								form.NPWPPerusahaanLengthError = false;
								toaster.pop('sucsess', 'Perhatian', 'Nomor NPWP Baru, silahkan lanjutkan');
							}
						}
					});
			}
		}

		$scope.removePenanggungJawab = function (index) {
			form.penanggungJawabList.splice(index, 1);
		};

		$scope.cancelPenanggungJawab = function (rowform, index) {
			form.penanggungJawabList.splice(index, 1);
		}
		
		$scope.tanggalBerdiriOpen = {};
		  
		$scope.tanggalBerdiriStatus = function($event, elementOpened) {
			$event.preventDefault();
		    $event.stopPropagation();
	
		    $scope.tanggalBerdiriOpen[elementOpened] = !$scope.tanggalBerdiriOpen[elementOpened];
		};

		$scope.nextDataBank = function () {

			console.log('flag bank');
			var validationTab02 = false;

			if (form.pilihPKP.name == '1') {
				if (form.nomorPKP == undefined || form.nomorPKP == "") {
					form.nomorPKPError = true;
					document.getElementsByName("nomorPKP")[0].focus();
				} else {
					form.nomorPKPError = false;
				}

				if (form.NPWPPerusahaan == undefined || form.NPWPPerusahaan == "") {
					form.NPWPPerusahaanError = true;
					document.getElementsByName("NPWPPerusahaan")[0].focus();
				} else {
					form.NPWPPerusahaanError = false;
				}
			} else {
				form.nomorPKPError = false;
				if (form.NPWPPerusahaan == undefined || form.NPWPPerusahaan == "") {
					form.NPWPPerusahaanError = true;
					document.getElementsByName("NPWPPerusahaan")[0].focus();
				} else {
					form.NPWPPerusahaanError = false;
				}
			}

			if (form.kualifikasiVendor == undefined || form.kualifikasiVendor == "") {
				form.kualifikasiVendorError = true;
				document.getElementsByName("kualifikasiVendor")[0].focus();
			} else {
				form.kualifikasiVendorError = false;
			}
			
			if (form.title == undefined || form.title == "") {
				form.TitleError = true;
				document.getElementsByName("title")[0].focus();
				
			} else {
				form.TitleError = false;
			}

			if (form.unitTerdaftar == undefined || form.unitTerdaftar == "") {
				form.unitTerdaftarError = true;
				document.getElementsByName("unitTerdaftar")[0].focus();
			} else {
				form.unitTerdaftarError = false;
			}
			
			if (form.bussinessArea == undefined || form.bussinessArea == "") {
				form.bussinessAreaError = true;
				document.getElementsByName("bussinessArea")[0].focus();
			} else {
				form.bussinessAreaError = false;
			}

			if (form.NamaPerusahaan == undefined || form.NamaPerusahaan == "") {
				form.NamaPerusahaanError = true;
				document.getElementsByName("NamaPerusahaan")[0].focus();
			} else {
				form.NamaPerusahaanError = false;
			}

			if (form.jenisPerusahaan == undefined || form.jenisPerusahaan == "") {
				form.jenisPerusahaanError = true;
				document.getElementsByName("jenisPerusahaan")[0].focus();
			} else {
				form.jenisPerusahaanError = false;
			}
			
			if (form.namaNPWP == undefined || form.namaNPWP == "") {
				form.namaNPWPError = true;
				document.getElementsByName("namaNPWP")[0].focus();
			} else {
				form.namaNPWPError = false;
			}
			
			if (form.alamatNPWP == undefined || form.alamatNPWP == "") {
				form.alamatNPWPError = true;
				document.getElementsByName("alamatNPWP")[0].focus();
			} else {
				form.alamatNPWPError = false;
			}
			
			if (form.kotaNPWP == undefined || form.kotaNPWP == "") {
				form.kotaNPWPError = true;
				document.getElementsByName("alamatNPWP")[0].focus();
			} else {
				form.kotaNPWPError = false;
			}

			if (form.NamaSingkatan == undefined || form.NamaSingkatan == "") {
				form.NamaSingkatanError = true;
				document.getElementsByName("NamaSingkatan")[0].focus();
			} else {
				form.NamaSingkatanError = false;
			}

			if (form.alamatPerusahaan == undefined || form.alamatPerusahaan == "") {
				form.alamatPerusahaanError = true;
				document.getElementsByName("alamatPerusahaan")[0].focus();
			} else {
				form.alamatPerusahaanError = false;
			}

			if (form.provinsiPerusahaan == undefined || form.provinsiPerusahaan == "") {
				form.provinsiPerusahaanError = true;
				document.getElementsByName("provinsiPerusahaan")[0].focus();
			} else {
				form.provinsiPerusahaanError = false;
			}

			if (form.kotaPerusahaan == undefined || form.kotaPerusahaan == "") {
				form.kotaPerusahaanError = true;
				document.getElementsByName("kotaPerusahaan")[0].focus();
			} else {
				form.kotaPerusahaanError = false;
			}
			
			if ((form.noAktaPendirian == undefined || form.noAktaPendirian == "") && form.isCompany == true) {
				form.noAktaPendirianError = true;
				document.getElementsByName("noAktaPendirian")[0].focus();
			} else {
				form.noAktaPendirianError = false;
			}

			if (form.TeleponPerusahaan == undefined || form.TeleponPerusahaan == "") {
				form.TeleponPerusahaanError = true;
				document.getElementsByName("TeleponPerusahaan")[0].focus();
			} else {
				form.TeleponPerusahaanError = false;
			}

			if (form.EmailPerusahaan == undefined || form.EmailPerusahaan == "") {
				form.EmailPerusahaanError = true;
				document.getElementsByName("EmailPerusahaan")[0].focus();
			} else {
				form.EmailPerusahaanError = false;
			}

			if (form.NamaContactPerson == undefined || form.NamaContactPerson == "") {
				form.NamaContactPersonError = true;
				document.getElementsByName("NamaContactPerson")[0].focus();
			} else {
				form.NamaContactPersonError = false;
			}

			if (form.NoHPContactPerson == undefined || form.NoHPContactPerson == "") {
				form.NoHPContactPersonError = true;
				document.getElementsByName("NoHPContactPerson")[0].focus();
			} else {
				form.NoHPContactPersonError = false;
			}

			if (form.EmailContactPerson == undefined || form.EmailContactPerson == "") {
				form.EmailContactPersonError = true;
				document.getElementsByName("EmailContactPerson")[0].focus();
			} else {
				form.EmailContactPersonError = false;
			}

			if (form.NoKTPContactPerson == undefined || form.NoKTPContactPerson == "") {
				form.NoKTPContactPersonError = true;
				document.getElementsByName("NoKTPContactPerson")[0].focus();
			} else {
				form.NoKTPContactPersonError = false;
			}
			
			if (form.NoKKContactPerson == undefined || form.NoKKContactPerson == "") {
				form.NoKKContactPersonError = true;
				document.getElementsByName("NoKKContactPerson")[0].focus();
			} else {
				form.NoKKContactPersonError = false;
			}
			
			if (form.JumlahKaryawan == undefined || form.JumlahKaryawan == "") {
				form.JumlahKaryawanError = true;
				document.getElementsByName("JumlahKaryawan")[0].focus();
			} else {
				form.JumlahKaryawanError = false;
			}

			if (form.kualifikasiVendorError == false && form.unitTerdaftarError == false && form.NamaPerusahaanError == false 
					&& form.jenisPerusahaanError == false && form.NamaSingkatanError == false && form.alamatPerusahaanError == false 
					&& form.provinsiPerusahaanError == false && form.kotaPerusahaanError == false && form.TeleponPerusahaanError == false 
					&& form.EmailPerusahaanError == false && form.NamaContactPersonError == false && form.NoHPContactPersonError == false 
					&& form.EmailContactPersonError == false && form.NoKTPContactPersonError == false && form.NoKKContactPersonError == false
					&& form.TitleError == false && form.bussinessAreaError == false && form.namaNPWPError == false && form.alamatNPWPError == false && form.NPWPPerusahaanLengthError == false
					&& form.kotaNPWPError == false && form.noAktaPendirianError == false && form.JumlahKaryawanError == false) {
				if ($scope.validasiEmail(form.userId)) {
					if (form.pilihPKP.name == '1') {
						if (form.nomorPKPError == false && form.NPWPPerusahaanError == false) {
							validationTab02 = true;
						}
					} else {
						if (form.NPWPPerusahaanError == false) {
							validationTab02 = true;
						}
					}
				}
			}
			//console.log("validasi tab02= " + validationTab02);
			//console.log("title "+form.title.title);
			//console.log("bussiness Area "+form.bussinessArea.id);
			//console.log("Nama NPWP "+form.namaNPWP);
			//console.log("Alamat NPWP "+form.alamatNPWP);
			//console.log("Kota NPWP "+form.kotaNPWP);
			//console.log("NO Akta Pendirian "+form.noAktaPendirian);
			//console.log("NO KK "+ form.NoKKContactPerson);
			
			
			return validationTab02;
			//return true;//skip mandatory tab
		}

		/* ---------------------------------------------------- END DATA PERUSAHAAN -------------------------------------------- */


		/* ---------------------------------------------------- DATA BANK ------------------------------------------------------ */

		$http.get($rootScope.backendAddress + '/procurement/registrasivendor/registrasiVendorServices/negara/getList')
			.success(function (data, status, headers, config) {
				$scope.negaraList = data;
			});

		form.dataBankList = [];
		$scope.dataBankTable = new ngTableParams({
			page: 1, // show first page
			count: 5 // count per page
		}, {
			counts: [], // hide page count
			total: form.dataBankList.length, // length of data4
			getData: function ($defer, params) {
				$defer.resolve(form.dataBankList.slice((params.page() - 1) * params.count(), params.page() * params.count()));
			}
		});

		$scope.addDataBank = function () {
			var bankvendormodalinstance = $modal.open({
				templateUrl: '/bankvendor.html',
				controller: 'BankVendorModalController',
				size: 'lg',
				resolve: {
					dataBankVendor: function () {
						return {};
					},
					mataUangList: function () {
						return $scope.mataUangList;
					},
					negaraList: function () {
						return $scope.negaraList;
					}
				}
			});
			bankvendormodalinstance.result.then(function (dataBankVendor) {
				if (dataBankVendor != undefined && dataBankVendor !== null) {
					form.dataBankList.push(dataBankVendor);
					$scope.dataBankTable.reload();
				}
			});
		}

		$scope.editDataBank = function (index, dataBankVendor) {
			var bankvendormodalinstance = $modal.open({
				templateUrl: '/bankvendor.html',
				controller: 'BankVendorModalController',
				size: 'lg',
				resolve: {
					dataBankVendor: function () {
						return dataBankVendor;
					},
					mataUangList: function () {
						return $scope.mataUangList;
					},
					negaraList: function () {
						return $scope.negaraList;
					}
				}
			});
			bankvendormodalinstance.result.then(function (dataBankVendor) {
				if (dataBankVendor != undefined && dataBankVendor !== null) {
					form.dataBankList.splice(index, 1, dataBankVendor);
					$scope.dataBankTable.reload();
				}
			});
		}

		$scope.deleteDataBank = function (index, dataBankVendor) {
			var bankvendormodalinstance = $modal.open({
				templateUrl: '/alertModal.html',
				controller: 'DeleteDataModalRegistrasiController',
				size: 'sm',
				resolve: {
					nameData: function () {
						return dataBankVendor.namaBank;
					}
				}
			});
			bankvendormodalinstance.result.then(function () {
				form.dataBankList.splice(index, 1);
				$scope.dataBankTable.reload();
			});
		}

		$scope.nextDataSegmentasi = function () {
			var validationTab03 = false; 

			if (form.dataBankList.length > 0)
				validationTab03 = true;
			else
				toaster.pop('error', 'Kesalahan', 'Silahkan Tambah Data Bank');

			return validationTab03;
			//return true;//skip mandatory tab
		}

		/* ---------------------------------------------------- DATA SEGMENTASI ------------------------------------------------ */

		form.dataSegmentasiList = [];
		$scope.tableSegmentasiVendor = new ngTableParams({
			page: 1, // show first page
			count: 5 // count per page
		}, {
			counts: [], // hide page count
			total: form.dataSegmentasiList.length, // length of data4
			getData: function ($defer, params) {
				$defer.resolve(form.dataSegmentasiList.slice((params.page() - 1) * params.count(), params.page() * params.count()));
			}
		});

		$scope.addDataSegmentasi = function () {
			var segmentasimodalinstance = $modal.open({
				templateUrl: '/segmentasivendormodal.html',
				controller: 'SegmentasiVendorModalController',
				size: 'lg',
				resolve: {
					dataSegmentasi: function () {
						return {};
					}
				}
			});
			segmentasimodalinstance.result.then(function (dataSegmentasi) {
				if (dataSegmentasi != undefined && dataSegmentasi !== null) {
					form.dataSegmentasiList.push(dataSegmentasi);
					$scope.tableSegmentasiVendor.reload();
				}
			});
		}

		$scope.editDataSegmentasi = function (index, dataSegmentasi) {
			var segmentasimodalinstance = $modal.open({
				templateUrl: '/segmentasivendormodal.html',
				controller: 'SegmentasiVendorModalController',
				size: 'lg',
				resolve: {
					dataSegmentasi: function () {
						return dataSegmentasi;
					}
				}
			});
			segmentasimodalinstance.result.then(function (dataSegmentasi) {
				if (dataSegmentasi != undefined && dataSegmentasi !== null) {
					form.dataSegmentasiList.splice(index, 1, dataSegmentasi);
					$scope.tableSegmentasiVendor.reload();
				}
			});
		}

		$scope.removeDataSegmentasi = function (index, dataSegmentasi) {
			var segmentasimodalinstance = $modal.open({
				templateUrl: '/alertModal.html',
				controller: 'DeleteDataModalRegistrasiController',
				size: 'sm',
				resolve: {
					nameData: function () {
						return dataSegmentasi.subBidangUsaha.nama;
					}
				}
			});
			segmentasimodalinstance.result.then(function () {
				form.dataSegmentasiList.splice(index, 1);
				$scope.tableSegmentasiVendor.reload();
			});
		}

		$scope.nextDataDokumentasi = function () {
			var validationTab04 = false;

			if (form.dataSegmentasiList.length > 0)
				validationTab04 = true;
			else
				toaster.pop('error', 'Kesalahan', 'Silahkan Tambah Data Segmentasi');

			console.log("DATA SEGMENTASI = " + validationTab04);
			return validationTab04;
			//return true;//skip mandatory tab
			
		}

		/* ---------------------------------------------------- DATA DOKUMEN --------------------------------------------------- */
		
		// add Dokuemntasi SKD
		$scope.addDokumentasiSKD = function () {
			$scope.dataDokumentasiSKDInserted = {
				isNew: true
			};
			console.log(form.dokumentasiSKDList);
			console.log($scope.dataInserted);
			
			form.dokumentasiSKDList.push($scope.dataDokumentasiSKDInserted);
		};
		
		//cek isPKS
		$scope.isPKSChecked = function (isPKS) {
			if (isPKS) {
				$scope.bukanPKS = false;
				form.isPKS = 1;
			} else {
				$scope.bukanPKS = true;
				form.isPKS = 0;
			}
			//console.log("TANPA PENGALAMAN = "+$scope.tanpaPengalaman);
		}
		
		var rekapUpload = function (dataUpload) {
			dataUpload.filters.push({
				name: 'customFilter',
				fn: function (item /*{File|FileLikeObject}*/ , options) {
					return this.queue.length < 10;
				}
			});

			dataUpload.onCompleteItem = function (fileItem, response, status, headers) {
				console.info('onCompleteItem', fileItem, response, status, headers);
				fileItem.realFileName = response.fileName;
			};
		}
		
		//--------------is pks-------------------//
		$scope.dokumenPKS = {};
		$scope.dokumenPKS.tanggalTerbitStatus = false;
		$scope.tanggalTerbitOpenDokumenPKS = function ($event) {
			$event.preventDefault();
			$event.stopPropagation();
			$scope.dokumenPKS.tanggalTerbitStatus = true;
		};

		$scope.dokumenPKS.tanggalBerakhirStatus = false;
		$scope.tanggalBerakhirOpenDokumenPKS = function ($event) {
			$event.preventDefault();
			$event.stopPropagation();
			$scope.dokumenPKS.tanggalBerakhirStatus = true;
		};

		var uploadDokumenPKS = $scope.uploadDokumenPKS = new FileUploader({
			url: $rootScope.uploadBackendAddress,
			method: 'POST'
		});

		$scope.changeDokumenPKS = function () {
			$scope.dokumenPKS.tanggalBerakhir = null;
		}

		rekapUpload(uploadDokumenPKS);
		//---------------------- SPR ----------------------------------
		$scope.dokumenSPR = {};
		$scope.dokumenSPR.tanggalTerbitStatus = false;
		$scope.tanggalTerbitOpenDokumenSPR = function ($event) {
			$event.preventDefault();
			$event.stopPropagation();
			$scope.dokumenSPR.tanggalTerbitStatus = true;
		};

		$scope.dokumenSPR.tanggalBerakhirStatus = false;
		$scope.tanggalBerakhirOpenDokumenSPR = function ($event) {
			$event.preventDefault();
			$event.stopPropagation();
			$scope.dokumenSPR.tanggalBerakhirStatus = true;
		};

		var uploadDokumenSPR = $scope.uploadDokumenSPR = new FileUploader({
			url: $rootScope.uploadBackendAddress,
			method: 'POST'
		});

		$scope.changeDokumenSPR = function () {
			$scope.dokumenSPR.tanggalBerakhir = null;
		}

		rekapUpload(uploadDokumenSPR);
		//--------------------------- SPB -------------------------------------
		$scope.dokumenSPB = {};
		$scope.dokumenSPB.tanggalTerbitStatus = false;
		$scope.tanggalTerbitOpenDokumenSPB = function ($event) {
			$event.preventDefault();
			$event.stopPropagation();
			$scope.dokumenSPB.tanggalTerbitStatus = true;
		};

		$scope.dokumenSPB.tanggalBerakhirStatus = false;
		$scope.tanggalBerakhirOpenDokumenSPB = function ($event) {
			$event.preventDefault();
			$event.stopPropagation();
			$scope.dokumenSPB.tanggalBerakhirStatus = true;
		};

		var uploadDokumenSPB = $scope.uploadDokumenSPB = new FileUploader({
			url: $rootScope.uploadBackendAddress,
			method: 'POST'
		});

		$scope.changeDokumenSPB = function () {
			$scope.dokumenSPB.tanggalBerakhir = null;
		}

		rekapUpload(uploadDokumenSPB);
		
		//---------------------- SKD ----------------------------------
		$scope.dokumenSKD = {};
		$scope.dokumenSKD.tanggalTerbitStatus = false;
		$scope.tanggalTerbitOpenDokumenSKD = function ($event) {
			$event.preventDefault();
			$event.stopPropagation();
			$scope.dokumenSKD.tanggalTerbitStatus = true;
		};

		$scope.dokumenSKD.tanggalBerakhirStatus = false;
		$scope.tanggalBerakhirOpenDokumenSKD = function ($event) {
			$event.preventDefault();
			$event.stopPropagation();
			$scope.dokumenSKD.tanggalBerakhirStatus = true;
		};

		var uploadDokumenSKD = $scope.uploadDokumenSKD = new FileUploader({
			url: $rootScope.uploadBackendAddress,
			method: 'POST'
		});

		$scope.changeDokumenSKD = function () {
			$scope.dokumenSKD.tanggalBerakhir = null;
		}

		rekapUpload(uploadDokumenSKD);
		
		//----------------------------------------------------------------------
		
		$scope.cekFileUpload= function (){
			
		}
		
		//---------------------------------------------------------------------

		$scope.VendorRegistrasiForm = {};
		$scope.VendorRegistrasiForm.tanggalTerbitStatus = false;
		$scope.tanggalTerbitOpen1 = function ($event) {
			$event.preventDefault();
			$event.stopPropagation();
			$scope.VendorRegistrasiForm.tanggalTerbitStatus = true;
		};

		$scope.VendorRegistrasiForm.tanggalBerakhirStatus = false;
		$scope.tanggalBerakhirOpen1 = function ($event) {
			$event.preventDefault();
			$event.stopPropagation();
			$scope.VendorRegistrasiForm.tanggalBerakhirStatus = true;
		};

		var uploadVendorRegistrasiForm = $scope.uploadVendorRegistrasiForm = new FileUploader({
			url: $rootScope.uploadBackendAddress,
			method: 'POST'
		});

		$scope.changeVendorRegistrasiForm = function () {
			$scope.VendorRegistrasiForm.tanggalBerakhir = null;
		}

		rekapUpload(uploadVendorRegistrasiForm);

		$scope.SalinanAktePendirian = {};
		$scope.SalinanAktePendirian.tanggalTerbitStatus = false;
		$scope.tanggalTerbitOpen2 = function ($event) {
			$event.preventDefault();
			$event.stopPropagation();
			$scope.SalinanAktePendirian.tanggalTerbitStatus = true;
		};

		$scope.SalinanAktePendirian.tanggalBerakhirStatus = false;
		$scope.tanggalBerakhirOpen2 = function ($event) {
			$event.preventDefault();
			$event.stopPropagation();
			$scope.SalinanAktePendirian.tanggalBerakhirStatus = true;
		};

		var uploadSalinanAktePendirian = $scope.uploadSalinanAktePendirian = new FileUploader({
			url: $rootScope.uploadBackendAddress,
			method: 'POST'
		});

		$scope.changeSalinanAktePendirian = function () {
			$scope.SalinanAktePendirian.tanggalBerakhir = null;
		}

		rekapUpload(uploadSalinanAktePendirian);

		$scope.SalinanTandaDaftar = {};
		$scope.SalinanTandaDaftar.tanggalTerbitStatus = false;
		$scope.tanggalTerbitOpen3 = function ($event) {
			$event.preventDefault();
			$event.stopPropagation();
			$scope.SalinanTandaDaftar.tanggalTerbitStatus = true;
		};

		$scope.SalinanTandaDaftar.tanggalBerakhirStatus = false;
		$scope.tanggalBerakhirOpen3 = function ($event) {
			$event.preventDefault();
			$event.stopPropagation();
			$scope.SalinanTandaDaftar.tanggalBerakhirStatus = true;
		};

		var uploadSalinanTandaDaftar = $scope.uploadSalinanTandaDaftar = new FileUploader({
			url: $rootScope.uploadBackendAddress,
			method: 'POST'
		});

		$scope.changeSalinanTandaDaftar = function () {
			$scope.SalinanTandaDaftar.tanggalBerakhir = null;
		}

		rekapUpload(uploadSalinanTandaDaftar);

		$scope.SalinanSuratIjinUsaha = {};
		$scope.SalinanSuratIjinUsaha.tanggalTerbitStatus = false;
		$scope.tanggalTerbitOpen4 = function ($event) {
			$event.preventDefault();
			$event.stopPropagation();
			$scope.SalinanSuratIjinUsaha.tanggalTerbitStatus = true;
		};

		$scope.SalinanSuratIjinUsaha.tanggalBerakhirStatus = false;
		$scope.tanggalBerakhirOpen4 = function ($event) {
			$event.preventDefault();
			$event.stopPropagation();
			$scope.SalinanSuratIjinUsaha.tanggalBerakhirStatus = true;
		};

		$scope.changeSalinanSuratIjinUsaha = function () {
			$scope.SalinanSuratIjinUsaha.tanggalBerakhir = null;
		}

		var uploadSalinanSuratIjinUsaha = $scope.uploadSalinanSuratIjinUsaha = new FileUploader({
			url: $rootScope.uploadBackendAddress,
			method: 'POST'
		});

		rekapUpload(uploadSalinanSuratIjinUsaha);

		$scope.BuktiFisikPerusahaan = {};
		$scope.BuktiFisikPerusahaan.tanggalTerbitStatus = false;
		$scope.tanggalTerbitOpen5 = function ($event) {
			$event.preventDefault();
			$event.stopPropagation();
			$scope.BuktiFisikPerusahaan.tanggalTerbitStatus = true;
		};

		$scope.BuktiFisikPerusahaan.tanggalBerakhirStatus = false;
		$scope.tanggalBerakhirOpen5 = function ($event) {
			$event.preventDefault();
			$event.stopPropagation();
			$scope.BuktiFisikPerusahaan.tanggalBerakhirStatus = true;
		};

		$scope.changeBuktiFisikPerusahaan = function () {
			$scope.BuktiFisikPerusahaan.tanggalBerakhir = null;
		}

		var uploadBuktiFisikPerusahaan = $scope.uploadBuktiFisikPerusahaan = new FileUploader({
			url: $rootScope.uploadBackendAddress,
			method: 'POST'
		});

		rekapUpload(uploadBuktiFisikPerusahaan);

		$scope.DokumenQuality = {};
		$scope.DokumenQuality.tanggalTerbitStatus = false;
		$scope.tanggalTerbitOpen6 = function ($event) {
			$event.preventDefault();
			$event.stopPropagation();
			$scope.DokumenQuality.tanggalTerbitStatus = true;
		};

		$scope.DokumenQuality.tanggalBerakhirStatus = false;
		$scope.tanggalBerakhirOpen6 = function ($event) {
			$event.preventDefault();
			$event.stopPropagation();
			$scope.DokumenQuality.tanggalBerakhirStatus = true;
		};

		$scope.changeDokumenQuality = function () {
			$scope.DokumenQuality.tanggalBerakhir = null;
		}

		var uploadDokumenQuality = $scope.uploadDokumenQuality = new FileUploader({
			url: $rootScope.uploadBackendAddress,
			method: 'POST'
		});

		rekapUpload(uploadDokumenQuality);

		$scope.DokumenTeknik = {};
		$scope.DokumenTeknik.tanggalTerbitStatus = false;
		$scope.tanggalTerbitOpen7 = function ($event) {
			$event.preventDefault();
			$event.stopPropagation();
			$scope.DokumenTeknik.tanggalTerbitStatus = true;
		};

		$scope.DokumenTeknik.tanggalBerakhirStatus = false;
		$scope.tanggalBerakhirOpen7 = function ($event) {
			$event.preventDefault();
			$event.stopPropagation();
			$scope.DokumenTeknik.tanggalBerakhirStatus = true;
		};

		$scope.changeDokumenTeknik = function () {
			$scope.DokumenTeknik.tanggalBerakhir = null;
		}

		var uploadDokumenTeknik = $scope.uploadDokumenTeknik = new FileUploader({
			url: $rootScope.uploadBackendAddress,
			method: 'POST'
		});

		rekapUpload(uploadDokumenTeknik);


		$scope.nextDataPeralatan = function () {

			var validationTab05 = false;


			if (uploadSalinanTandaDaftar !== undefined && uploadSalinanTandaDaftar.queue.length > 0) {
				form.SalinanTandaDaftarError = false;
			} else {
				form.SalinanTandaDaftarError = true;
			}
			
			/*if(form.isPKS == 1){
				if (uploadDokumenPKS !== undefined && uploadDokumenPKS.queue.length > 0) {
					form.dokumenPKSError = false;
				} else {
					form.dokumenPKSError = true;
				}
			}else{
				form.dokumenPKSError = false;
			}*/
			
			if (uploadDokumenSPR !== undefined && uploadDokumenSPR.queue.length > 0) {
				form.dokumenSPRError = false;
			} else {
				form.dokumenSPRError = true;
			}
			
			if (uploadDokumenSPB !== undefined && uploadDokumenSPB.queue.length > 0) {
				form.dokumenSPBError = false;
			} else {
				form.dokumenSPBError = true;
			}
			
			if (uploadDokumenSKD !== undefined && uploadDokumenSKD.queue.length > 0) {
				form.dokumenSKDError = false;
			} else {
				form.dokumenSKDError = true;
			}

			if (uploadBuktiFisikPerusahaan !== undefined && uploadBuktiFisikPerusahaan.queue.length > 0) {
				form.buktiFisikPerusahaanError = false;
			} else {
				form.buktiFisikPerusahaanError = true;
			}

			if (uploadDokumenTeknik !== undefined && uploadDokumenTeknik.queue.length > 0) {
				form.DokumenTeknikError = false;
			} else {
				form.DokumenTeknikError = true;
			}


			if (form.SalinanTandaDaftarError == false  && form.dokumenSPBError == false && form.dokumenSPRError == false && form.buktiFisikPerusahaanError == false && form.DokumenTeknikError == false) {
				angular.forEach(uploadSalinanTandaDaftar.queue, function (item) {
					item.upload();
					console.log("HASIL UPLOAD = " + item.isUploaded);
				});
				angular.forEach(uploadBuktiFisikPerusahaan.queue, function (item) {
					item.upload();
				});
				angular.forEach(uploadDokumenTeknik.queue, function (item) {
					item.upload();
				});
				if (uploadVendorRegistrasiForm !== undefined && uploadVendorRegistrasiForm.queue.length > 0) {
					angular.forEach(uploadVendorRegistrasiForm.queue, function (item) {
						item.upload();
					});
				}
				if (uploadSalinanAktePendirian !== undefined && uploadSalinanAktePendirian.queue.length > 0) {
					angular.forEach(uploadSalinanAktePendirian.queue, function (item) {
						item.upload();
					});
				}
				if (uploadSalinanSuratIjinUsaha !== undefined && uploadSalinanSuratIjinUsaha.queue.length > 0) {
					angular.forEach(uploadSalinanSuratIjinUsaha.queue, function (item) {
						item.upload();
					});
				}
				if (uploadDokumenQuality !== undefined && uploadDokumenQuality.queue.length > 0) {
					angular.forEach(uploadDokumenQuality.queue, function (item) {
						item.upload();
					});
				}
				//------------------------------------pks, spr, spb---------------------------------------------
				if (uploadDokumenPKS !== undefined && uploadDokumenPKS.queue.length > 0) {
					angular.forEach(uploadDokumenPKS.queue, function (item) {
						item.upload();
					});
				}
				if (uploadDokumenSPB !== undefined && uploadDokumenSPB.queue.length > 0) {
					angular.forEach(uploadDokumenSPB.queue, function (item) {
						item.upload();
					});
				}
				if (uploadDokumenSPR !== undefined && uploadDokumenSPR.queue.length > 0) {
					angular.forEach(uploadDokumenSPR.queue, function (item) {
						item.upload();
					});
				}
				
				if (uploadDokumenSKD !== undefined && uploadDokumenSKD.queue.length > 0) {
					angular.forEach(uploadDokumenSKD.queue, function (item) {
						item.upload();
					});
				}
				//-----------------------------------------------------------------------------------------------
				
				validationTab05 = true;
			}

			return validationTab05;
			//return true; //skip mandatory tab
		}

		/* ---------------------------------------------------- DATA PERALATAN ------------------------------------------------- */

		form.dataPeralatanList = [];
		$scope.tablePeralatanVendor = new ngTableParams({
			page: 1, // show first page
			count: 5 // count per page
		}, {
			counts: [], // hide page count
			total: form.dataPeralatanList.length, // length of data4
			getData: function ($defer, params) {
				$defer.resolve(form.dataPeralatanList.slice((params.page() - 1) * params.count(), params.page() * params.count()));
			}
		});

		$scope.addDataPeralatan = function () {
			var segmentasimodalinstance = $modal.open({
				templateUrl: '/peralatanvendor.html',
				controller: 'PeralatanVendorModalController',
				size: 'lg',
				resolve: {
					dataPeralatan: function () {
						return {};
					}
				}
			});
			segmentasimodalinstance.result.then(function (dataPeralatan) {
				if (dataPeralatan != undefined && dataPeralatan !== null) {
					form.dataPeralatanList.push(dataPeralatan);
					dataPeralatan.fileNameBuktiKepemilikan = fileNameUpload(dataPeralatan.uploadDokumenBuktiKepemilikan);
					$scope.tablePeralatanVendor.reload();
				}
			});
		}

		$scope.editDataPeralatan = function (index, dataPeralatan) {
			var segmentasimodalinstance = $modal.open({
				templateUrl: '/peralatanvendor.html',
				controller: 'PeralatanVendorModalController',
				size: 'lg',
				resolve: {
					dataPeralatan: function () {
						return dataPeralatan;
					}
				}
			});
			segmentasimodalinstance.result.then(function (dataPeralatan) {
				if (dataPeralatan != undefined && dataPeralatan !== null) {
					dataPeralatan.fileNameBuktiKepemilikan = fileNameUpload(dataPeralatan.uploadDokumenBuktiKepemilikan);
					form.dataPeralatanList.splice(index, 1, dataPeralatan);
					$scope.tablePeralatanVendor.reload();
				}
			});
		}

		$scope.removeDataPeralatan = function (index, dataPeralatan) {
			var segmentasimodalinstance = $modal.open({
				templateUrl: '/alertModal.html',
				controller: 'DeleteDataModalRegistrasiController',
				size: 'sm',
				resolve: {
					nameData: function () {
						return dataPeralatan.jenis;
					}
				}
			});
			segmentasimodalinstance.result.then(function () {
				form.dataPeralatanList.splice(index, 1);
				$scope.tablePeralatanVendor.reload();
			});
		}

		$scope.nextDataKeuangan = function () {
			var validationTab06 = false;

			if (form.dataPeralatanList.length > 0)
				validationTab06 = true;
			else
				toaster.pop('error', 'Kesalahan', 'Silahkan Tambah Data Peralatan');

			return validationTab06;
			//return true; //skip mandatory tab
		}

		/* ---------------------------------------------------- DATA KEUANGAN -------------------------------------------------- */

		form.dataKeuanganList = [];
		$scope.tableKeuanganVendor = new ngTableParams({
			page: 1, // show first page
			count: 5 // count per page
		}, {
			counts: [], // hide page count
			total: form.dataKeuanganList.length, // length of data4
			getData: function ($defer, params) {
				$defer.resolve(form.dataKeuanganList.slice((params.page() - 1) * params.count(), params.page() * params.count()));
			}
		});

		/* $scope.dataKeuangan.totalAktivaLancar = $scope.dataKeuangan.kas + $scope.dataKeuangan.bank + $scope.dataKeuangan.totalPiutang + $scope.dataKeuangan.totalPiutang + $scope.dataKeuangan.hutangLainnya;*/

		$scope.addDataKeuangan = function () {
			var tambah = 1;
			var segmentasimodalinstance = $modal.open({
				templateUrl: '/keuanganvendor.html',
				controller: 'KeuanganVendorModalController',
				/*windowClass: 'app-modal-window',*/
				size : 'lg',
				resolve: {
					dataKeuangan: function () {
						return {};
					},
					namaEvent: function () {
						return 'tambah';
					}
				}
			});

			segmentasimodalinstance.result.then(function (dataKeuangan) {
				if (dataKeuangan != undefined && dataKeuangan !== null) {
					form.dataKeuanganList.push(dataKeuangan);
					$scope.tableKeuanganVendor.reload();
				}
			});
		}

		$scope.editDataKeuangan = function (index, dataKeuangan) {
			var segmentasimodalinstance = $modal.open({
				templateUrl: '/keuanganvendor.html',
				controller: 'KeuanganVendorModalController',
				windowClass: 'app-modal-window',
				resolve: {
					dataKeuangan: function () {
						return dataKeuangan;
					},
					namaEvent: function () {
						return 'rubah';
					}
				}
			});
			segmentasimodalinstance.result.then(function (dataKeuangan) {
				if (dataKeuangan != undefined && dataKeuangan !== null) {
					form.dataKeuanganList.splice(index, 1, dataKeuangan);
					$scope.tableKeuanganVendor.reload();
				}
			});
		}

		$scope.removeDataKeuangan = function (index, dataKeuangan) {
			var segmentasimodalinstance = $modal.open({
				templateUrl: '/alertModal.html',
				controller: 'DeleteDataModalRegistrasiController',
				size: 'sm',
				resolve: {
					nameData: function () {
						return dataKeuangan.jenis;
					},
					namaEvent: function () {
						return 'hapus';
					}
				}
			});
			segmentasimodalinstance.result.then(function () {
				form.dataKeuanganList.splice(index, 1);
				$scope.tableKeuanganVendor.reload();
			});
		}

		$scope.nextDataPengalaman = function () {
			var validationTab07 = false;

			if (form.dataKeuanganList.length > 0)
				validationTab07 = true;
			else
				toaster.pop('error', 'Kesalahan', 'Silahkan Tambah Data Keuangan');

			return validationTab07;
			//return true;//skip mandatory tab
		}

		/* ---------------------------------------------------- DATA PENGALAMAN ------------------------------------------------ */


		$scope.checked = function (pengalamanStatus) {
			if (pengalamanStatus) {
				$scope.tanpaPengalaman = true;
			} else {
				$scope.tanpaPengalaman = false;
			}
			//console.log("TANPA PENGALAMAN = "+$scope.tanpaPengalaman);
		}


		form.dataPengalamanPekerjaanList = [];
		$scope.tablePengalamanPekerjaan = new ngTableParams({
			page: 1, // show first page
			count: 5 // count per page
		}, {
			counts: [], // hide page count
			total: form.dataPengalamanPekerjaanList.length, // length of data4
			getData: function ($defer, params) {
				$defer.resolve(form.dataPengalamanPekerjaanList.slice((params.page() - 1) * params.count(), params.page() * params.count()));
			}
		});

		form.dataMitraList = [];
		$scope.tableDataMitra = new ngTableParams({
			page: 1, // show first page
			count: 5 // count per page
		}, {
			counts: [], // hide page count
			total: form.dataMitraList.length, // length of data4
			getData: function ($defer, params) {
				$defer.resolve(form.dataMitraList.slice((params.page() - 1) * params.count(), params.page() * params.count()));
			}
		});

		form.dataWorkingProgressList = [];
		$scope.tableWorkingProgress = new ngTableParams({
			page: 1, // show first page
			count: 5 // count per page
		}, {
			counts: [], // hide page count
			total: form.dataWorkingProgressList.length, // length of data4
			getData: function ($defer, params) {
				$defer.resolve(form.dataWorkingProgressList.slice((params.page() - 1) * params.count(), params.page() * params.count()));
			}
		});

		var fileNameUpload = function (data) {
			var fileName = '';
			angular.forEach(data, function (item) {
				//item.upload();

				fileName = item.file.name;
			});
			return fileName;
		}

		$scope.addDataPengalaman = function (tipe) {
			var segmentasimodalinstance = $modal.open({
				templateUrl: '/pengalamanpekerjaanvendor.html',
				controller: 'PengalamanPekerjaanModalController',
				size: 'lg',
				resolve: {
					judulModal: function () {
						if (tipe === 'PELANGGAN') {
							return "Pengalaman Pekerjaan";
						} else if (tipe === 'MITRA') {
							return "Pengalaman Mitra Kerja";
						} else {
							return "Pekerjaan Sedang Berjalan";
						}
					},
					namaModal: function () {
						if (tipe === 'MITRA') {
							return "Nama Mitra";
						} else {
							return "Nama Pekerjaan";
						}
					},
					dataPengalaman: function () {
						return {};
					},
					bidangUsahaList: function () {
						return $scope.bidangUsahaList;
					},
					mataUangList: function () {
						return $scope.mataUangList;
					}
				}
			});
			segmentasimodalinstance.result.then(function (dataPengalaman) {
				if (dataPengalaman != undefined && dataPengalaman !== null) {
					if (tipe === 'PELANGGAN') {
						dataPengalaman.tipePengalaman = tipe;
						dataPengalaman.fileName = fileNameUpload(dataPengalaman.uploadBukti);
						form.dataPengalamanPekerjaanList.push(dataPengalaman);
						$scope.tablePengalamanPekerjaan.reload();
					} else if (tipe === 'MITRA') {
						dataPengalaman.tipePengalaman = tipe;
						dataPengalaman.fileName = fileNameUpload(dataPengalaman.uploadBukti);
						form.dataMitraList.push(dataPengalaman);
						$scope.tableDataMitra.reload();
					} else {
						dataPengalaman.tipePengalaman = tipe;
						dataPengalaman.fileName = fileNameUpload(dataPengalaman.uploadBukti);
						form.dataWorkingProgressList.push(dataPengalaman);
						$scope.tableWorkingProgress.reload();
					}
				}
			});
		}

		$scope.editDataPengalaman = function (index, dataPengalaman, tipe) {
			var segmentasimodalinstance = $modal.open({
				templateUrl: '/pengalamanpekerjaanvendor.html',
				controller: 'PengalamanPekerjaanModalController',
				size: 'lg',
				resolve: {
					judulModal: function () {
						if (tipe === 'PELANGGAN') {
							return "Pengalaman Pekerjaan";
						} else if (tipe === 'MITRA') {
							return "Pengalaman Mitra Kerja";
						} else {
							return "Pekerjaan Sedang Berjalan";
						}
					},
					namaModal: function () {
						if (tipe === 'MITRA') {
							return "Nama Mitra";
						} else {
							return "Nama Pekerjaan";
						}
					},
					dataPengalaman: function () {
						return dataPengalaman;
					},
					bidangUsahaList: function () {
						return $scope.bidangUsahaList;
					},
					mataUangList: function () {
						return $scope.mataUangList;
					}
				}
			});
			segmentasimodalinstance.result.then(function (dataPengalaman) {
				if (dataPengalaman != undefined && dataPengalaman !== null) {
					dataPengalaman.fileName = fileNameUpload(dataPengalaman.uploadBukti);
					if (tipe === 'PELANGGAN') {
						form.dataPengalamanPekerjaanList.splice(index, 1, dataPengalaman);
						$scope.tablePengalamanPekerjaan.reload();
					} else if (tipe === 'MITRA') {
						form.dataMitraList.splice(index, 1, dataPengalaman);
						$scope.tableDataMitra.reload();
					} else {
						form.dataWorkingProgressList.splice(index, 1, dataPengalaman);
						$scope.tableWorkingProgress.reload();
					}
				}
			});
		}

		$scope.removeDataPengalaman = function (index, dataPengalaman, tipe) {
			var segmentasimodalinstance = $modal.open({
				templateUrl: '/alertModal.html',
				controller: 'DeleteDataModalRegistrasiController',
				size: 'sm',
				resolve: {
					nameData: function () {
						return dataPengalaman.jenis;
					}
				}
			});
			segmentasimodalinstance.result.then(function () {
				if (tipe === 'PELANGGAN') {
					form.dataPengalamanPekerjaanList.splice(index, 1);
					$scope.tablePengalamanPekerjaan.reload();
				} else if (tipe === 'MITRA') {
					form.dataMitraList.splice(index, 1);
					$scope.tableDataMitra.reload();
				} else {
					form.dataWorkingProgressList.splice(index, 1);
					$scope.tableWorkingProgress.reload();
				}
			});
		}

		$scope.validasiDataPengalaman = function () {

			var dataPekerjaan = false;
			var dataMitra = false;
			var dataWP = false;

			if ($scope.tanpaPengalaman == false) {
				if (form.dataPengalamanPekerjaanList.length > 0)
					dataPekerjaan = true;
				else
					toaster.pop('error', 'Kesalahan', 'Silahkan Tambah Data Pengalaman Pekerjaan');

				if (form.dataMitraList.length > 0)
					dataMitra = true;
				else
					toaster.pop('error', 'Kesalahan', 'Silahkan Tambah Data Mitra');

				if (form.dataWorkingProgressList.length > 0)
					dataWP = true;
				else
					toaster.pop('error', 'Kesalahan', 'Silahkan Tambah Data Working Progress');

				if (dataPekerjaan == true && dataMitra == true && dataWP == true) {
					//var kapca = grecaptcha.getResponse();

					//    			    if(kapca.length == 0) {
					//    			    	toaster.pop('warning', 'Cotto-Matte', 'Kode Captcha tidak boleh ko-cong');
					//    			        return
					//    			    } else if(kapca.length != 0) {
					validasiUserUlang(form.userId);
					//    			    }
				}
			} else {
				validasiUserUlang(form.userId);
			}
		}

		var validasiUserUlang = function (userId) {
				$http.get($rootScope.backendAddress + '/procurement/registrasivendor/registrasiVendorServices/user/getUserByUserName/' + userId, {
					ignoreLoadingBar: true
				}).success(function (data, status, headers, config) {
					if (data.length > 0) {
						form.tabActiveStatus.tabDataPengalaman = false;
						form.tabActiveStatus.tabDataKeuangan = false;
						form.tabActiveStatus.tabPeralatan = false;
						form.tabActiveStatus.tabDataDokumentasi = false;
						form.tabActiveStatus.tabDataSegmentasi = false;
						form.tabActiveStatus.tabDataBank = false;
						form.tabActiveStatus.tabDataPerusahaan = false;
						form.tabActiveStatus.tabDataLogin = true;
						toaster.pop('error', 'Kesalahan', 'Email sudah pernah digunakan!!');
						document.getElementsByName("userId")[0].focus();
					} else {
						$scope.saveDataRegistrasi();
					}
				});
			}
			/* ---------------------------------------------------- SIMPAN DATA REGISTRASI ----------------------------------------- */

		$scope.saveDataRegistrasi = function () {
			var formDataUser = {
				roleId: 2
			};
			var peringatan = confirm("Yakin anda ingin menyimpan data Registrasi Vendor ini dan Data sudah BENAR?", "Peringatan");


			if (peringatan) {
				if (form.userId !== undefined && form.userId.length > 0) {
					formDataUser.username = form.userId;
					formDataUser.email = form.userId;
				}

				if (form.namaPengguna !== undefined && form.namaPengguna.length > 0) {
					formDataUser.namaPengguna = form.namaPengguna;
				}

				if (form.password !== undefined && form.password.length > 0) {
					formDataUser.password = form.password;
				}

				$http({
					method: 'POST',
					url: $rootScope.backendAddress + '/procurement/registrasivendor/registrasiVendorServices/user/create',
					headers: {
						'Content-Type': 'application/x-www-form-urlencoded'
					},
					transformRequest: function (obj) {
						var str = [];
						for (var p in obj)
							str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
						return str.join("&");
					},
					data: formDataUser
				}).success(function (data, status, headers, config) {
					console.log('success user: 1');
					if (typeof data !== 'undefined') {
						var formDataVendor = {
							user: data.id,
							isPKS: form.isPKS
						};
						
						if (form.NamaPerusahaan != undefined && form.NamaPerusahaan.length > 0) {
							formDataVendor.nama = form.NamaPerusahaan;
						}

						if (form.alamatPerusahaan != undefined && form.alamatPerusahaan.length > 0) {
							formDataVendor.Alamat = form.alamatPerusahaan;
						}

						if (form.TeleponPerusahaan != undefined && form.TeleponPerusahaan.length > 0) {
							formDataVendor.nomorTelpon = form.TeleponPerusahaan;
						}

						if (form.EmailPerusahaan != undefined && form.EmailPerusahaan.length > 0) {
							formDataVendor.email = form.EmailPerusahaan;
						}

						if (form.NPWPPerusahaan != undefined && form.NPWPPerusahaan.length > 0) {
							formDataVendor.npwp = form.NPWPPerusahaan;
						}

						if (form.NamaPerusahaan != undefined && form.NamaPerusahaan.length > 0) {
							formDataVendor.penanggungJawab = form.NamaPerusahaan;
						}
						
						// Upload-an Logo Ama Header Images
        				if (uploadVendorLogo !== undefined && uploadVendorLogo.queue.length > 0) {
        					angular.forEach(uploadVendorLogo.queue, function(item) {
        						if(item.isUploaded) {
        							formDataVendor.logoImage = item.realFileName;
        							formDataVendor.logoImageSize = item.file.size;
        						}
        					});
        				}
        				if (uploadVendorHeadImg !== undefined && uploadVendorHeadImg.queue.length > 0) {
        					angular.forEach(uploadVendorHeadImg.queue, function(item) {
        						if(item.isUploaded) {
        							formDataVendor.backgroundImage = item.realFileName;
        							formDataVendor.backgroundImageSize = item.file.size;
        						}
        					});
        				}
        				
        				if (form.deskripsi != undefined && form.deskripsi.length > 0) {
        					formDataVendor.deskripsi = form.deskripsi;
        				}
        				
        				if (form.kotaPerusahaan !== undefined && form.kotaPerusahaan.id > 0) {
        					formDataVendor.kota = form.kotaPerusahaan.lokasi_nama;
						}
        				
        				//ini organisasiId yg dikirim ke SAP
        				if (form.unitTerdaftar !== undefined && form.unitTerdaftar.id > 0) {
        					formDataVendor.afcoId = form.unitTerdaftar.id;
						}
        				
        				if (form.provinsiPerusahaan !== undefined && form.provinsiPerusahaan.id > 0) {
        					formDataVendor.provinsi = form.provinsiPerusahaan.lokasi_nama;
						}
        				
        				
						$http({
							method: 'POST',
							url: $rootScope.backendAddress + '/procurement/registrasivendor/registrasiVendorServices/vendor/create',
							headers: {
								'Content-Type': 'application/x-www-form-urlencoded'
							},
							transformRequest: function (obj) {
								var str = [];
								for (var p in obj)
									str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
								return str.join("&");
							},
							data: formDataVendor
						}).success(function (data, status, headers, config) {
							console.log('success vendor services: 2');
							if (typeof data !== 'undefined') {
								var paramData = {
									vendor: data.id
								};

								if (form.pilihPKP !== undefined) {
									paramData.jenisPajakPerusahaan = form.pilihPKP.name;
								}

								if (form.nomorPKP !== undefined && form.nomorPKP.length > 0) {
									paramData.nomorPKP = form.nomorPKP;
								}
								
								if (form.title.title !== undefined) {
									paramData.title = form.title.title;
								}

								if (form.kualifikasiVendor !== undefined && form.kualifikasiVendor.id > 0) {
									paramData.kualifikasiVendor = form.kualifikasiVendor.id;
								}

								if (form.unitTerdaftar !== undefined && form.unitTerdaftar.id > 0) {
									paramData.unitTerdaftar = form.unitTerdaftar.nama;
								}
								
								if (form.bussinessArea !== undefined && form.bussinessArea.id > 0) {
									paramData.bussinessArea = form.bussinessArea.id;
								}

								if (form.jenisPerusahaan !== undefined && form.jenisPerusahaan.id > 0) {
									paramData.tipePerusahaan = form.jenisPerusahaan.nama;
								}

								if (form.NamaPerusahaan !== undefined && form.NamaPerusahaan.length > 0) {
									paramData.namaPerusahaan = form.NamaPerusahaan;
								}

								if (form.NPWPPerusahaan !== undefined && form.NPWPPerusahaan.length > 0) {
									paramData.npwpPerusahaan = form.NPWPPerusahaan;
								}
								
								if (form.namaNPWP !== undefined && form.namaNPWP.length > 0) {
									paramData.namaNPWP = form.namaNPWP;
								}
								
								if (form.alamatNPWP !== undefined && form.alamatNPWP.length > 0) {
									paramData.alamatNPWP = form.alamatNPWP;
								}
								
								if (form.kotaNPWP !== undefined && form.kotaNPWP.length > 0) {
									paramData.kotaNPWP = form.kotaNPWP;
								}

								if (form.NamaSingkatan !== undefined && form.NamaSingkatan.length > 0) {
									paramData.namaSingkatan = form.NamaSingkatan;
								}

								if (form.alamatPerusahaan !== undefined && form.alamatPerusahaan.length > 0) {
									paramData.alamat = form.alamatPerusahaan;
								}

								if (form.kotaPerusahaan !== undefined && form.kotaPerusahaan.id > 0) {
									paramData.kota = form.kotaPerusahaan.lokasi_nama;
								}

								if (form.kodeposPerusahaan !== undefined && form.kodeposPerusahaan.length > 0) {
									paramData.kodePos = form.kodeposPerusahaan;
								}
                                

                                if (form.poboxPerusahaan !== undefined && form.poboxPerusahaan.length > 0) {
									paramData.poBox = form.poboxPerusahaan;
								}

								if (form.provinsiPerusahaan !== undefined && form.provinsiPerusahaan.id > 0) {
									paramData.provinsi = form.provinsiPerusahaan.lokasi_nama;
								}

								if (form.TeleponPerusahaan !== undefined && form.TeleponPerusahaan.length > 0) {
									paramData.telephone = form.TeleponPerusahaan;
								}

								if (form.NoFaxPerusahaan !== undefined && form.NoFaxPerusahaan.length > 0) {
									paramData.faksimile = form.NoFaxPerusahaan;
								}

								if (form.EmailPerusahaan !== undefined && form.EmailPerusahaan.length > 0) {
									paramData.email = form.EmailPerusahaan;
								}

								if (form.WebsitePerusahaan !== undefined && form.WebsitePerusahaan.length > 0) {
									paramData.website = form.WebsitePerusahaan;
								}

								if (form.NamaContactPerson !== undefined && form.NamaContactPerson.length > 0) {
									paramData.namaContactPerson = form.NamaContactPerson;
								}

								if (form.NoHPContactPerson !== undefined && form.NoHPContactPerson.length > 0) {
									paramData.hpContactPerson = form.NoHPContactPerson;
								}

								if (form.EmailContactPerson !== undefined && form.EmailContactPerson.length > 0) {
									paramData.emailContactPerson = form.EmailContactPerson;
								}

								if (form.NoKTPContactPerson !== undefined && form.NoKTPContactPerson.length > 0) {
									paramData.ktpContactPerson = form.NoKTPContactPerson;
								}
								
								if (form.NoKKContactPerson !== undefined && form.NoKKContactPerson.length > 0) {
									paramData.nomorKKContactPerson = form.NoKKContactPerson;
								}
								
								if (form.noAktaPendirian !== undefined && form.noAktaPendirian.length > 0) {
									paramData.noAktaPendirian = form.noAktaPendirian;
								}
								
								if (form.JumlahKaryawan !== undefined && form.JumlahKaryawan.length > 0) {
									paramData.jumlahKaryawan = form.JumlahKaryawan;
								}
								
								if (form.TanggalBerdiri !== undefined) {
									paramData.tanggalBerdiri = form.TanggalBerdiri;
								}
								
								console.log("UNIT TERDAFTAR = " + JSON.stringify(paramData));
								$http({
									method: 'POST',
									url: $rootScope.backendAddress + '/procurement/registrasivendor/registrasiVendorServices/vendorprofile/createVendorProfile',
									headers: {
										'Content-Type': 'application/x-www-form-urlencoded'
									},
									transformRequest: function (obj) {
										var str = [];
										for (var p in obj)
											str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
										return str.join("&");
									},
									data: paramData
								}).success(function (data, status, headers, config) {
									console.log('success vendor profile: 3');
									if (typeof data !== 'undefined') {

										insertVendorSKD(data.vendor.id);
										
										insertDataPenanggungJawab(data.vendor.id);

										insertDatabankVendor(data.vendor.id);

										insertSegmentasiVendor(data.vendor.id);

										insertDokumenVendor(data.vendor.id, data.vendor.nama);

										insertPeralatan(data.vendor.id, data.vendor.nama);

										insertKeuangan(data.vendor.id);

										if ($scope.tanpaPengalaman == false){
											insertPengalaman(data.vendor.id, data.vendor.nama);
											console.log('insert pengalaman');
										}else{
											toaster.pop('Success', 'Berhasil', 'Data Registrasi berhasil disimpan, Silahkan LOG-IN dengan Email anda yang telah didaftarkan');
											$timeout (function() {		
												$state.go("page.portal");
											}, 5000);
										}

									}
								});
							}
						});
					}
				});
			}
		}

		var dataService = function (targetURI, paramData) {
			$http({
				method: 'POST',
				url: targetURI,
				headers: {
					'Content-Type': 'application/x-www-form-urlencoded'
				},
				transformRequest: function (obj) {
					var str = [];
					for (var p in obj)
						str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
					return str.join("&");
				},
				data: paramData
			}).success(function (data, status, headers, config) {
				console.log("dataService PROSES SIMPAN DATA BERHASIL");
			}).error(function (data, status, headers, config) {
				$scope.message = 'Proses Penyimpanan data gagal';
				console.log("dataService PROSES SIMPAN DATA BERMASALAH");
			});
		}

		var insertDataPenanggungJawab = function (vendorId) {
			var targetURI = $rootScope.backendAddress + '/procurement/registrasivendor/registrasiVendorServices/vendorpic/createVendorPIC';

			if (form.penanggungJawabList !== undefined && form.penanggungJawabList.length > 0) {
				angular.forEach(form.penanggungJawabList, function (pic, index) {
					if (typeof pic.jabatan !== 'undefined') {
						pic.vendor = vendorId;
						pic.jabatan = pic.jabatan.id;

						dataService(targetURI, pic);
					}
				});
			}
		}

		var insertDatabankVendor = function (vendorId) {
			var targetURI = $rootScope.backendAddress + '/procurement/registrasivendor/registrasiVendorServices/bankvendor/createBankVendor';

			if (form.dataBankList !== undefined && form.dataBankList.length > 0) {
				angular.forEach(form.dataBankList, function (dataBank, index) {
					dataBank.vendor = vendorId;
					if (dataBank.negara != undefined)
						dataBank.negara = dataBank.negara.nama;
					dataBank.mataUang = dataBank.mataUang.id;

					console.log("DATA BANK YG DISIMPAN = " + JSON.stringify(dataBank));
					dataService(targetURI, dataBank);
				});
			}
		}

		var insertSegmentasiVendor = function (vendorId) {
			var targetURI = $rootScope.backendAddress + '/procurement/registrasivendor/registrasiVendorServices/segmentasivendor/createSegmentasiVendor';

			if (form.dataSegmentasiList !== undefined && form.dataSegmentasiList.length > 0) {
				angular.forEach(form.dataSegmentasiList, function (dataSegmentasi, index) {

					var tglMulai = new Date(dataSegmentasi.tanggalMulai);
					var tglAkhir = new Date(dataSegmentasi.tanggalBerakhir);
					if (tglMulai == 'Invalid Date')
						tglMulai = new Date();
					if (tglAkhir == 'Invalid Date')
						tglAkhir = new Date();

					var dataSimpan = {
						vendor: vendorId,
						asosiasi: dataSegmentasi.asosiasi.nama,
						nomor: dataSegmentasi.nomor,
						subBidangUsaha: dataSegmentasi.subBidangUsaha.id,
						email: form.userId,
						tanggalMulai: tglMulai,
						tanggalBerakhir: tglAkhir
					}

					console.log("DATA SEGMENTASI SIMPAN = " + JSON.stringify(dataSimpan));
					dataService(targetURI, dataSimpan);
				});
			}
		}
		
		//-----------------------------------------skd------------------------------------------------------
		
		var insertVendorSKD = function(vendorId){
			var targetURISKD = $rootScope.backendAddress + '/procurement/vendor/DokumenRegistrasiVendorServices/createVendorSKD';
			
			if ($scope.dokumenSPB !== undefined && $scope.dokumenSPB.namaDokumen !== undefined) {
				var formDokumenUpload = {
					vendor: vendorId,
					alamat: $scope.dokumenSKD.alamat,
					namaDokumen: $scope.dokumenSKD.namaDokumen
					
				}

				if ($scope.dokumenSKD.tanggalTerbit !== undefined) {
					formDokumenUpload.tanggalTerbit = new Date($scope.dokumenSKD.tanggalTerbit);
				}

				if ($scope.dokumenSKD.tanggalBerakhir !== undefined) {
					formDokumenUpload.tanggalBerakhir = new Date($scope.dokumenSKD.tanggalBerakhir);
				}

				if (uploadDokumenSKD !== undefined && uploadDokumenSKD.queue.length > 0) {
					//Hasil upload
					angular.forEach(uploadDokumenSKD.queue, function (item) {
						console.log("Dokumen SKD IS UPLOADED = " + item.isUploaded);
						if (item.isUploaded) {
							formDokumenUpload.fileName = item.realFileName;
							formDokumenUpload.pathFile = item.file.name;
							formDokumenUpload.fileSize = item.file.size;
							console.log("ISI DOKUMEN SKD = " + JSON.stringify(formDokumenUpload));
						}
					});
				}

				dataService(targetURISKD, formDokumenUpload);
			}
		}

		var insertDokumenVendor = function (vendorId, namaVendor) {
			var targetURI = $rootScope.backendAddress + '/procurement/registrasivendor/registrasiVendorServices/dokumenregistrasivendor/createDokumenRegistrasiVendor';
			
			
			if ($scope.VendorRegistrasiForm !== undefined && $scope.VendorRegistrasiForm.namaDokumen !== undefined) {
				var formDokumenUpload = {
					vendor: vendorId,
					subject: 'Vendor Registrasi Form',
					namaDokumen: $scope.VendorRegistrasiForm.namaDokumen
				}

				if ($scope.VendorRegistrasiForm.tanggalTerbit !== undefined) {
					formDokumenUpload.tanggalTerbit = new Date($scope.VendorRegistrasiForm.tanggalTerbit);
				}

				if ($scope.VendorRegistrasiForm.tanggalBerakhir !== undefined) {
					formDokumenUpload.tanggalBerakhir = new Date($scope.VendorRegistrasiForm.tanggalBerakhir);
				}

				if (uploadVendorRegistrasiForm !== undefined && uploadVendorRegistrasiForm.queue.length > 0) {
					//dokumen upload
					angular.forEach(uploadVendorRegistrasiForm.queue, function (item) {
						console.log("Vendor Registrasi Form IS UPLOADED = " + item.isUploaded);
						if (item.isUploaded) {
							formDokumenUpload.fileName = item.realFileName;
							formDokumenUpload.pathFile = item.file.name;
							formDokumenUpload.fileSize = item.file.size;
						}
					});
				}

				dataService(targetURI, formDokumenUpload);
			}

			if ($scope.SalinanAktePendirian !== undefined && $scope.SalinanAktePendirian.namaDokumen !== undefined) {
				var formDokumenUpload = {
					vendor: vendorId,
					subject: 'Salinan Akte Pendirian Perusahaan dan Perubahan - Perubahannya',
					namaDokumen: $scope.SalinanAktePendirian.namaDokumen
				}

				if ($scope.SalinanAktePendirian.tanggalTerbit !== undefined) {
					formDokumenUpload.tanggalTerbit = new Date($scope.SalinanAktePendirian.tanggalTerbit);
				}

				if ($scope.SalinanAktePendirian.tanggalBerakhir !== undefined) {
					formDokumenUpload.tanggalBerakhir = new Date($scope.SalinanAktePendirian.tanggalBerakhir);
				}

				if (uploadSalinanAktePendirian !== undefined && uploadSalinanAktePendirian.queue.length > 0) {
					//dokumen upload
					angular.forEach(uploadSalinanAktePendirian.queue, function (item) {
						console.log("Salinan Akte Pendirian IS UPLOADED = " + item.isUploaded);
						if (item.isUploaded) {
							formDokumenUpload.fileName = item.realFileName;
							formDokumenUpload.pathFile = item.file.name;
							formDokumenUpload.fileSize = item.file.size;
						}

					});
				}

				dataService(targetURI, formDokumenUpload);
			}

			if ($scope.SalinanTandaDaftar !== undefined && $scope.SalinanTandaDaftar.namaDokumen !== undefined) {
				var formDokumenUpload = {
					vendor: vendorId,
					subject: 'Salinan Tanda Daftar Perusahaan (TDP)',
					namaDokumen: $scope.SalinanTandaDaftar.namaDokumen
				}

				if ($scope.SalinanTandaDaftar.tanggalTerbit !== undefined) {
					formDokumenUpload.tanggalTerbit = new Date($scope.SalinanTandaDaftar.tanggalTerbit);
				}

				if ($scope.SalinanTandaDaftar.tanggalBerakhir !== undefined) {
					formDokumenUpload.tanggalBerakhir = new Date($scope.SalinanTandaDaftar.tanggalBerakhir);
				}

				if (uploadSalinanTandaDaftar !== undefined && uploadSalinanTandaDaftar.queue.length > 0) {
					//Hasil upload
					angular.forEach(uploadSalinanTandaDaftar.queue, function (item) {
						console.log("Salinan Tanda Daftar IS UPLOADED = " + item.isUploaded);
						if (item.isUploaded) {
							formDokumenUpload.fileName = item.realFileName;
							formDokumenUpload.pathFile = item.file.name;
							formDokumenUpload.fileSize = item.file.size;
							console.log("ISI DOKUMEN TDP = " + JSON.stringify(formDokumenUpload));
						}
					});
				}

				dataService(targetURI, formDokumenUpload);
			}

			if ($scope.SalinanSuratIjinUsaha !== undefined && $scope.SalinanSuratIjinUsaha.namaDokumen !== undefined) {
				var formDokumenUpload = {
					vendor: vendorId,
					subject: 'Salinan Surat Ijin Usaha (SIUP SIUJK)',
					namaDokumen: $scope.SalinanSuratIjinUsaha.namaDokumen
				}

				if ($scope.SalinanSuratIjinUsaha.tanggalTerbit !== undefined) {
					formDokumenUpload.tanggalTerbit = new Date($scope.SalinanSuratIjinUsaha.tanggalTerbit);
				}

				if ($scope.SalinanSuratIjinUsaha.tanggalBerakhir !== undefined) {
					formDokumenUpload.tanggalBerakhir = new Date($scope.SalinanSuratIjinUsaha.tanggalBerakhir);
				}

				if (uploadSalinanSuratIjinUsaha !== undefined && uploadSalinanSuratIjinUsaha.queue.length > 0) {
					//dokumen upload
					angular.forEach(uploadSalinanSuratIjinUsaha.queue, function (item) {
						console.log("Salinan Surat Ijin Usaha IS UPLOADED = " + item.isUploaded);
						if (item.isUploaded) {
							formDokumenUpload.fileName = item.realFileName;
							formDokumenUpload.pathFile = item.file.name;
							formDokumenUpload.fileSize = item.file.size;
						}
					});
				}

				dataService(targetURI, formDokumenUpload);
			}

			if ($scope.BuktiFisikPerusahaan !== undefined && $scope.BuktiFisikPerusahaan.namaDokumen !== undefined) {
				var formDokumenUpload = {
					vendor: vendorId,
					subject: 'Bukti Fisik Perusahaan',
					namaDokumen: $scope.BuktiFisikPerusahaan.namaDokumen
				}

				if ($scope.BuktiFisikPerusahaan.tanggalTerbit !== undefined) {
					formDokumenUpload.tanggalTerbit = new Date($scope.BuktiFisikPerusahaan.tanggalTerbit);
				}

				if ($scope.BuktiFisikPerusahaan.tanggalBerakhir !== undefined) {
					formDokumenUpload.tanggalBerakhir = new Date($scope.BuktiFisikPerusahaan.tanggalBerakhir);
				}

				if (uploadBuktiFisikPerusahaan !== undefined && uploadBuktiFisikPerusahaan.queue.length > 0) {
					//dokumen upload
					angular.forEach(uploadBuktiFisikPerusahaan.queue, function (item) {
						console.log("Bukti Fisik Perusahaan IS UPLOADED = " + item.isUploaded);
						if (item.isUploaded) {
							formDokumenUpload.fileName = item.realFileName;
							formDokumenUpload.pathFile = item.file.name;
							formDokumenUpload.fileSize = item.file.size;
						}
					});
				}

				dataService(targetURI, formDokumenUpload);
			}

			if ($scope.DokumenQuality !== undefined && $scope.DokumenQuality.namaDokumen !== undefined) {
				var formDokumenUpload = {
					vendor: vendorId,
					subject: 'Dokumen Quality yang dimiliki',
					namaDokumen: $scope.DokumenQuality.namaDokumen
				}

				if ($scope.DokumenQuality.tanggalTerbit !== undefined) {
					formDokumenUpload.tanggalTerbit = new Date($scope.DokumenQuality.tanggalTerbit);
				}

				if ($scope.DokumenQuality.tanggalBerakhir !== undefined) {
					formDokumenUpload.tanggalBerakhir = new Date($scope.DokumenQuality.tanggalBerakhir);
				}

				if (uploadDokumenQuality !== undefined && uploadDokumenQuality.queue.length > 0) {
					//dokumen upload
					angular.forEach(uploadDokumenQuality.queue, function (item) {
						console.log("Dokumen Quality IS UPLOADED = " + item.isUploaded);
						if (item.isUploaded) {
							formDokumenUpload.fileName = item.realFileName;
							formDokumenUpload.pathFile = item.file.name;
							formDokumenUpload.fileSize = item.file.size;
						}
					});
				}

				dataService(targetURI, formDokumenUpload);
			}

			if ($scope.DokumenTeknik !== undefined && $scope.DokumenTeknik.namaDokumen !== undefined) {
				var formDokumenUpload = {
					vendor: vendorId,
					subject: 'Dokumen Teknik',
					namaDokumen: $scope.DokumenTeknik.namaDokumen
				}

				if ($scope.DokumenTeknik.tanggalTerbit !== undefined) {
					formDokumenUpload.tanggalTerbit = new Date($scope.DokumenTeknik.tanggalTerbit);
				}

				if ($scope.DokumenTeknik.tanggalBerakhir !== undefined) {
					formDokumenUpload.tanggalBerakhir = new Date($scope.DokumenTeknik.tanggalBerakhir);
				}

				if (uploadDokumenTeknik !== undefined && uploadDokumenTeknik.queue.length > 0) {
					//dokumen upload
					angular.forEach(uploadDokumenTeknik.queue, function (item) {
						console.log("Dokumen Teknik IS UPLOADED = " + item.isUploaded);
						if (item.isUploaded) {
							formDokumenUpload.fileName = item.realFileName;
							formDokumenUpload.pathFile = item.file.name;
							formDokumenUpload.fileSize = item.file.size;
						}
					});
				}

				dataService(targetURI, formDokumenUpload);
			}
			
			//---------------------------------------- insert PKS ------------------------------------------
			if ($scope.dokumenPKS !== undefined && $scope.dokumenPKS.namaDokumen !== undefined) {
				var formDokumenUpload = {
					vendor: vendorId,
					subject: 'Dokumen PKS',
					namaDokumen: $scope.dokumenPKS.namaDokumen
				}

				if ($scope.dokumenPKS.tanggalTerbit !== undefined) {
					formDokumenUpload.tanggalTerbit = new Date($scope.dokumenPKS.tanggalTerbit);
				}

				if ($scope.dokumenPKS.tanggalBerakhir !== undefined) {
					formDokumenUpload.tanggalBerakhir = new Date($scope.dokumenPKS.tanggalBerakhir);
				}

				if (uploadDokumenPKS !== undefined && uploadDokumenPKS.queue.length > 0) {
					//Hasil upload
					angular.forEach(uploadDokumenPKS.queue, function (item) {
						console.log("Dokumen PKS IS UPLOADED = " + item.isUploaded);
						if (item.isUploaded) {
							formDokumenUpload.fileName = item.realFileName;
							formDokumenUpload.pathFile = item.file.name;
							formDokumenUpload.fileSize = item.file.size;
							console.log("ISI DOKUMEN PKS = " + JSON.stringify(formDokumenUpload));
						}
					});
				}

				dataService(targetURI, formDokumenUpload);
			}
			
			
			//---------------------------------------- insert SPR ------------------------------------------
			if ($scope.dokumenSPR !== undefined && $scope.dokumenSPR.namaDokumen !== undefined) {
				var formDokumenUpload = {
					vendor: vendorId,
					subject: 'Dokumen SPR',
					namaDokumen: $scope.dokumenSPR.namaDokumen
				}

				if ($scope.dokumenSPR.tanggalTerbit !== undefined) {
					formDokumenUpload.tanggalTerbit = new Date($scope.dokumenSPR.tanggalTerbit);
				}

				if ($scope.dokumenSPR.tanggalBerakhir !== undefined) {
					formDokumenUpload.tanggalBerakhir = new Date($scope.dokumenSPR.tanggalBerakhir);
				}

				if (uploadDokumenSPR !== undefined && uploadDokumenSPR.queue.length > 0) {
					//Hasil upload
					angular.forEach(uploadDokumenSPR.queue, function (item) {
						console.log("Dokumen SPR IS UPLOADED = " + item.isUploaded);
						if (item.isUploaded) {
							formDokumenUpload.fileName = item.realFileName;
							formDokumenUpload.pathFile = item.file.name;
							formDokumenUpload.fileSize = item.file.size;
							console.log("ISI DOKUMEN SPR = " + JSON.stringify(formDokumenUpload));
						}
					});
				}

				dataService(targetURI, formDokumenUpload);
			}
			
			//---------------------------------------- insert SPB ------------------------------------------
			if ($scope.dokumenSPB !== undefined && $scope.dokumenSPB.namaDokumen !== undefined) {
				var formDokumenUpload = {
					vendor: vendorId,
					subject: 'Dokumen SPB',
					namaDokumen: $scope.dokumenSPB.namaDokumen
				}

				if ($scope.dokumenSPB.tanggalTerbit !== undefined) {
					formDokumenUpload.tanggalTerbit = new Date($scope.dokumenSPB.tanggalTerbit);
				}

				if ($scope.dokumenSPB.tanggalBerakhir !== undefined) {
					formDokumenUpload.tanggalBerakhir = new Date($scope.dokumenSPB.tanggalBerakhir);
				}

				if (uploadDokumenSPB !== undefined && uploadDokumenSPB.queue.length > 0) {
					//Hasil upload
					angular.forEach(uploadDokumenSPB.queue, function (item) {
						console.log("Dokumen SPR IS UPLOADED = " + item.isUploaded);
						if (item.isUploaded) {
							formDokumenUpload.fileName = item.realFileName;
							formDokumenUpload.pathFile = item.file.name;
							formDokumenUpload.fileSize = item.file.size;
							console.log("ISI DOKUMEN SPB = " + JSON.stringify(formDokumenUpload));
						}
					});
				}

				dataService(targetURI, formDokumenUpload);
			}
			
			//--------------------------------------------------------------------------------------------------
		}

		var insertPeralatan = function (vendorId, namaVendor) {
			var targetURI = $rootScope.backendAddress + '/procurement/registrasivendor/registrasiVendorServices/peralatanvendor/createPeralatanVendor';

			if (form.dataPeralatanList !== undefined && form.dataPeralatanList.length > 0) {
				angular.forEach(form.dataPeralatanList, function (dataPeralatan, index) {
					dataPeralatan.vendor = vendorId;
					dataPeralatan.kondisi = dataPeralatan.kondisi.id;
					dataPeralatan.buktiKepemilikan = dataPeralatan.buktiKepemilikan.id;

					if (dataPeralatan.uploadDokumenBuktiKepemilikan !== undefined && dataPeralatan.uploadDokumenBuktiKepemilikan.length > 0) {
						angular.forEach(dataPeralatan.uploadDokumenBuktiKepemilikan, function (item) {
							console.log("Dokumen Bukti Kepemilikan IS UPLOADED = " + item.isUploaded);
							if (item.isUploaded) {
								dataPeralatan.fileNameBuktiKepemilikan = item.realFileName;
								dataPeralatan.pathFileBuktiKepemilikan = item.file.name;
								dataPeralatan.fileSizeBuktiKepemilikan = item.file.size;
							}
						});
					}
					if (dataPeralatan.uploadGambarPeralatanAsset !== undefined && dataPeralatan.uploadGambarPeralatanAsset.length > 0) {
						angular.forEach(dataPeralatan.uploadGambarPeralatanAsset, function (item) {
							console.log("Gambar Peralatan Asset IS UPLOADED = " + item.isUploaded);
							if (item.isUploaded) {
								dataPeralatan.fileNameGambarPeralatan = item.realFileName
								dataPeralatan.pathFileGambarPeralatan = item.file.name;
								dataPeralatan.fileSizeGambarPeralatan = item.file.size;
							}
						});
					}
					dataService(targetURI, dataPeralatan);
				});
			}
		}

		var insertKeuangan = function (vendorId) {
			var targetURI = $rootScope.backendAddress + '/procurement/registrasivendor/registrasiVendorServices/keuanganvendor/createKeuanganVendor';

			if (form.dataKeuanganList !== undefined && form.dataKeuanganList.length > 0) {
				angular.forEach(form.dataKeuanganList, function (data, index) {
					data.vendor = vendorId;
					data.tanggalAudit = new Date(data.tanggalAudit);

					dataService(targetURI, data);
				});
			}
		}

		var insertPengalaman = function (vendorId, namaVendor) {
			console.log('insertPengalaman');
			var targetURI = $rootScope.backendAddress + '/procurement/registrasivendor/registrasiVendorServices/pengalamanvendor/createPengalamanVendor';

			if (form.dataPengalamanPekerjaanList !== undefined && form.dataPengalamanPekerjaanList.length > 0) {
				angular.forEach(form.dataPengalamanPekerjaanList, function (data, index) {
					data.vendor = vendorId;
					data.mulaiKerjasama = new Date(data.mulaiKerjasama);
					data.mataUang = data.mataUang.id;
					data.bidangUsaha = data.bidangUsaha.nama;

					if (data.uploadBukti !== undefined && data.uploadBukti.length > 0) {
						angular.forEach(data.uploadBukti, function (item) {
							console.log("Pengalaman Pekerjaan IS UPLOADED = " + item.isUploaded);
							if (item.isUploaded) {
								data.fileName = item.realFileName;
								data.pathFile = item.file.name;
								data.fileSize = item.file.size;
							}
						});
					}

					dataService(targetURI, data);
				});
			}

			if (form.dataMitraList !== undefined && form.dataMitraList.length > 0) {
				angular.forEach(form.dataMitraList, function (data, index) {
					data.vendor = vendorId;
					data.mulaiKerjasama = new Date(data.mulaiKerjasama);
					data.mataUang = data.mataUang.id;
					data.bidangUsaha = data.bidangUsaha.nama;

					if (data.uploadBukti !== undefined && data.uploadBukti.length > 0) {
						angular.forEach(data.uploadBukti, function (item) {
							console.log("Data Mitra IS UPLOADED = " + item.isUploaded);
							if (item.isUploaded) {
								data.fileName = item.realFileName;
								data.pathFile = item.file.name;
								data.fileSize = item.file.size;
							}
						});
					}

					dataService(targetURI, data);
				});
			}

			if (form.dataWorkingProgressList !== undefined && form.dataWorkingProgressList.length > 0) {
				angular.forEach(form.dataWorkingProgressList, function (data, index) {
					data.vendor = vendorId;
					data.mulaiKerjasama = new Date(data.mulaiKerjasama);
					data.mataUang = data.mataUang.id;
					data.bidangUsaha = data.bidangUsaha.nama;

					if (data.uploadBukti !== undefined && data.uploadBukti.length > 0) {
						angular.forEach(data.uploadBukti, function (item) {
							console.log("Data Working Progress IS UPLOADED = " + item.isUploaded);
							if (item.isUploaded) {
								data.fileName = item.realFileName;
								data.pathFile = item.file.name;
								data.fileSize = item.file.size;
							}
						});
					}

					dataService(targetURI, data);
				});
			}
			
			toaster.pop('Success', 'Berhasil', 'Data Registrasi berhasil disimpan, Silahkan LOG-IN dengan Email anda yang telah didaftarkan');
			$timeout (function() {		
				$state.go("page.portal");
			}, 5000);
					
		}

		var uploadVendorLogo = $scope.uploadVendorLogo = new FileUploader({
            url: $rootScope.uploadBackendAddress,
            method: 'POST'
        });
		
		uploadVendorLogo.filters.push({
			name: 'customFilter',
			fn: function (item /*{File|FileLikeObject}*/ , options) {
				return item.type=='image/jpeg' || item.type=='image/png' || item.type=='image/gif';
			}
		});

		uploadVendorLogo.onCompleteItem = function (fileItem, response, status, headers) {
			console.info('onCompleteItem', fileItem, response, status, headers);
			fileItem.realFileName = response.fileName;
		};
		
		$scope.uploadLogo = function() {
			if(uploadVendorLogo.queue != undefined && uploadVendorLogo.queue.length > 0) {
				angular.forEach(uploadVendorLogo.queue, function(item) {
	        		item.upload();
	            });
			} else {
				toaster.pop('error', 'Kesalahan Format', 'Hanya mampu untuk Upload .jpg, .png dan .gif');
			}
		}
		
		var uploadVendorHeadImg = $scope.uploadVendorHeadImg = new FileUploader({
            url: $rootScope.uploadBackendAddress,
            method: 'POST'
        });
		
		uploadVendorHeadImg.filters.push({
			name: 'customFilter',
			fn: function (item /*{File|FileLikeObject}*/ , options) {
				return item.type=='image/jpeg' || item.type=='image/png';
			}
		});

		uploadVendorHeadImg.onCompleteItem = function (fileItem, response, status, headers) {
			console.info('onCompleteItem', fileItem, response, status, headers);
			fileItem.realFileName = response.fileName;
		};
		
		$scope.uploadHeaderImg = function() {
			if(uploadVendorHeadImg.queue != undefined && uploadVendorHeadImg.queue.length > 0) {
				angular.forEach(uploadVendorHeadImg.queue, function(item) {
	        		item.upload();
	            });
			} else {
				toaster.pop('error', 'Kesalahan Format', 'Hanya mampu untuk Upload .jpg dan .png');
			}
		}
	}

	RegistrasiVendorController.$inject = ['$http', '$scope', '$rootScope', '$filter', 'ngTableParams', '$modal', '$state', 'FileUploader', 'toaster', '$resource', '$timeout'];
})();


/* ---------------------------------------------------- KUMPULAN MODAL REGISTRASI -------------------------------------- */

angular.module('naut')
	.controller('DeleteDataModalRegistrasiController', ['$scope', '$modalInstance', 'nameData', function ($scope, $modalInstance, nameData) {
		$scope.nameData = nameData

		$scope.ok = function () {
			$modalInstance.close('closed');
		};

		$scope.cancel = function () {
			$modalInstance.dismiss('cancel');
		};
	}]);

angular.module('naut')
	.controller('BankVendorModalController', ['$rootScope', '$scope', '$http', '$modalInstance', '$modal', 'dataBankVendor', 'mataUangList', 'negaraList', 'toaster', function ($rootScope, $scope, $http, $modalInstance, $modal, dataBankVendor, mataUangList, negaraList, toaster) {
		$scope.dataBankVendor = dataBankVendor;
		$scope.mataUangList = mataUangList;
		$scope.negaraList = negaraList;

		$scope.cariBank = function () {
			var bankmodalinstance = $modal.open({
				templateUrl: '/bankMaster.html',
				controller: 'BankModalController',
				size: 'lg',
				resolve: {
					dataBankMaster: function () {
						return {};
					}
				}
			});
			bankmodalinstance.result.then(function (dataBankMaster) {
				if (dataBankMaster != undefined && dataBankMaster !== null) {
					dataBankVendor.namaBank = dataBankMaster.namaBank;
					dataBankVendor.cabangBank = dataBankMaster.cabangBank;
					dataBankVendor.alamatBank = dataBankMaster.alamatBank;
					dataBankVendor.kota = dataBankMaster.kota;
				}
			});
		}

		$scope.btnSimpan = function () {

			//Validasi Data Bank
			if (dataBankVendor.namaBank == undefined || dataBankVendor.namaBank == "") {
				dataBankVendor.namaBankError = true;
				document.getElementsByName("namaBank")[0].focus();
			} else {
				dataBankVendor.namaBankError = false;
			}

			if (dataBankVendor.nomorRekening == undefined || dataBankVendor.nomorRekening == "") {
				dataBankVendor.nomorRekeningError = true;
				document.getElementsByName("nomorRekening")[0].focus();
			} else {
				dataBankVendor.nomorRekeningError = false;
			}

			if (dataBankVendor.namaNasabah == undefined || dataBankVendor.namaNasabah == "") {
				dataBankVendor.namaNasabahError = true;
				document.getElementsByName("namaNasabah")[0].focus();
			} else {
				dataBankVendor.namaNasabahError = false;
			}

			if (dataBankVendor.mataUang == undefined || dataBankVendor.mataUang == "") {
				dataBankVendor.mataUangError = true;
				document.getElementsByName("mataUang")[0].focus();
			} else {
				dataBankVendor.mataUangError = false;
			}



			if (dataBankVendor.namaBankError == false && dataBankVendor.nomorRekeningError == false && dataBankVendor.namaNasabahError == false && dataBankVendor.mataUangError == false) {

				$modalInstance.close($scope.dataBankVendor);
			}
		}

		$scope.btnBatal = function () {
			$modalInstance.dismiss('cancel');
		}
	}]);

angular.module('naut')
	.controller('SegmentasiVendorModalController', ['$rootScope', '$scope', '$http', '$modalInstance', '$filter', 'ngTableParams', 'dataSegmentasi', function ($rootScope, $scope, $http, $modalInstance, $filter, ngTableParams, dataSegmentasi) {
		$scope.dataSegmentasi = dataSegmentasi;
		$http.get($rootScope.backendAddress + '/procurement/registrasivendor/registrasiVendorServices/bidangusaha/getBidangUsahaList')
			.success(function (data, status, headers, config) {
				$scope.bidangUsahaList = data;
			});

		$scope.subBidangUsahaList = [];
		$scope.tableSubBidangUsaha = new ngTableParams({
			page: 1,
			count: 5
		}, {
			counts: [], // hide page count
			total: $scope.subBidangUsahaList.length,
			getData: function ($defer, params) {
				$defer.resolve($scope.subBidangUsahaList.slice((params.page() - 1) * params.count(), params.page() * params.count()));
			}
		});

		$http.get($rootScope.backendAddress + '/procurement/registrasivendor/registrasiVendorServices/asosiasi/getList')
			.success(function (data, status, headers, config) {
				$scope.asosiasiList = data;
			});

		var loadDataSubBidang = function () {
			if ($scope.dataSegmentasi !== undefined && $scope.dataSegmentasi.bidangUsaha !== undefined) {
				$http.get($rootScope.backendAddress + '/procurement/registrasivendor/registrasiVendorServices/subbidangusaha/getSubBidangUsahaByBidangUsahaId/' + $scope.dataSegmentasi.bidangUsaha.id)
					.success(function (data, status, headers, config) {
						$scope.subBidangUsahaList = data;
						
												
						angular.forEach($scope.subBidangUsahaList, function (dataSubBidang, index) {
							if ($scope.dataSegmentasi !== undefined && $scope.dataSegmentasi.subBidangUsaha !== undefined && dataSubBidang.id === $scope.dataSegmentasi.subBidangUsaha.id) {
								dataSubBidang.pilihSubBidang = true;
							} else {
								dataSubBidang.pilihSubBidang = false;
							}
						});
						
						
						$scope.tableSubBidangUsaha.reload();
						
						
					});
				
				
			}
			
		}
		loadDataSubBidang();


		
		$scope.changeBidangUsaha = function () {
			loadDataSubBidang();
		}

		$scope.tanggalMulaiStatus = false;
		$scope.tanggalMulaiOpen = function ($event) {
			$event.preventDefault();
			$event.stopPropagation();
			$scope.tanggalMulaiStatus = true;
		};

		$scope.tanggalBerakhirStatus = false;
		$scope.tanggalBerakhirOpen = function ($event) {
			$event.preventDefault();
			$event.stopPropagation();
			$scope.tanggalBerakhirStatus = true;
		};

		$scope.changeTglSegmentasiMulaiStatus = function () {
			$scope.dataSegmentasi.tanggalBerakhir = null;
		}

		$scope.btnSimpan = function () {
			console.log("masuk");
			if ($scope.subBidangUsahaList !== undefined && $scope.subBidangUsahaList !== null && $scope.subBidangUsahaList.length > 0) {
				angular.forEach($scope.subBidangUsahaList, function (dataSubBidang, index) {
					if (dataSubBidang.pilihSubBidang === undefined) {
						$scope.dataSegmentasi.subBidangUsaha = dataSubBidang;
					}
				});
			}
			if ($scope.dataSegmentasi.tanggalMulai !== undefined && $scope.dataSegmentasi.tanggalMulai !== null) {
				$scope.dataSegmentasi.tanggalMulai = $filter('date')($scope.dataSegmentasi.tanggalMulai, 'dd/MM/yyyy');
			}
			if ($scope.dataSegmentasi.tanggalBerakhir !== undefined && $scope.dataSegmentasi.tanggalBerakhir !== null) {
				$scope.dataSegmentasi.tanggalBerakhir = $filter('date')($scope.dataSegmentasi.tanggalBerakhir, 'dd/MM/yyyy');
			}

			//Validasi Data Segmentasi
			if (dataSegmentasi.bidangUsaha == undefined || dataSegmentasi.bidangUsaha == "") {
				dataSegmentasi.bidangUsahaError = true;
				document.getElementsByName("bidangUsaha")[0].focus();
			} else {
				dataSegmentasi.bidangUsahaError = false;
			}
			
			if(dataSegmentasi.subBidangUsaha == null || dataSegmentasi.subBidangUsaha == undefined || dataSegmentasi.subBidangUsaha == "") {
	    		dataSegmentasi.subBidangUsahaError = true;
	            document.getElementsByName("subbidangusaha")[0].focus();
	        } else {
	        	dataSegmentasi.subBidangUsahaError = false;
	        } 
			
			if (dataSegmentasi.asosiasi == undefined || dataSegmentasi.asosiasi == "") {
				dataSegmentasi.asosiasiError = true;
				document.getElementsByName("asosiasi")[0].focus();
			} else {
				dataSegmentasi.asosiasiError = false;
			}

			if (dataSegmentasi.nomor == undefined || dataSegmentasi.nomor == "") {
				dataSegmentasi.nomorError = true;
				document.getElementsByName("nomor")[0].focus();
			} else {
				dataSegmentasi.nomorError = false;
			}

			if (dataSegmentasi.tanggalMulai == undefined || dataSegmentasi.tanggalMulai == "") {
				dataSegmentasi.tanggalMulaiError = true;
				document.getElementsByName("tanggalMulai")[0].focus();
			} else {
				dataSegmentasi.tanggalMulaiError = false;
			}

			if (dataSegmentasi.tanggalBerakhir == undefined || dataSegmentasi.tanggalBerakhir == "") {
				dataSegmentasi.tanggalBerakhirError = true;
				document.getElementsByName("tanggalBerakhir")[0].focus();
			} else {
				dataSegmentasi.tanggalBerakhirError = false;
			}

			console.log($scope.dataSegmentasi);
			if (dataSegmentasi.bidangUsahaError == false && dataSegmentasi.subBidangUsahaError == false && dataSegmentasi.asosiasiError == false && dataSegmentasi.nomorError == false && dataSegmentasi.tanggalMulaiError == false && dataSegmentasi.tanggalBerakhirError == false) {
				$modalInstance.close($scope.dataSegmentasi); 
			}
		}

		$scope.btnBatal = function () {
			$modalInstance.dismiss('cancel');
		}
	}]);

angular.module('naut')
	.controller('PeralatanVendorModalController', ['$http', '$rootScope', '$scope', '$modalInstance', 'ngTableParams', 'dataPeralatan', 'FileUploader', 'toaster', function ($http, $rootScope, $scope, $modalInstance, ngTableParams, dataPeralatan, FileUploader, toaster) {
		$scope.dataPeralatan = dataPeralatan;

		$http.get($rootScope.backendAddress + '/procurement/master/KondisiServices/getList')
			.success(function (data, status, headers, config) {
				$scope.kondisiList = data;
			});

		$http.get($rootScope.backendAddress + '/procurement/registrasivendor/registrasiVendorServices/buktikepemilikan/getList')
			.success(function (data, status, headers, config) {
				$scope.buktiKepemilikanList = data;
			});

		var uploadDokumenBuktiKepemilikan = $scope.uploadDokumenBuktiKepemilikan = new FileUploader({
			url: $rootScope.uploadBackendAddress,
			method: 'POST'
		});
		
		uploadDokumenBuktiKepemilikan.filters.push({
			name: 'customFilter',
			fn: function (item /*{File|FileLikeObject}*/ , options) {
				return item.type=='application/vnd.openxmlformats-officedocument.wordprocessingml.document' || item.type=='application/msword'
                    || item.type=='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' || item.type=='application/vnd.ms-excel'
                    || item.type=='application/pdf' || item.type=='application/pdf';
			}
		});

		uploadDokumenBuktiKepemilikan.onCompleteItem = function (fileItem, response, status, headers) {
			console.info('onCompleteItem', fileItem, response, status, headers);
			fileItem.realFileName = response.fileName;
		};
		
		$scope.uploadDoc = function() {
			if(uploadDokumenBuktiKepemilikan.queue != undefined && uploadDokumenBuktiKepemilikan.queue.length > 0) {
				angular.forEach(uploadDokumenBuktiKepemilikan.queue, function(item) {
	        		item.upload();
	            });
			} else {
				toaster.pop('error', 'Kesalahan Format', 'Hanya mampu untuk Upload .doc , .docx , dan .pdf');
			}
		}

		var uploadGambarPeralatanAsset = $scope.uploadGambarPeralatanAsset = new FileUploader({
			url: $rootScope.uploadBackendAddress,
			method: 'POST'
		});

		uploadGambarPeralatanAsset.filters.push({
			name: 'customFilter',
			fn: function (item /*{File|FileLikeObject}*/ , options) {
				return item.type=='image/jpeg' || item.type=='image/png' || item.type=='image/gif';
			}
		});

		uploadGambarPeralatanAsset.onCompleteItem = function (fileItem, response, status, headers) {
			console.info('onCompleteItem', fileItem, response, status, headers);
			fileItem.realFileName = response.fileName;
		};
		
		$scope.uploadImage = function() {
			if(uploadGambarPeralatanAsset.queue != undefined && uploadGambarPeralatanAsset.queue.length > 0) {
				angular.forEach(uploadGambarPeralatanAsset.queue, function(item) {
	        		item.upload();
	            });
			} else {
				toaster.pop('error', 'Kesalahan Format', 'Hanya mampu untuk Upload .jpg dan .png');
			}
		}

		$scope.validasiTahun = function (tahun) {
			var lanjut = true;
			var date = new Date();
			if (tahun < 1950 || tahun > date.getFullYear()) {
				toaster.pop('error', 'Kesalahan', 'Tahun melebihi batas (1950 s/d Tahun ini)');
				//document.getElementsByName("tahunPembuatan")[0].focus();
				lanjut = false;
			}

			return lanjut;
		}

		$scope.btnSimpan = function () {
			if (uploadDokumenBuktiKepemilikan.queue !== undefined && uploadDokumenBuktiKepemilikan.queue.length > 0) {
				$scope.dataPeralatan.uploadDokumenBuktiKepemilikan = uploadDokumenBuktiKepemilikan.queue;
			}
			if (uploadGambarPeralatanAsset.queue !== undefined && uploadGambarPeralatanAsset.queue.length > 0) {
				$scope.dataPeralatan.uploadGambarPeralatanAsset = uploadGambarPeralatanAsset.queue;
			}

			//Validasi Data Peralatan
			if (dataPeralatan.jenis == undefined || dataPeralatan.jenis == "") {
				dataPeralatan.jenisError = true;
				document.getElementsByName("jenis")[0].focus();
			} else {
				dataPeralatan.jenisError = false;
			}

			if (dataPeralatan.jumlah == undefined || dataPeralatan.jumlah == "") {
				dataPeralatan.jumlahError = true;
				document.getElementsByName("jumlah")[0].focus();
			} else {
				dataPeralatan.jumlahError = false;
			}

			if (dataPeralatan.kapasitas == undefined || dataPeralatan.kapasitas == "") {
				dataPeralatan.kapasitasError = true;
				document.getElementsByName("kapasitas")[0].focus();
			} else {
				dataPeralatan.kapasitasError = false;
			}

			if (dataPeralatan.merk == undefined || dataPeralatan.merk == "") {
				dataPeralatan.merkError = true;
				document.getElementsByName("merk")[0].focus();
			} else {
				dataPeralatan.merkError = false;
			}

			if (dataPeralatan.tahunPembuatan == undefined || dataPeralatan.tahunPembuatan == "") {
				dataPeralatan.tahunPembuatanError = true;
				document.getElementsByName("tahunPembuatan")[0].focus();
			} else {
				if ($scope.validasiTahun(dataPeralatan.tahunPembuatan)) {
					dataPeralatan.tahunPembuatanError = false;
				}
			}

			if (dataPeralatan.kondisi == undefined || dataPeralatan.kondisi == "") {
				dataPeralatan.kondisiError = true;
				document.getElementsByName("kondisi")[0].focus();
			} else {
				dataPeralatan.kondisiError = false;
			}

			if (dataPeralatan.lokasi == undefined || dataPeralatan.lokasi == "") {
				dataPeralatan.lokasiError = true;
				document.getElementsByName("lokasi")[0].focus();
			} else {
				dataPeralatan.lokasiError = false;
			}

			if (dataPeralatan.buktiKepemilikan == undefined || dataPeralatan.buktiKepemilikan == "") {
				dataPeralatan.buktiKepemilikanError = true;
				document.getElementsByName("buktiKepemilikan")[0].focus();
			} else {
				dataPeralatan.buktiKepemilikanError = false;
			}


			if (dataPeralatan.jenisError == false && dataPeralatan.jumlahError == false && dataPeralatan.kapasitasError == false && dataPeralatan.merkError == false && dataPeralatan.tahunPembuatanError == false && dataPeralatan.kondisiError == false && dataPeralatan.lokasiError == false && dataPeralatan.buktiKepemilikanError == false) {
				$modalInstance.close($scope.dataPeralatan);
			}
		}

		$scope.btnBatal = function () {
			$modalInstance.dismiss('cancel');
		}
		
		$scope.downloadFile = $rootScope.viewUploadBackendAddress+'/';

	}]);

angular.module('naut')
	.controller('KeuanganVendorModalController', ['$rootScope', '$scope', '$modalInstance', '$filter', 'ngTableParams', 'dataKeuangan', 'namaEvent', 'toaster', function ($rootScope, $scope, $modalInstance, $filter, ngTableParams, dataKeuangan, namaEvent, toaster) {
		$scope.dataKeuangan = dataKeuangan;

		if (namaEvent == 'tambah') {
			$scope.dataKeuangan.kas = 0;
			$scope.dataKeuangan.bank = 0;
			$scope.dataKeuangan.totalPiutang = 0;
			$scope.dataKeuangan.persediaanBarang = 0;
			$scope.dataKeuangan.pekerjaanDalamProses = 0;
			$scope.dataKeuangan.peralatanDanMesin = 0;
			$scope.dataKeuangan.inventaris = 0;
			$scope.dataKeuangan.gedungGedung = 0;
			$scope.dataKeuangan.aktivaLainnya = 0;
			$scope.dataKeuangan.hutangDagang = 0;
			$scope.dataKeuangan.hutangPajak = 0;
			$scope.dataKeuangan.hutangLainnya = 0;
			$scope.dataKeuangan.kekayaanBersih = 0;
			$scope.dataKeuangan.hutangJangkaPanjang = 0;
			$scope.dataKeuangan.totalAktivaLancar = 0;
			$scope.dataKeuangan.totalAktivaTetap = 0;
			$scope.dataKeuangan.totalHutangJangkaPendek = 0;
			$scope.dataKeuangan.kekayaanBersih = 0;
		}

		// --------------------------------- Start Perhitungan Neraca per Lajur Buku Besar nya ----------------------------------- >

		//Aktiva
		$scope.tambahAktivaLancar = function () {
			$scope.dataKeuangan.totalAktivaLancar = parseFloat($scope.dataKeuangan.kas) + parseFloat($scope.dataKeuangan.bank) 
			+ parseFloat($scope.dataKeuangan.totalPiutang) + parseFloat($scope.dataKeuangan.persediaanBarang) + parseFloat($scope.dataKeuangan.pekerjaanDalamProses);
		}

		$scope.tambahAktivaTetap = function () {
			$scope.dataKeuangan.totalAktivaTetap = parseFloat($scope.dataKeuangan.peralatanDanMesin) + parseFloat($scope.dataKeuangan.inventaris) 
			+ parseFloat($scope.dataKeuangan.gedungGedung);
		}

		$scope.totalAktiva = function () {
			$scope.dataKeuangan.totalAktiva = parseFloat($scope.dataKeuangan.totalAktivaLancar) + parseFloat($scope.dataKeuangan.totalAktivaTetap) 
			+ parseFloat($scope.dataKeuangan.aktivaLainnya);
		}

		//Pasiva
		$scope.tambahPasiva = function () {
			$scope.dataKeuangan.totalHutangJangkaPendek = parseFloat($scope.dataKeuangan.hutangDagang) + parseFloat($scope.dataKeuangan.hutangPajak) 
			+ parseFloat($scope.dataKeuangan.hutangLainnya);
		}

		$scope.rugiLaba = function () {
			$scope.dataKeuangan.kekayaanBersih = (parseFloat($scope.dataKeuangan.kas) + parseFloat($scope.dataKeuangan.bank) + parseFloat($scope.dataKeuangan.totalPiutang) 
					+ parseFloat($scope.dataKeuangan.persediaanBarang) + parseFloat($scope.dataKeuangan.pekerjaanDalamProses) + parseFloat($scope.dataKeuangan.peralatanDanMesin) 
					+ parseFloat($scope.dataKeuangan.inventaris) + parseFloat($scope.dataKeuangan.gedungGedung) + parseFloat($scope.dataKeuangan.aktivaLainnya)) 
					- (parseFloat($scope.dataKeuangan.hutangDagang) + parseFloat($scope.dataKeuangan.hutangPajak) + parseFloat($scope.dataKeuangan.hutangLainnya) 
							+ parseFloat($scope.dataKeuangan.hutangJangkaPanjang));
		}

		$scope.totalPasiva = function () {
			$scope.dataKeuangan.totalPasiva = ((parseFloat($scope.dataKeuangan.kas) + parseFloat($scope.dataKeuangan.bank) + parseFloat($scope.dataKeuangan.totalPiutang) 
						+ parseFloat($scope.dataKeuangan.persediaanBarang) + parseFloat($scope.dataKeuangan.pekerjaanDalamProses) + parseFloat($scope.dataKeuangan.peralatanDanMesin) 
						+ parseFloat($scope.dataKeuangan.inventaris) + parseFloat($scope.dataKeuangan.gedungGedung) + parseFloat($scope.dataKeuangan.aktivaLainnya)) 
						- (parseFloat($scope.dataKeuangan.hutangDagang) + parseFloat($scope.dataKeuangan.hutangPajak) + parseFloat($scope.dataKeuangan.hutangLainnya) 
								+ parseFloat($scope.dataKeuangan.hutangJangkaPanjang))) + (parseFloat($scope.dataKeuangan.hutangDagang) + parseFloat($scope.dataKeuangan.hutangPajak) 
										+ parseFloat($scope.dataKeuangan.hutangLainnya) + parseFloat($scope.dataKeuangan.hutangJangkaPanjang));
			}
			// --------------------------------- End Perhitungan Neraca per Lajur Buku Besar nya -------------------------------------- >

		$scope.tanggalAuditStatus = false;
		$scope.tanggalAuditOpen = function ($event) {
			$event.preventDefault();
			$event.stopPropagation();
			$scope.tanggalAuditStatus = true;
		};
    
        $scope.tahunKeuanganList = [];
        var yearNow = $filter('date')(new Date(), 'yyyy');
        for(var i=yearNow; i > (yearNow-5);i-- ){
            $scope.tahunKeuanganList.push({
                id : i
            });
        }

		$scope.validasiTahun = function (tahun) {
			var lanjut = true;
			if (tahun < 1950 || tahun > 2020) {
				toaster.pop('error', 'Kesalahan', 'Tahun melebihi batas (1950 s/d 2020)');
				document.getElementsByName("tahunKeuangan")[0].focus();
				lanjut = false;
			}

			return lanjut;
		}

		$scope.btnSimpan = function () {

			$scope.dataKeuangan.totalHutang = parseFloat(dataKeuangan.hutangJangkaPanjang) + parseFloat(dataKeuangan.totalHutangJangkaPendek);
			
			if (dataKeuangan.nomorAudit == undefined || dataKeuangan.nomorAudit == "") {
				dataKeuangan.nomorAuditError = true;
				document.getElementsByName("nomorAudit")[0].focus();
			} else {
				dataKeuangan.nomorAuditError = false;
			}

			if (dataKeuangan.tanggalAudit == undefined || dataKeuangan.tanggalAudit == "") {
				dataKeuangan.tanggalAuditError = true;
				document.getElementsByName("tanggalAudit")[0].focus();
			} else {
				dataKeuangan.tanggalAuditError = false;
			}

			if (dataKeuangan.namaAudit == undefined || dataKeuangan.namaAudit == "") {
				dataKeuangan.namaAuditError = true;
				document.getElementsByName("namaAudit")[0].focus();
			} else {
				dataKeuangan.namaAuditError = false;
			}

			if (dataKeuangan.tahunKeuangan == undefined || dataKeuangan.tahunKeuangan == "") {
				dataKeuangan.tahunKeuanganError = true;
				document.getElementsByName("tahunKeuangan")[0].focus();
			} else {
				dataKeuangan.tahunKeuanganError = false;
			}

			var totalAktivaError = false;
			if (dataKeuangan.totalAktiva == undefined || dataKeuangan.totalAktiva == "") {
				totalAktivaError = true;
				toaster.pop('warning', 'Kesalahan', 'Data Neraca Harus Lengkap');
			}


			if (dataKeuangan.nomorAuditError == false && dataKeuangan.tanggalAuditError == false && dataKeuangan.namaAuditError == false && dataKeuangan.tahunKeuanganError == false && totalAktivaError == false) {
				$modalInstance.close($scope.dataKeuangan);
			}
			
		}

		$scope.btnBatal = function () {
			$modalInstance.dismiss('cancel');
		}
	}]);

angular.module('naut')
	.controller('PengalamanPekerjaanModalController', ['$rootScope', '$scope', '$modalInstance', '$filter', 'FileUploader', 'judulModal', 'namaModal', 'bidangUsahaList', 'mataUangList', 'dataPengalaman', function ($rootScope, $scope, $modalInstance, $filter, FileUploader, judulModal, namaModal, bidangUsahaList, mataUangList, dataPengalaman) {
		$scope.judulModal = judulModal;
		$scope.namaModal = namaModal;
		$scope.dataPengalaman = dataPengalaman;
		$scope.bidangUsahaList = bidangUsahaList;
		$scope.mataUangList = mataUangList;
		$scope.downloadFile = $rootScope.viewUploadBackendAddress+'/';

		var uploadBukti = $scope.uploadBukti = new FileUploader({
			url: $rootScope.uploadBackendAddress,
			method: 'POST'
		});

		uploadBukti.filters.push({
			name: 'customFilter',
			fn: function (item /*{File|FileLikeObject}*/ , options) {
				return item.type=='application/vnd.openxmlformats-officedocument.wordprocessingml.document' || item.type=='application/msword'
					|| item.type=='application/pdf';
			}
		});

		uploadBukti.onCompleteItem = function (fileItem, response, status, headers) {
			console.info('onCompleteItem', fileItem, response, status, headers);
			fileItem.realFileName = response.fileName;
		};
		
		$scope.fileLama = true;
		$scope.uploadAja = function() {
			if(uploadBukti.queue != undefined && uploadBukti.queue.length > 0) {
				angular.forEach(uploadBukti.queue, function (item) {
					item.upload();
				});
			} else {
				toaster.pop('error', 'Kesalahan Format', 'Hanya mampu untuk Upload .doc, .docx dan .pdf');
			}
		}

		$scope.mulaiKerjasamaStatus = false;
		$scope.mulaiKerjasamaOpen = function ($event) {
			$event.preventDefault();
			$event.stopPropagation();
			$scope.mulaiKerjasamaStatus = true;
		};

		$scope.btnSimpan = function () {

			if (dataPengalaman.namaPekerjaan == undefined || dataPengalaman.namaPekerjaan == "") {
				dataPengalaman.namaPekerjaanError = true;
				document.getElementsByName("namaPekerjaan")[0].focus();
			} else {
				dataPengalaman.namaPekerjaanError = false;
			}

			if (dataPengalaman.lokasiPekerjaan == undefined || dataPengalaman.lokasiPekerjaan == "") {
				dataPengalaman.lokasiPekerjaanError = true;
				document.getElementsByName("lokasiPekerjaan")[0].focus();
			} else {
				dataPengalaman.lokasiPekerjaanError = false;
			}

			if (dataPengalaman.bidangUsaha == undefined || dataPengalaman.bidangUsaha == "") {
				dataPengalaman.bidangUsahaError = true;
				document.getElementsByName("bidangUsaha")[0].focus();
			} else {
				dataPengalaman.bidangUsahaError = false;
			}

			if (dataPengalaman.mulaiKerjasama == undefined || dataPengalaman.mulaiKerjasama == "") {
				dataPengalaman.mulaiKerjasamaError = true;
				document.getElementsByName("mulaiKerjasama")[0].focus();
			} else {
				dataPengalaman.mulaiKerjasamaError = false;
			}

			if (dataPengalaman.nilaiKontrak == undefined || dataPengalaman.nilaiKontrak == "") {
				dataPengalaman.nilaiKontrakError = true;
				document.getElementsByName("nilaiKontrak")[0].focus();
			} else {
				dataPengalaman.nilaiKontrakError = false;
			}

			if (dataPengalaman.mataUang == undefined || dataPengalaman.mataUang == "") {
				dataPengalaman.mataUangError = true;
				document.getElementsByName("mataUang")[0].focus();
			} else {
				dataPengalaman.mataUangError = false;
			}

			if (uploadBukti.queue !== undefined && uploadBukti.queue.length > 0) {
				$scope.dataPengalaman.uploadBukti = uploadBukti.queue;
				dataPengalaman.buktiKerjasamaError = false;
			} else {
				dataPengalaman.buktiKerjasamaError = true;
				document.getElementsByName("buktiKerjasama")[0].focus();
			}


			if (dataPengalaman.namaPekerjaanError == false && dataPengalaman.lokasiPekerjaanError == false && dataPengalaman.bidangUsahaError == false && dataPengalaman.mulaiKerjasamaError == false && dataPengalaman.nilaiKontrakError == false && dataPengalaman.mataUangError == false && dataPengalaman.buktiKerjasamaError == false) {
				console.log("SIMPAN");
				$modalInstance.close($scope.dataPengalaman);
			}
		}

		$scope.btnBatal = function () {
			$modalInstance.dismiss('cancel');
		}
	}]);

angular.module('naut')
	.controller('BankModalController', ['$rootScope', '$scope', '$http', '$modalInstance', 'dataBankMaster', 'toaster', 'ngTableParams', function ($rootScope, $scope, $http, $modalInstance, dataBankMaster, toaster, ngTableParams) {

		$http.get($rootScope.backendAddress + '/procurement/registrasivendor/registrasiVendorServices/bank/getList')
			.success(function (data, status, headers, config) {
				$scope.bankList = data;
			});

		$scope.pilihBank = function (dataBank) {
			dataBankMaster = {
				namaBank: dataBank.namaBank,
				cabangBank: dataBank.namaKantor,
				alamatBank: dataBank.alamat,
				kota: dataBank.kota
			}

			$scope.dataBankMaster = dataBankMaster;
		}

		$scope.btnSimpan = function () {
			$modalInstance.close($scope.dataBankMaster);
		}

		$scope.btnBatal = function () {
			$modalInstance.dismiss('cancel');
		}

	}]);

//--------------------------modal dokumentasi SKD controller------------------//

/*angular.module('naut')
.controller('DokumentasiSKDModalController', function ($rootScope, $scope, $http, $modalInstance, toaster, ngTableParams) {

	
	$scope.btnSimpan = function () {
		$modalInstance.close();
	}

	$scope.btnBatal = function () {
		$modalInstance.dismiss('cancel');
	}

});*/
;
/**=========================================================
 * Module: RegVendorFooterController.js
 * Author: F.H.K
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('naut')
        .controller('RegVendorFooterController', RegVendorFooterController);

    function RegVendorFooterController($http, $timeout, $window, $scope) {
        
        $scope.tampilkanTanggal = function() {
            var tanggallengkap = new String(); 
            var namahari = ("Minggu Senin Selasa Rabu Kamis Jumat Sabtu"); 
            var namabulan = ("Januari Februari Maret April Mei Juni Juli Agustus September Oktober Nopember Desember"); 
            var tgl = new Date(); 
            var hari = tgl.getDay(); 
            var tanggal = tgl.getDate(); 
            var bulan = tgl.getMonth(); 
            var tahun = tgl.getFullYear(); 
            
            namabulan = namabulan.split(" "); 
            namahari = namahari.split(" "); 
            
            $scope.tanggallengkap = namahari[hari] + ", " +tanggal + " " + namabulan[bulan] + " " + tahun;     
        }
        
        $scope.tampilkanjam = function() {
            var waktu = new Date();
            var jam = waktu.getHours();
            var menit = waktu.getMinutes();
            var detik = waktu.getSeconds();
            var teksjam = new String();
            if ( menit <= 9 )
                menit = "0" + menit;
            if ( detik <= 9 )
                detik = "0" + detik;
            teksjam = jam + ":" + menit + ":" + detik;
            $scope.tempatjam = teksjam;
            
            $timeout($scope.tampilkanjam, 1000);
        }
        
        $scope.tampilkanTanggal();
        $scope.tampilkanjam();
    }

    RegVendorFooterController.$inject = ['$http', '$timeout', '$window', '$scope'];

})();