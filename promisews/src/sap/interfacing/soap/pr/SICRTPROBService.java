package sap.interfacing.soap.pr;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;

import id.co.promise.procurement.utils.Constant;

import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.7.10
 * 2020-11-17T10:00:14.397+07:00
 * Generated source version: 2.7.10
 * 
 */
@WebServiceClient(name = "SI_CRT_PR_OBService", 
                  wsdlLocation = "file:/G:/KAI/KAI/promisews/src/sap/wsdl/SI_CRT_PR_OBService_piqas.wsdl",
                  targetNamespace = "urn:crt_purch_requisition") 
public class SICRTPROBService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("urn:crt_purch_requisition", "SI_CRT_PR_OBService");
    public final static QName HTTPSPort = new QName("urn:crt_purch_requisition", "HTTPS_Port");
    public final static QName HTTPPort = new QName("urn:crt_purch_requisition", "HTTP_Port");
    static {
        URL url = null;
        String fileName = "";
        try {
        	if(Constant.IS_DEVELOPMENT_MODE) {
        		fileName = "SI_CRT_PR_OBService_piqas.wsdl";
        		url = new URL("file:"+Constant.LOCATION_FILE_WSDL + "SI_CRT_PR_OBService_piqas.wsdl");
        	}else {
        		fileName = "CrtPR_Piprod.wsdl";
        		url = new URL("file:"+Constant.LOCATION_FILE_WSDL + "CrtPR_Piprod.wsdl");
        	}
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(SICRTPROBService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", Constant.LOCATION_FILE_WSDL + fileName);
        }
        WSDL_LOCATION = url;
    }

    public SICRTPROBService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public SICRTPROBService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public SICRTPROBService() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public SICRTPROBService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public SICRTPROBService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public SICRTPROBService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     *
     * @return
     *     returns SICRTPROB
     */
    @WebEndpoint(name = "HTTPS_Port")
    public SICRTPROB getHTTPSPort() {
        return super.getPort(HTTPSPort, SICRTPROB.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns SICRTPROB
     */
    @WebEndpoint(name = "HTTPS_Port")
    public SICRTPROB getHTTPSPort(WebServiceFeature... features) {
        return super.getPort(HTTPSPort, SICRTPROB.class, features);
    }
    /**
     *
     * @return
     *     returns SICRTPROB
     */
    @WebEndpoint(name = "HTTP_Port")
    public SICRTPROB getHTTPPort() {
        return super.getPort(HTTPPort, SICRTPROB.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns SICRTPROB
     */
    @WebEndpoint(name = "HTTP_Port")
    public SICRTPROB getHTTPPort(WebServiceFeature... features) {
        return super.getPort(HTTPPort, SICRTPROB.class, features);
    }

}
