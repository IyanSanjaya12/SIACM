package sap.interfacing.soap.po;

import java.net.MalformedURLException;
import java.net.URL;
import java.nio.file.Path;
import java.nio.file.Paths;

import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;

import id.co.promise.procurement.utils.Constant;

import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.7.2
 * 2020-12-01T23:05:47.678+08:00
 * Generated source version: 2.7.2
 * 
 */
@WebServiceClient(name = "SI_CRT_PO_OBService", 
                  	wsdlLocation = "file:/G:/KAI/KAI/promisews/src/sap/wsdl/SI_CRT_PO_OBService_piqas.wsdl",
//					wsdlLocation = "file:/opt/promise/SI_CRT_PO_OBService_piqas.wsdl",
					targetNamespace = "urn:crt_purch_order") 
public class SICRTPOOBService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("urn:crt_purch_order", "SI_CRT_PO_OBService");
    public final static QName HTTPSPort = new QName("urn:crt_purch_order", "HTTPS_Port");
    public final static QName HTTPPort = new QName("urn:crt_purch_order", "HTTP_Port");
    static {
    	 String fileName = "";
        URL url = null;
        try {
        	if(Constant.IS_DEVELOPMENT_MODE) {
        		fileName = "SI_CRT_PO_OBService_piqas.wsdl";
        		url = new URL("file:"+Constant.LOCATION_FILE_WSDL+ "SI_CRT_PO_OBService_piqas.wsdl");        		
        	}else {
        		fileName = "CrtPO_Piprod.wsdl";
        		url = new URL("file:"+Constant.LOCATION_FILE_WSDL+ "CrtPO_Piprod.wsdl"); 
        	}
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(SICRTPOOBService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", Constant.LOCATION_FILE_WSDL+ fileName);
        }
        WSDL_LOCATION = url;
    }

    public SICRTPOOBService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public SICRTPOOBService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public SICRTPOOBService() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public SICRTPOOBService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public SICRTPOOBService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public SICRTPOOBService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     *
     * @return
     *     returns SICRTPOOB
     */
    @WebEndpoint(name = "HTTPS_Port")
    public SICRTPOOB getHTTPSPort() {
        return super.getPort(HTTPSPort, SICRTPOOB.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns SICRTPOOB
     */
    @WebEndpoint(name = "HTTPS_Port")
    public SICRTPOOB getHTTPSPort(WebServiceFeature... features) {
        return super.getPort(HTTPSPort, SICRTPOOB.class, features);
    }
    /**
     *
     * @return
     *     returns SICRTPOOB
     */
    @WebEndpoint(name = "HTTP_Port")
    public SICRTPOOB getHTTPPort() {
        return super.getPort(HTTPPort, SICRTPOOB.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns SICRTPOOB
     */
    @WebEndpoint(name = "HTTP_Port")
    public SICRTPOOB getHTTPPort(WebServiceFeature... features) {
        return super.getPort(HTTPPort, SICRTPOOB.class, features);
    }

}
